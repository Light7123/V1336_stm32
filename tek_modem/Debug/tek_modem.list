
tek_modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003a28  08003a28  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a28  08003a28  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d0  20000060  08003a90  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001830  08003a90  00021830  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dcc  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dce  00000000  00000000  00037e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000533a  00000000  00000000  0003ac65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e0  00000000  00000000  0003ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c5c  00000000  00000000  00040680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000f86b  00000000  00000000  000412dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001116f  00000000  00000000  00050b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000569c0  00000000  00000000  00061cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001918  00000000  00000000  000b8678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000b9f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037c4 	.word	0x080037c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080037c4 	.word	0x080037c4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_UART_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	// передана половина данных
}
 8000234:	4770      	bx	lr
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <HAL_UART_TxCpltCallback>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <_Z10modem_workv>:

}
int error_count=0;
uint32_t timer;
void modem_work()
{
 800023c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023e:	464e      	mov	r6, r9
 8000240:	4645      	mov	r5, r8
 8000242:	46de      	mov	lr, fp
 8000244:	4657      	mov	r7, sl
 8000246:	b5e0      	push	{r5, r6, r7, lr}
 8000248:	4c58      	ldr	r4, [pc, #352]	; (80003ac <_Z10modem_workv+0x170>)
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 800024a:	250a      	movs	r5, #10
 800024c:	44a5      	add	sp, r4
#else
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }

	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800024e:	ab01      	add	r3, sp, #4
 8000250:	469b      	mov	fp, r3
 8000252:	ab03      	add	r3, sp, #12
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 8000254:	465a      	mov	r2, fp
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8000256:	9301      	str	r3, [sp, #4]
      { _M_string_length = __length; }
 8000258:	2300      	movs	r3, #0
	char buffer[500];
	bool ok_flag=false;
 800025a:	4698      	mov	r8, r3
 800025c:	6053      	str	r3, [r2, #4]
 800025e:	7213      	strb	r3, [r2, #8]
	string log_buffer;
	for(int i=0;i<10;i++)
 8000260:	4b53      	ldr	r3, [pc, #332]	; (80003b0 <_Z10modem_workv+0x174>)
 8000262:	4e54      	ldr	r6, [pc, #336]	; (80003b4 <_Z10modem_workv+0x178>)
 8000264:	469a      	mov	sl, r3
 8000266:	4b54      	ldr	r3, [pc, #336]	; (80003b8 <_Z10modem_workv+0x17c>)
 8000268:	4699      	mov	r9, r3

		uint32_t sim_start_Delay = 0;
		//	HAL_UART_Transmit(&huart1, (uint8_t*)"ATE1\r\n",6,100);
		//	HAL_Delay(100);
		//	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) buffer, 100);
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT\r\n", 4,100);
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	2204      	movs	r2, #4
 800026e:	4651      	mov	r1, sl
 8000270:	0030      	movs	r0, r6
 8000272:	f002 fd1f 	bl	8002cb4 <HAL_UART_Transmit>
		HAL_Delay(300);
 8000276:	2096      	movs	r0, #150	; 0x96
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	f001 fa4d 	bl	8001718 <HAL_Delay>
		//log_buffer<<"LOG: STM32F0: "<<"AT\r\n";
		//	log_buffer.append("LOG: STM32F0: ").append("AT\r\n");
		//		HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
		//		HAL_Delay(300);
		//	log_buffer.clear();
		HAL_UART_Receive_DMA(&huart1, (uint8_t*) buffer, 100);
 800027e:	a907      	add	r1, sp, #28
 8000280:	2264      	movs	r2, #100	; 0x64
 8000282:	0030      	movs	r0, r6
 8000284:	f002 f970 	bl	8002568 <HAL_UART_Receive_DMA>
		HAL_Delay(1000);
 8000288:	20fa      	movs	r0, #250	; 0xfa
 800028a:	0080      	lsls	r0, r0, #2
 800028c:	f001 fa44 	bl	8001718 <HAL_Delay>
		//		HAL_UART_Receive(&huart1, (uint8_t*)buffer, 500, 1000);
		//		timer=HAL_GetTick();
		//		log_buffer.append("LOG: MODEM: ").append(buffer);
		//		HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
		//		log_buffer.clear();
		for(int i=0;i<499;i++)
 8000290:	21fa      	movs	r1, #250	; 0xfa
		HAL_Delay(1000);
 8000292:	2401      	movs	r4, #1
 8000294:	ab07      	add	r3, sp, #28
		for(int i=0;i<499;i++)
 8000296:	0049      	lsls	r1, r1, #1
 8000298:	e003      	b.n	80002a2 <_Z10modem_workv+0x66>
 800029a:	3401      	adds	r4, #1
 800029c:	3301      	adds	r3, #1
 800029e:	428c      	cmp	r4, r1
 80002a0:	d03f      	beq.n	8000322 <_Z10modem_workv+0xe6>
		{
			if(buffer[i]=='O'&&buffer[i+1]=='K')
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	2a4f      	cmp	r2, #79	; 0x4f
 80002a6:	d1f8      	bne.n	800029a <_Z10modem_workv+0x5e>
 80002a8:	785a      	ldrb	r2, [r3, #1]
 80002aa:	2a4b      	cmp	r2, #75	; 0x4b
 80002ac:	d1f5      	bne.n	800029a <_Z10modem_workv+0x5e>
			{
				ok_flag=true;
				break;
			}
		}
		if(strstr(buffer,"SIM not inserted"))
 80002ae:	4649      	mov	r1, r9
 80002b0:	a807      	add	r0, sp, #28
 80002b2:	f002 fea7 	bl	8003004 <strstr>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d065      	beq.n	8000386 <_Z10modem_workv+0x14a>
				ok_flag=true;
 80002ba:	2301      	movs	r3, #1
 80002bc:	4698      	mov	r8, r3
		{
			//UARTPrint("MODEM ERROR\r\n");
			//glcd_int_puts(modem_error, 0, 0);
			//auth_flag=0;
			init_flag=0;
 80002be:	2400      	movs	r4, #0
			sub=false;
			memset(buffer,9,500);
 80002c0:	22fa      	movs	r2, #250	; 0xfa
			init_flag=0;
 80002c2:	4b3e      	ldr	r3, [pc, #248]	; (80003bc <_Z10modem_workv+0x180>)
			memset(buffer,9,500);
 80002c4:	2109      	movs	r1, #9
			init_flag=0;
 80002c6:	601c      	str	r4, [r3, #0]
			sub=false;
 80002c8:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <_Z10modem_workv+0x184>)
			memset(buffer,9,500);
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	a807      	add	r0, sp, #28
			sub=false;
 80002ce:	701c      	strb	r4, [r3, #0]
			memset(buffer,9,500);
 80002d0:	f002 fe90 	bl	8002ff4 <memset>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	2201      	movs	r2, #1
 80002d8:	01c9      	lsls	r1, r1, #7
 80002da:	483a      	ldr	r0, [pc, #232]	; (80003c4 <_Z10modem_workv+0x188>)
 80002dc:	f001 fc78 	bl	8001bd0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80002e0:	20fa      	movs	r0, #250	; 0xfa
 80002e2:	0040      	lsls	r0, r0, #1
 80002e4:	f001 fa18 	bl	8001718 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80002e8:	2180      	movs	r1, #128	; 0x80
 80002ea:	2200      	movs	r2, #0
 80002ec:	4835      	ldr	r0, [pc, #212]	; (80003c4 <_Z10modem_workv+0x188>)
 80002ee:	01c9      	lsls	r1, r1, #7
 80002f0:	f001 fc6e 	bl	8001bd0 <HAL_GPIO_WritePin>
			modem_flag = 0;
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <_Z10modem_workv+0x18c>)
 80002f6:	701c      	strb	r4, [r3, #0]
	for(int i=0;i<10;i++)
 80002f8:	3d01      	subs	r5, #1
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d1b5      	bne.n	800026a <_Z10modem_workv+0x2e>

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 80002fe:	9801      	ldr	r0, [sp, #4]
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
 8000300:	ab03      	add	r3, sp, #12
 8000302:	4298      	cmp	r0, r3
 8000304:	d004      	beq.n	8000310 <_Z10modem_workv+0xd4>
	  _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8000306:	465b      	mov	r3, fp
 8000308:	6899      	ldr	r1, [r3, #8]
 800030a:	3101      	adds	r1, #1
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800030c:	f002 fd8c 	bl	8002e28 <_ZdlPvj>


		}
	}

}
 8000310:	2385      	movs	r3, #133	; 0x85
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	449d      	add	sp, r3
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	46bb      	mov	fp, r7
 800031a:	46b2      	mov	sl, r6
 800031c:	46a9      	mov	r9, r5
 800031e:	46a0      	mov	r8, r4
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(strstr(buffer,"SIM not inserted"))
 8000322:	4649      	mov	r1, r9
 8000324:	a807      	add	r0, sp, #28
 8000326:	f002 fe6d 	bl	8003004 <strstr>
 800032a:	2800      	cmp	r0, #0
 800032c:	d1c7      	bne.n	80002be <_Z10modem_workv+0x82>
		else if(ok_flag)
 800032e:	4643      	mov	r3, r8
 8000330:	2b00      	cmp	r3, #0
 8000332:	d128      	bne.n	8000386 <_Z10modem_workv+0x14a>
			HAL_Delay(1000);
 8000334:	20fa      	movs	r0, #250	; 0xfa
			error_count++;
 8000336:	4f25      	ldr	r7, [pc, #148]	; (80003cc <_Z10modem_workv+0x190>)
			HAL_Delay(1000);
 8000338:	0080      	lsls	r0, r0, #2
			error_count++;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
			HAL_Delay(1000);
 8000340:	f001 f9ea 	bl	8001718 <HAL_Delay>
			if(error_count>5)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	2b05      	cmp	r3, #5
 8000348:	ddd6      	ble.n	80002f8 <_Z10modem_workv+0xbc>
				sub=false;
 800034a:	4642      	mov	r2, r8
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <_Z10modem_workv+0x184>)
				memset(buffer,9,500);
 800034e:	2109      	movs	r1, #9
				sub=false;
 8000350:	701a      	strb	r2, [r3, #0]
				memset(buffer,9,500);
 8000352:	a807      	add	r0, sp, #28
 8000354:	0022      	movs	r2, r4
 8000356:	f002 fe4d 	bl	8002ff4 <memset>
				init_flag=0;
 800035a:	4642      	mov	r2, r8
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800035c:	2180      	movs	r1, #128	; 0x80
				init_flag=0;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <_Z10modem_workv+0x180>)
				error_count=0;
 8000360:	603a      	str	r2, [r7, #0]
				init_flag=0;
 8000362:	601a      	str	r2, [r3, #0]
				modem_flag = 0;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <_Z10modem_workv+0x18c>)
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000366:	01c9      	lsls	r1, r1, #7
				modem_flag = 0;
 8000368:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800036a:	4816      	ldr	r0, [pc, #88]	; (80003c4 <_Z10modem_workv+0x188>)
 800036c:	2201      	movs	r2, #1
 800036e:	f001 fc2f 	bl	8001bd0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000372:	0020      	movs	r0, r4
 8000374:	f001 f9d0 	bl	8001718 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	2200      	movs	r2, #0
 800037c:	4811      	ldr	r0, [pc, #68]	; (80003c4 <_Z10modem_workv+0x188>)
 800037e:	01c9      	lsls	r1, r1, #7
 8000380:	f001 fc26 	bl	8001bd0 <HAL_GPIO_WritePin>
 8000384:	e7b8      	b.n	80002f8 <_Z10modem_workv+0xbc>
			memset(buffer,9,500);
 8000386:	22fa      	movs	r2, #250	; 0xfa
 8000388:	2109      	movs	r1, #9
 800038a:	0052      	lsls	r2, r2, #1
 800038c:	a807      	add	r0, sp, #28
 800038e:	f002 fe31 	bl	8002ff4 <memset>
			error_count=0;
 8000392:	2200      	movs	r2, #0
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <_Z10modem_workv+0x190>)
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"OK\n\r", 4);
 8000396:	490e      	ldr	r1, [pc, #56]	; (80003d0 <_Z10modem_workv+0x194>)
			error_count=0;
 8000398:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"OK\n\r", 4);
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <_Z10modem_workv+0x198>)
 800039c:	3204      	adds	r2, #4
 800039e:	f002 f893 	bl	80024c8 <HAL_UART_Transmit_DMA>
			modem_flag=true;
 80003a2:	2201      	movs	r2, #1
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <_Z10modem_workv+0x18c>)
 80003a6:	701a      	strb	r2, [r3, #0]
			break;
 80003a8:	e7a9      	b.n	80002fe <_Z10modem_workv+0xc2>
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	fffffdec 	.word	0xfffffdec
 80003b0:	080037dc 	.word	0x080037dc
 80003b4:	200001b4 	.word	0x200001b4
 80003b8:	080037e4 	.word	0x080037e4
 80003bc:	200002b8 	.word	0x200002b8
 80003c0:	200016dc 	.word	0x200016dc
 80003c4:	48000800 	.word	0x48000800
 80003c8:	200002bc 	.word	0x200002bc
 80003cc:	20000080 	.word	0x20000080
 80003d0:	080037f8 	.word	0x080037f8
 80003d4:	20000234 	.word	0x20000234

080003d8 <_Z10modem_waitv>:
char recive_packet_init[256];
char recive_packet_send[1010];
char recive_packet_sub[256];
uint32_t OK_Delay=0;
void modem_wait()
{
 80003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003da:	46de      	mov	lr, fp
 80003dc:	4657      	mov	r7, sl
 80003de:	464e      	mov	r6, r9
 80003e0:	4645      	mov	r5, r8
	int test=0;
	char ch[20];
	//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_data, 200);
	bool corect_rec=false;
	for(i=0;i<1;i++)
 80003e2:	2200      	movs	r2, #0
 80003e4:	4b5f      	ldr	r3, [pc, #380]	; (8000564 <_Z10modem_waitv+0x18c>)
{
 80003e6:	b5e0      	push	{r5, r6, r7, lr}
	for(i=0;i<1;i++)
 80003e8:	601a      	str	r2, [r3, #0]
	{
		if(init_flag==1)
 80003ea:	4b5f      	ldr	r3, [pc, #380]	; (8000568 <_Z10modem_waitv+0x190>)
{
 80003ec:	b083      	sub	sp, #12
		if(init_flag==1)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d000      	beq.n	80003f6 <_Z10modem_waitv+0x1e>
 80003f4:	e0ac      	b.n	8000550 <_Z10modem_waitv+0x178>
		{
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"INIT\n\r", 6);
 80003f6:	4d5d      	ldr	r5, [pc, #372]	; (800056c <_Z10modem_waitv+0x194>)
 80003f8:	495d      	ldr	r1, [pc, #372]	; (8000570 <_Z10modem_waitv+0x198>)
 80003fa:	0028      	movs	r0, r5
 80003fc:	3206      	adds	r2, #6
 80003fe:	f002 f863 	bl	80024c8 <HAL_UART_Transmit_DMA>
				HAL_UART_Transmit(&huart2, (uint8_t*)"OK\n\r", 4,40);

			}
			//			}
		}
		HAL_Delay(15);
 8000402:	200f      	movs	r0, #15
 8000404:	f001 f988 	bl	8001718 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart2, rx_data, 1600);
 8000408:	22c8      	movs	r2, #200	; 0xc8
 800040a:	4c5a      	ldr	r4, [pc, #360]	; (8000574 <_Z10modem_waitv+0x19c>)
 800040c:	0028      	movs	r0, r5
 800040e:	00d2      	lsls	r2, r2, #3
 8000410:	0021      	movs	r1, r4
 8000412:	f002 f8a9 	bl	8002568 <HAL_UART_Receive_DMA>
		for(int r=0;r<1590;r++)
 8000416:	2300      	movs	r3, #0
 8000418:	4a57      	ldr	r2, [pc, #348]	; (8000578 <_Z10modem_waitv+0x1a0>)
 800041a:	4f58      	ldr	r7, [pc, #352]	; (800057c <_Z10modem_waitv+0x1a4>)
 800041c:	4690      	mov	r8, r2
 800041e:	4a58      	ldr	r2, [pc, #352]	; (8000580 <_Z10modem_waitv+0x1a8>)
					}
				}
			}
			if(rx_data[r]=='i'&&rx_data[r+1]=='n'&&rx_data[r+2]=='i'&&rx_data[r+3]==':')
			{
				for(int ii=5+r;ii<1590;ii++)
 8000420:	4d58      	ldr	r5, [pc, #352]	; (8000584 <_Z10modem_waitv+0x1ac>)
 8000422:	4691      	mov	r9, r2

						break;
					}
					else
					{
						recive_packet_init[ii-r-5]=rx_data[ii];
 8000424:	4a58      	ldr	r2, [pc, #352]	; (8000588 <_Z10modem_waitv+0x1b0>)
 8000426:	4693      	mov	fp, r2
						memset(rx_data, 9, 1590);
						break;
					}
					else
					{
						recive_packet_send[ii-r-5]=rx_data[ii];
 8000428:	4a58      	ldr	r2, [pc, #352]	; (800058c <_Z10modem_waitv+0x1b4>)
 800042a:	4692      	mov	sl, r2
						recive_packet_sub[ii-5-r]=rx_data[ii];
 800042c:	4a58      	ldr	r2, [pc, #352]	; (8000590 <_Z10modem_waitv+0x1b8>)
 800042e:	9201      	str	r2, [sp, #4]
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 8000430:	5ce2      	ldrb	r2, [r4, r3]
 8000432:	2a73      	cmp	r2, #115	; 0x73
 8000434:	d06c      	beq.n	8000510 <_Z10modem_waitv+0x138>
			if(rx_data[r]=='i'&&rx_data[r+1]=='n'&&rx_data[r+2]=='i'&&rx_data[r+3]==':')
 8000436:	2a69      	cmp	r2, #105	; 0x69
 8000438:	d049      	beq.n	80004ce <_Z10modem_waitv+0xf6>
			if(rx_data[r]=='p'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 800043a:	2a70      	cmp	r2, #112	; 0x70
 800043c:	d000      	beq.n	8000440 <_Z10modem_waitv+0x68>
 800043e:	e08f      	b.n	8000560 <_Z10modem_waitv+0x188>
 8000440:	1c5e      	adds	r6, r3, #1
 8000442:	5da2      	ldrb	r2, [r4, r6]
 8000444:	2a75      	cmp	r2, #117	; 0x75
 8000446:	d021      	beq.n	800048c <_Z10modem_waitv+0xb4>
				for(int ii=5+r;ii<1590;ii++)
 8000448:	0033      	movs	r3, r6
		for(int r=0;r<1590;r++)
 800044a:	42ab      	cmp	r3, r5
 800044c:	d1f0      	bne.n	8000430 <_Z10modem_waitv+0x58>
			}
		}

		break;
	}
	if(pub_len>1010||pub_len<18)
 800044e:	464b      	mov	r3, r9
 8000450:	22f8      	movs	r2, #248	; 0xf8
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	0092      	lsls	r2, r2, #2
 8000456:	3b12      	subs	r3, #18
 8000458:	4293      	cmp	r3, r2
 800045a:	d902      	bls.n	8000462 <_Z10modem_waitv+0x8a>
	{
		pub_len=0;
 800045c:	2300      	movs	r3, #0
 800045e:	464a      	mov	r2, r9
 8000460:	6013      	str	r3, [r2, #0]
	}
	if(sub_len>100||sub_len<16)
 8000462:	4643      	mov	r3, r8
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3b10      	subs	r3, #16
 8000468:	2b54      	cmp	r3, #84	; 0x54
 800046a:	d902      	bls.n	8000472 <_Z10modem_waitv+0x9a>
	{
		sub_len=0;
 800046c:	2300      	movs	r3, #0
 800046e:	4642      	mov	r2, r8
 8000470:	6013      	str	r3, [r2, #0]
	}
	if(con_len>70||con_len<35)
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	3b23      	subs	r3, #35	; 0x23
 8000476:	2b23      	cmp	r3, #35	; 0x23
 8000478:	d901      	bls.n	800047e <_Z10modem_waitv+0xa6>
	{
		con_len=0;
 800047a:	2300      	movs	r3, #0
 800047c:	603b      	str	r3, [r7, #0]

	//	if(HAL_GetTick()%10000==0)
	//	{
	//		mqtt_message=Mqtt_Recive();
	//	}
}
 800047e:	b003      	add	sp, #12
 8000480:	bcf0      	pop	{r4, r5, r6, r7}
 8000482:	46bb      	mov	fp, r7
 8000484:	46b2      	mov	sl, r6
 8000486:	46a9      	mov	r9, r5
 8000488:	46a0      	mov	r8, r4
 800048a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(rx_data[r]=='p'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 800048c:	18e2      	adds	r2, r4, r3
 800048e:	7891      	ldrb	r1, [r2, #2]
 8000490:	2962      	cmp	r1, #98	; 0x62
 8000492:	d1d9      	bne.n	8000448 <_Z10modem_waitv+0x70>
 8000494:	78d2      	ldrb	r2, [r2, #3]
 8000496:	2a3a      	cmp	r2, #58	; 0x3a
 8000498:	d1d6      	bne.n	8000448 <_Z10modem_waitv+0x70>
				for(int ii=5+r;ii<1590;ii++)
 800049a:	493e      	ldr	r1, [pc, #248]	; (8000594 <_Z10modem_waitv+0x1bc>)
 800049c:	1d5a      	adds	r2, r3, #5
 800049e:	428a      	cmp	r2, r1
 80004a0:	dcd2      	bgt.n	8000448 <_Z10modem_waitv+0x70>
						recive_packet_send[ii-r-5]=rx_data[ii];
 80004a2:	4651      	mov	r1, sl
 80004a4:	1ac8      	subs	r0, r1, r3
 80004a6:	3805      	subs	r0, #5
 80004a8:	e003      	b.n	80004b2 <_Z10modem_waitv+0xda>
 80004aa:	5481      	strb	r1, [r0, r2]
				for(int ii=5+r;ii<1590;ii++)
 80004ac:	3201      	adds	r2, #1
 80004ae:	42aa      	cmp	r2, r5
 80004b0:	d0ca      	beq.n	8000448 <_Z10modem_waitv+0x70>
					if(rx_data[ii]=='\n')
 80004b2:	5ca1      	ldrb	r1, [r4, r2]
 80004b4:	290a      	cmp	r1, #10
 80004b6:	d1f8      	bne.n	80004aa <_Z10modem_waitv+0xd2>
						pub_len=ii-r-4;
 80004b8:	1ad2      	subs	r2, r2, r3
 80004ba:	464b      	mov	r3, r9
 80004bc:	3a04      	subs	r2, #4
 80004be:	601a      	str	r2, [r3, #0]
						memset(rx_data, 9, 1590);
 80004c0:	0020      	movs	r0, r4
 80004c2:	4a30      	ldr	r2, [pc, #192]	; (8000584 <_Z10modem_waitv+0x1ac>)
 80004c4:	3901      	subs	r1, #1
 80004c6:	f002 fd95 	bl	8002ff4 <memset>
						break;
 80004ca:	0033      	movs	r3, r6
 80004cc:	e7bd      	b.n	800044a <_Z10modem_waitv+0x72>
			if(rx_data[r]=='i'&&rx_data[r+1]=='n'&&rx_data[r+2]=='i'&&rx_data[r+3]==':')
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	5ca1      	ldrb	r1, [r4, r2]
 80004d2:	296e      	cmp	r1, #110	; 0x6e
 80004d4:	d001      	beq.n	80004da <_Z10modem_waitv+0x102>
				for(int ii=5+r;ii<1590;ii++)
 80004d6:	0013      	movs	r3, r2
 80004d8:	e7b7      	b.n	800044a <_Z10modem_waitv+0x72>
			if(rx_data[r]=='i'&&rx_data[r+1]=='n'&&rx_data[r+2]=='i'&&rx_data[r+3]==':')
 80004da:	18e1      	adds	r1, r4, r3
 80004dc:	7888      	ldrb	r0, [r1, #2]
 80004de:	2869      	cmp	r0, #105	; 0x69
 80004e0:	d1f9      	bne.n	80004d6 <_Z10modem_waitv+0xfe>
 80004e2:	78c9      	ldrb	r1, [r1, #3]
 80004e4:	293a      	cmp	r1, #58	; 0x3a
 80004e6:	d1f6      	bne.n	80004d6 <_Z10modem_waitv+0xfe>
				for(int ii=5+r;ii<1590;ii++)
 80004e8:	482a      	ldr	r0, [pc, #168]	; (8000594 <_Z10modem_waitv+0x1bc>)
 80004ea:	1d59      	adds	r1, r3, #5
 80004ec:	4281      	cmp	r1, r0
 80004ee:	dcf2      	bgt.n	80004d6 <_Z10modem_waitv+0xfe>
						recive_packet_init[ii-r-5]=rx_data[ii];
 80004f0:	4658      	mov	r0, fp
 80004f2:	1ac6      	subs	r6, r0, r3
 80004f4:	3e05      	subs	r6, #5
 80004f6:	e003      	b.n	8000500 <_Z10modem_waitv+0x128>
 80004f8:	5470      	strb	r0, [r6, r1]
				for(int ii=5+r;ii<1590;ii++)
 80004fa:	3101      	adds	r1, #1
 80004fc:	42a9      	cmp	r1, r5
 80004fe:	d0ea      	beq.n	80004d6 <_Z10modem_waitv+0xfe>
					if(rx_data[ii]=='\n')
 8000500:	5c60      	ldrb	r0, [r4, r1]
 8000502:	280a      	cmp	r0, #10
 8000504:	d1f8      	bne.n	80004f8 <_Z10modem_waitv+0x120>
						con_len=ii-r-5;
 8000506:	1ac9      	subs	r1, r1, r3
 8000508:	3905      	subs	r1, #5
						break;
 800050a:	0013      	movs	r3, r2
						con_len=ii-r-5;
 800050c:	6039      	str	r1, [r7, #0]
						break;
 800050e:	e79c      	b.n	800044a <_Z10modem_waitv+0x72>
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 8000510:	1c5a      	adds	r2, r3, #1
 8000512:	5ca1      	ldrb	r1, [r4, r2]
 8000514:	2975      	cmp	r1, #117	; 0x75
 8000516:	d1de      	bne.n	80004d6 <_Z10modem_waitv+0xfe>
 8000518:	18e1      	adds	r1, r4, r3
 800051a:	7888      	ldrb	r0, [r1, #2]
 800051c:	2862      	cmp	r0, #98	; 0x62
 800051e:	d1da      	bne.n	80004d6 <_Z10modem_waitv+0xfe>
 8000520:	78c9      	ldrb	r1, [r1, #3]
 8000522:	293a      	cmp	r1, #58	; 0x3a
 8000524:	d1d7      	bne.n	80004d6 <_Z10modem_waitv+0xfe>
				for(int ii=5+r;ii<1590;ii++)
 8000526:	481b      	ldr	r0, [pc, #108]	; (8000594 <_Z10modem_waitv+0x1bc>)
 8000528:	1d59      	adds	r1, r3, #5
 800052a:	4281      	cmp	r1, r0
 800052c:	dcd3      	bgt.n	80004d6 <_Z10modem_waitv+0xfe>
						recive_packet_sub[ii-5-r]=rx_data[ii];
 800052e:	9801      	ldr	r0, [sp, #4]
 8000530:	1ac6      	subs	r6, r0, r3
 8000532:	3e05      	subs	r6, #5
 8000534:	e003      	b.n	800053e <_Z10modem_waitv+0x166>
 8000536:	5470      	strb	r0, [r6, r1]
				for(int ii=5+r;ii<1590;ii++)
 8000538:	3101      	adds	r1, #1
 800053a:	42a9      	cmp	r1, r5
 800053c:	d0cb      	beq.n	80004d6 <_Z10modem_waitv+0xfe>
					if(rx_data[ii]=='\n')
 800053e:	5c60      	ldrb	r0, [r4, r1]
 8000540:	280a      	cmp	r0, #10
 8000542:	d1f8      	bne.n	8000536 <_Z10modem_waitv+0x15e>
						sub_len=ii-5-r;
 8000544:	3905      	subs	r1, #5
 8000546:	1ac9      	subs	r1, r1, r3
 8000548:	4643      	mov	r3, r8
 800054a:	6019      	str	r1, [r3, #0]
				for(int ii=5+r;ii<1590;ii++)
 800054c:	0013      	movs	r3, r2
 800054e:	e77c      	b.n	800044a <_Z10modem_waitv+0x72>
				HAL_UART_Transmit(&huart2, (uint8_t*)"OK\n\r", 4,40);
 8000550:	4d06      	ldr	r5, [pc, #24]	; (800056c <_Z10modem_waitv+0x194>)
 8000552:	2328      	movs	r3, #40	; 0x28
 8000554:	2204      	movs	r2, #4
 8000556:	0028      	movs	r0, r5
 8000558:	490f      	ldr	r1, [pc, #60]	; (8000598 <_Z10modem_waitv+0x1c0>)
 800055a:	f002 fbab 	bl	8002cb4 <HAL_UART_Transmit>
			for(int jk=0;jk<1;jk++)
 800055e:	e750      	b.n	8000402 <_Z10modem_waitv+0x2a>
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 8000560:	3301      	adds	r3, #1
 8000562:	e772      	b.n	800044a <_Z10modem_waitv+0x72>
 8000564:	200002b4 	.word	0x200002b4
 8000568:	200002b8 	.word	0x200002b8
 800056c:	20000234 	.word	0x20000234
 8000570:	08003800 	.word	0x08003800
 8000574:	200008b8 	.word	0x200008b8
 8000578:	20000efc 	.word	0x20000efc
 800057c:	2000007c 	.word	0x2000007c
 8000580:	200002c0 	.word	0x200002c0
 8000584:	00000636 	.word	0x00000636
 8000588:	200002c4 	.word	0x200002c4
 800058c:	200003c4 	.word	0x200003c4
 8000590:	200007b8 	.word	0x200007b8
 8000594:	00000635 	.word	0x00000635
 8000598:	080037f8 	.word	0x080037f8

0800059c <log_uart>:
 800059c:	4770      	bx	lr
 800059e:	46c0      	nop			; (mov r8, r8)

080005a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b510      	push	{r4, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a4:	222c      	movs	r2, #44	; 0x2c
 80005a6:	2100      	movs	r1, #0
 80005a8:	a809      	add	r0, sp, #36	; 0x24
 80005aa:	f002 fd23 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	2210      	movs	r2, #16
 80005b0:	2100      	movs	r1, #0
 80005b2:	a804      	add	r0, sp, #16
 80005b4:	f002 fd1e 	bl	8002ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	2210      	movs	r2, #16
 80005ba:	2100      	movs	r1, #0
 80005bc:	4668      	mov	r0, sp
 80005be:	f002 fd19 	bl	8002ff4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005c2:	230a      	movs	r3, #10
 80005c4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	3b09      	subs	r3, #9
 80005c8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ca:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005cc:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005d2:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005da:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f001 fb06 	bl	8001bec <HAL_RCC_OscConfig>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d001      	beq.n	80005e8 <_Z18SystemClock_Configv+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005e6:	e7fe      	b.n	80005e6 <_Z18SystemClock_Configv+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	2101      	movs	r1, #1
 80005f0:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f6:	f001 fd53 	bl	80020a0 <HAL_RCC_ClockConfig>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d001      	beq.n	8000602 <_Z18SystemClock_Configv+0x62>
 80005fe:	b672      	cpsid	i
	while (1)
 8000600:	e7fe      	b.n	8000600 <_Z18SystemClock_Configv+0x60>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <_Z18SystemClock_Configv+0x80>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000606:	9002      	str	r0, [sp, #8]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000608:	009b      	lsls	r3, r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	f001 fe4c 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 8000614:	2800      	cmp	r0, #0
 8000616:	d001      	beq.n	800061c <_Z18SystemClock_Configv+0x7c>
 8000618:	b672      	cpsid	i
	while (1)
 800061a:	e7fe      	b.n	800061a <_Z18SystemClock_Configv+0x7a>
}
 800061c:	b014      	add	sp, #80	; 0x50
 800061e:	bd10      	pop	{r4, pc}
 8000620:	00010001 	.word	0x00010001

08000624 <main>:
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	46de      	mov	lr, fp
 8000628:	4657      	mov	r7, sl
 800062a:	464e      	mov	r6, r9
 800062c:	4645      	mov	r5, r8
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000632:	f001 f84f 	bl	80016d4 <HAL_Init>
  SystemClock_Config();
 8000636:	f7ff ffb3 	bl	80005a0 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	2214      	movs	r2, #20
 800063c:	2100      	movs	r1, #0
 800063e:	a806      	add	r0, sp, #24
 8000640:	f002 fcd8 	bl	8002ff4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	4c74      	ldr	r4, [pc, #464]	; (8000818 <main+0x1f4>)
 8000648:	0312      	lsls	r2, r2, #12
 800064a:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800064c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4313      	orrs	r3, r2
 8000650:	6163      	str	r3, [r4, #20]
 8000652:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000654:	4871      	ldr	r0, [pc, #452]	; (800081c <main+0x1f8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000658:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	6963      	ldr	r3, [r4, #20]
 8000660:	03d2      	lsls	r2, r2, #15
 8000662:	4313      	orrs	r3, r2
 8000664:	6163      	str	r3, [r4, #20]
 8000666:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000668:	01c9      	lsls	r1, r1, #7
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066e:	9303      	str	r3, [sp, #12]
 8000670:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	6963      	ldr	r3, [r4, #20]
 8000674:	0292      	lsls	r2, r2, #10
 8000676:	4313      	orrs	r3, r2
 8000678:	6163      	str	r3, [r4, #20]
 800067a:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800067c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	9304      	str	r3, [sp, #16]
 8000684:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	6963      	ldr	r3, [r4, #20]
 8000688:	02d2      	lsls	r2, r2, #11
 800068a:	4313      	orrs	r3, r2
 800068c:	6163      	str	r3, [r4, #20]
 800068e:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000690:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4013      	ands	r3, r2
 8000694:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800069a:	f001 fa99 	bl	8001bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2107      	movs	r1, #7
 80006a2:	485f      	ldr	r0, [pc, #380]	; (8000820 <main+0x1fc>)
 80006a4:	f001 fa94 	bl	8001bd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	2301      	movs	r3, #1
 80006ac:	01d2      	lsls	r2, r2, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	485b      	ldr	r0, [pc, #364]	; (800081c <main+0x1f8>)
 80006b0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006b2:	9206      	str	r2, [sp, #24]
 80006b4:	9307      	str	r3, [sp, #28]
 80006b6:	9608      	str	r6, [sp, #32]
 80006b8:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f001 f98b 	bl	80019d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80006be:	2227      	movs	r2, #39	; 0x27
 80006c0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	4857      	ldr	r0, [pc, #348]	; (8000820 <main+0x1fc>)
 80006c4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80006c6:	9206      	str	r2, [sp, #24]
 80006c8:	9307      	str	r3, [sp, #28]
 80006ca:	9608      	str	r6, [sp, #32]
 80006cc:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f001 f981 	bl	80019d4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	2301      	movs	r3, #1
 80006d4:	6962      	ldr	r2, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006d6:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d8:	431a      	orrs	r2, r3
 80006da:	6162      	str	r2, [r4, #20]
 80006dc:	6962      	ldr	r2, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006de:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e0:	4013      	ands	r3, r2
 80006e2:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006e8:	f001 f828 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006ec:	200a      	movs	r0, #10
 80006ee:	f001 f857 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	200b      	movs	r0, #11
 80006f8:	f001 f820 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80006fc:	200b      	movs	r0, #11
 80006fe:	f001 f84f 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000702:	4848      	ldr	r0, [pc, #288]	; (8000824 <main+0x200>)
 8000704:	4b48      	ldr	r3, [pc, #288]	; (8000828 <main+0x204>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000706:	22c0      	movs	r2, #192	; 0xc0
  huart1.Instance = USART1;
 8000708:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	23e1      	movs	r3, #225	; 0xe1
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	240c      	movs	r4, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000714:	0092      	lsls	r2, r2, #2
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000724:	6182      	str	r2, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	f002 f985 	bl	8002a34 <HAL_UART_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <main+0x10e>
 800072e:	b672      	cpsid	i
	while (1)
 8000730:	e7fe      	b.n	8000730 <main+0x10c>
  huart2.Instance = USART2;
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <main+0x208>)
 8000734:	4a3e      	ldr	r2, [pc, #248]	; (8000830 <main+0x20c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 8000738:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 460800;
 800073a:	22e1      	movs	r2, #225	; 0xe1
 800073c:	02d2      	lsls	r2, r2, #11
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000740:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.BaudRate = 460800;
 800074a:	6042      	str	r2, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	f002 f971 	bl	8002a34 <HAL_UART_Init>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <main+0x136>
 8000756:	b672      	cpsid	i
	while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x134>
  hrtc.Instance = RTC;
 800075a:	4836      	ldr	r0, [pc, #216]	; (8000834 <main+0x210>)
 800075c:	4a36      	ldr	r2, [pc, #216]	; (8000838 <main+0x214>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	6043      	str	r3, [r0, #4]
  hrtc.Instance = RTC;
 8000760:	6002      	str	r2, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000762:	227f      	movs	r2, #127	; 0x7f
 8000764:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000766:	3280      	adds	r2, #128	; 0x80
 8000768:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800076e:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000770:	f001 fe3a 	bl	80023e8 <HAL_RTC_Init>
 8000774:	1e05      	subs	r5, r0, #0
 8000776:	d13b      	bne.n	80007f0 <main+0x1cc>
	HAL_Delay(7000);
 8000778:	4830      	ldr	r0, [pc, #192]	; (800083c <main+0x218>)
 800077a:	f000 ffcd 	bl	8001718 <HAL_Delay>
	uint32_t subDelay=0;
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <main+0x21c>)
 8000780:	4c30      	ldr	r4, [pc, #192]	; (8000844 <main+0x220>)
 8000782:	4699      	mov	r9, r3
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <main+0x224>)
 8000786:	4f31      	ldr	r7, [pc, #196]	; (800084c <main+0x228>)
 8000788:	469b      	mov	fp, r3
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <main+0x22c>)
 800078c:	4698      	mov	r8, r3
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <main+0x230>)
 8000790:	9301      	str	r3, [sp, #4]
		if(!modem_flag&&HAL_GetTick()-last>=5000)
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <main+0x234>)
 8000794:	469a      	mov	sl, r3
 8000796:	e01d      	b.n	80007d4 <main+0x1b0>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000798:	2102      	movs	r1, #2
 800079a:	4821      	ldr	r0, [pc, #132]	; (8000820 <main+0x1fc>)
 800079c:	f001 fa1e 	bl	8001bdc <HAL_GPIO_TogglePin>
		if(modem_flag)
 80007a0:	7823      	ldrb	r3, [r4, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d014      	beq.n	80007d0 <main+0x1ac>
			if(init_flag==0)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10d      	bne.n	80007c8 <main+0x1a4>
				if(con_len>0&&pub_len>0)
 80007ac:	464b      	mov	r3, r9
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dd05      	ble.n	80007c0 <main+0x19c>
 80007b4:	465b      	mov	r3, fp
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dd01      	ble.n	80007c0 <main+0x19c>
					Mqtt_Init();
 80007bc:	f000 f850 	bl	8000860 <_Z9Mqtt_Initv>
				if(pub)
 80007c0:	4643      	mov	r3, r8
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d115      	bne.n	80007f4 <main+0x1d0>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80007c8:	2104      	movs	r1, #4
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <main+0x1fc>)
 80007cc:	f001 fa06 	bl	8001bdc <HAL_GPIO_TogglePin>
		modem_wait();
 80007d0:	f7ff fe02 	bl	80003d8 <_Z10modem_waitv>
		if(!modem_flag&&HAL_GetTick()-last>=5000)
 80007d4:	7823      	ldrb	r3, [r4, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1de      	bne.n	8000798 <main+0x174>
 80007da:	f000 ff97 	bl	800170c <HAL_GetTick>
 80007de:	1b40      	subs	r0, r0, r5
 80007e0:	4550      	cmp	r0, sl
 80007e2:	d9d9      	bls.n	8000798 <main+0x174>
			modem_work();
 80007e4:	f7ff fd2a 	bl	800023c <_Z10modem_workv>
			last=HAL_GetTick();
 80007e8:	f000 ff90 	bl	800170c <HAL_GetTick>
 80007ec:	0005      	movs	r5, r0
 80007ee:	e7d3      	b.n	8000798 <main+0x174>
 80007f0:	b672      	cpsid	i
	while (1)
 80007f2:	e7fe      	b.n	80007f2 <main+0x1ce>
					if(!start)
 80007f4:	9a01      	ldr	r2, [sp, #4]
 80007f6:	7813      	ldrb	r3, [r2, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <main+0x1de>
						start=true;
 80007fc:	0013      	movs	r3, r2
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
	uint32_t last=0;
 8000802:	2603      	movs	r6, #3
						Mqtt_Recive();
 8000804:	f000 fc46 	bl	8001094 <_Z11Mqtt_Recivev>
						if(!pub)
 8000808:	4643      	mov	r3, r8
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0db      	beq.n	80007c8 <main+0x1a4>
					for(int i=0;i<3;i++)
 8000810:	3e01      	subs	r6, #1
 8000812:	2e00      	cmp	r6, #0
 8000814:	d1f6      	bne.n	8000804 <main+0x1e0>
 8000816:	e7d7      	b.n	80007c8 <main+0x1a4>
 8000818:	40021000 	.word	0x40021000
 800081c:	48000800 	.word	0x48000800
 8000820:	48000400 	.word	0x48000400
 8000824:	200001b4 	.word	0x200001b4
 8000828:	40013800 	.word	0x40013800
 800082c:	20000234 	.word	0x20000234
 8000830:	40004400 	.word	0x40004400
 8000834:	20000194 	.word	0x20000194
 8000838:	40002800 	.word	0x40002800
 800083c:	00001b58 	.word	0x00001b58
 8000840:	2000007c 	.word	0x2000007c
 8000844:	200002bc 	.word	0x200002bc
 8000848:	200002c0 	.word	0x200002c0
 800084c:	200002b8 	.word	0x200002b8
 8000850:	200014e0 	.word	0x200014e0
 8000854:	20000ef8 	.word	0x20000ef8
 8000858:	00001387 	.word	0x00001387

0800085c <Error_Handler>:
 800085c:	b672      	cpsid	i
	while (1)
 800085e:	e7fe      	b.n	800085e <Error_Handler+0x2>

08000860 <_Z9Mqtt_Initv>:
bool pub=false;
/*Инициализация модема и mqtt необходимо передать apn, адрес сервера и имя пользователя
 * если модем уже запущен, а контролер перезагрузился то это тоже работает*/
char buffer3[1500];
int Mqtt_Init()
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	46de      	mov	lr, fp
 8000864:	4657      	mov	r7, sl
 8000866:	464e      	mov	r6, r9
 8000868:	4645      	mov	r5, r8
 800086a:	b5e0      	push	{r5, r6, r7, lr}
	//		return 0;
	//	}
	//	sendMQTTConnect(user,pass);
	//	publishMessage(topic,mess);

	if(err_flag==1)
 800086c:	4be3      	ldr	r3, [pc, #908]	; (8000bfc <_Z9Mqtt_Initv+0x39c>)
{
 800086e:	b085      	sub	sp, #20
	if(err_flag==1)
 8000870:	469b      	mov	fp, r3
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d136      	bne.n	80008e6 <_Z9Mqtt_Initv+0x86>
 8000878:	4fe1      	ldr	r7, [pc, #900]	; (8000c00 <_Z9Mqtt_Initv+0x3a0>)
 800087a:	4ce2      	ldr	r4, [pc, #904]	; (8000c04 <_Z9Mqtt_Initv+0x3a4>)
 800087c:	4be2      	ldr	r3, [pc, #904]	; (8000c08 <_Z9Mqtt_Initv+0x3a8>)
 800087e:	46a0      	mov	r8, r4
 8000880:	2605      	movs	r6, #5
 8000882:	003c      	movs	r4, r7
 8000884:	001f      	movs	r7, r3
 8000886:	4de1      	ldr	r5, [pc, #900]	; (8000c0c <_Z9Mqtt_Initv+0x3ac>)
	{
		bool net_flag=false;

		for(int i=0;i<5;i++)
		{
			memset(buffer3, 9, sizeof(buffer3));
 8000888:	2109      	movs	r1, #9
 800088a:	4ae1      	ldr	r2, [pc, #900]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 800088c:	0028      	movs	r0, r5
 800088e:	f002 fbb1 	bl	8002ff4 <memset>
			//HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"\r\n",41,100);
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGDCONT=1,\"IP\",\"internet\"\r\n",41,100);
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	2229      	movs	r2, #41	; 0x29
 8000896:	0021      	movs	r1, r4
 8000898:	0038      	movs	r0, r7
 800089a:	f002 fa0b 	bl	8002cb4 <HAL_UART_Transmit>
			//log_uart("AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"");
			//timer=HAL_GetTick();
			//log_buffer.append("LOG: STM32F0: ").append("AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"\r\n");
			//			HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
			HAL_Delay(1500);
 800089e:	48dc      	ldr	r0, [pc, #880]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 80008a0:	f000 ff3a 	bl	8001718 <HAL_Delay>
			//			log_buffer.clear();
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3,150);
 80008a4:	0029      	movs	r1, r5
 80008a6:	2296      	movs	r2, #150	; 0x96
 80008a8:	0038      	movs	r0, r7
 80008aa:	f001 fe5d 	bl	8002568 <HAL_UART_Receive_DMA>
			//			timer=HAL_GetTick();
			//			log_buffer.append("LOG: MODEM: ").append(buffer).append("\r\n");
			//			HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
			//HAL_Delay(1000);
			//			log_buffer.clear();
			log_uart(buffer3);
 80008ae:	0028      	movs	r0, r5
 80008b0:	f7ff fe74 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 80008b4:	4641      	mov	r1, r8
 80008b6:	0028      	movs	r0, r5
 80008b8:	f002 fba4 	bl	8003004 <strstr>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d000      	beq.n	80008c2 <_Z9Mqtt_Initv+0x62>
 80008c0:	e1e2      	b.n	8000c88 <_Z9Mqtt_Initv+0x428>
				break;
			}
			else
			{
				net_flag=false;
				HAL_Delay(2000);
 80008c2:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 80008c4:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 80008c6:	00c0      	lsls	r0, r0, #3
 80008c8:	f000 ff26 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d1db      	bne.n	8000888 <_Z9Mqtt_Initv+0x28>
				HAL_Delay(2000);
			}
		}
		if(!net_flag)
		{
			modem_flag=false;
 80008d0:	2200      	movs	r2, #0
 80008d2:	4bd0      	ldr	r3, [pc, #832]	; (8000c14 <_Z9Mqtt_Initv+0x3b4>)
 80008d4:	701a      	strb	r2, [r3, #0]


	return 0;


}
 80008d6:	2000      	movs	r0, #0
 80008d8:	b005      	add	sp, #20
 80008da:	bcf0      	pop	{r4, r5, r6, r7}
 80008dc:	46bb      	mov	fp, r7
 80008de:	46b2      	mov	sl, r6
 80008e0:	46a9      	mov	r9, r5
 80008e2:	46a0      	mov	r8, r4
 80008e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e6:	4bc8      	ldr	r3, [pc, #800]	; (8000c08 <_Z9Mqtt_Initv+0x3a8>)
 80008e8:	4dc8      	ldr	r5, [pc, #800]	; (8000c0c <_Z9Mqtt_Initv+0x3ac>)
 80008ea:	469a      	mov	sl, r3
 80008ec:	4bca      	ldr	r3, [pc, #808]	; (8000c18 <_Z9Mqtt_Initv+0x3b8>)
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	4bca      	ldr	r3, [pc, #808]	; (8000c1c <_Z9Mqtt_Initv+0x3bc>)
 80008f2:	9302      	str	r3, [sp, #8]
	memset(buffer3, 9, sizeof(buffer3));
 80008f4:	2109      	movs	r1, #9
 80008f6:	4ac6      	ldr	r2, [pc, #792]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 80008f8:	0028      	movs	r0, r5
 80008fa:	f002 fb7b 	bl	8002ff4 <memset>
	sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",pub_len);
 80008fe:	4fc8      	ldr	r7, [pc, #800]	; (8000c20 <_Z9Mqtt_Initv+0x3c0>)
 8000900:	9901      	ldr	r1, [sp, #4]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	0028      	movs	r0, r5
 8000906:	f002 fb55 	bl	8002fb4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2216      	movs	r2, #22
 800090e:	0029      	movs	r1, r5
 8000910:	4650      	mov	r0, sl
 8000912:	f002 f9cf 	bl	8002cb4 <HAL_UART_Transmit>
	log_uart(buffer3);
 8000916:	0028      	movs	r0, r5
 8000918:	f7ff fe40 	bl	800059c <log_uart>
	HAL_Delay(200);
 800091c:	20c8      	movs	r0, #200	; 0xc8
 800091e:	f000 fefb 	bl	8001718 <HAL_Delay>
	HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_send , pub_len,pub_len*2);
 8000922:	4cc0      	ldr	r4, [pc, #768]	; (8000c24 <_Z9Mqtt_Initv+0x3c4>)
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	0021      	movs	r1, r4
 8000928:	0053      	lsls	r3, r2, #1
 800092a:	4650      	mov	r0, sl
 800092c:	b292      	uxth	r2, r2
 800092e:	f002 f9c1 	bl	8002cb4 <HAL_UART_Transmit>
	log_uart(recive_packet_send);
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff fe32 	bl	800059c <log_uart>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	2202      	movs	r2, #2
 800093c:	9902      	ldr	r1, [sp, #8]
 800093e:	4650      	mov	r0, sl
 8000940:	f002 f9b8 	bl	8002cb4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000944:	20fa      	movs	r0, #250	; 0xfa
 8000946:	0040      	lsls	r0, r0, #1
 8000948:	f000 fee6 	bl	8001718 <HAL_Delay>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 1500);
 800094c:	0029      	movs	r1, r5
 800094e:	4ab0      	ldr	r2, [pc, #704]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 8000950:	4650      	mov	r0, sl
 8000952:	f001 fe09 	bl	8002568 <HAL_UART_Receive_DMA>
	log_uart(buffer3);
 8000956:	0028      	movs	r0, r5
 8000958:	f7ff fe20 	bl	800059c <log_uart>
	memset(recive_packet_send, 0,1010);
 800095c:	0020      	movs	r0, r4
 800095e:	2100      	movs	r1, #0
 8000960:	4ab1      	ldr	r2, [pc, #708]	; (8000c28 <_Z9Mqtt_Initv+0x3c8>)
 8000962:	f002 fb47 	bl	8002ff4 <memset>
	for(int i=0;i<1450;i++)
 8000966:	4bb1      	ldr	r3, [pc, #708]	; (8000c2c <_Z9Mqtt_Initv+0x3cc>)
 8000968:	2400      	movs	r4, #0
 800096a:	4698      	mov	r8, r3
			sub=false;
 800096c:	46b9      	mov	r9, r7
 800096e:	4eb0      	ldr	r6, [pc, #704]	; (8000c30 <_Z9Mqtt_Initv+0x3d0>)
		if(buffer3[i]=='I'&&buffer3[i+1]=='P'&&buffer3[i+2]=='C'&&buffer3[i+3]=='L'&&buffer3[i+4]=='O'&&buffer3[i+5]=='S'&&buffer3[i+6]=='E')
 8000970:	5d2b      	ldrb	r3, [r5, r4]
 8000972:	2b49      	cmp	r3, #73	; 0x49
 8000974:	d100      	bne.n	8000978 <_Z9Mqtt_Initv+0x118>
 8000976:	e0b9      	b.n	8000aec <_Z9Mqtt_Initv+0x28c>
		else if(buffer3[i]=='E'&&buffer3[i+1]=='R'&&buffer3[i+2]=='R'&&buffer3[i+3]=='O'&&buffer3[i+4]=='R')
 8000978:	2b45      	cmp	r3, #69	; 0x45
 800097a:	d000      	beq.n	800097e <_Z9Mqtt_Initv+0x11e>
 800097c:	e16e      	b.n	8000c5c <_Z9Mqtt_Initv+0x3fc>
 800097e:	1c63      	adds	r3, r4, #1
 8000980:	5cea      	ldrb	r2, [r5, r3]
 8000982:	2a52      	cmp	r2, #82	; 0x52
 8000984:	d040      	beq.n	8000a08 <_Z9Mqtt_Initv+0x1a8>
 8000986:	001c      	movs	r4, r3
			sub=false;
 8000988:	2300      	movs	r3, #0
			pub_len=0;
 800098a:	464a      	mov	r2, r9
 800098c:	6013      	str	r3, [r2, #0]
			pub=false;
 800098e:	4642      	mov	r2, r8
			sub=false;
 8000990:	0037      	movs	r7, r6
 8000992:	7033      	strb	r3, [r6, #0]
			pub=false;
 8000994:	7013      	strb	r3, [r2, #0]
	for(int i=0;i<1450;i++)
 8000996:	4ba7      	ldr	r3, [pc, #668]	; (8000c34 <_Z9Mqtt_Initv+0x3d4>)
 8000998:	429c      	cmp	r4, r3
 800099a:	d1e9      	bne.n	8000970 <_Z9Mqtt_Initv+0x110>
	if(!pub)
 800099c:	4643      	mov	r3, r8
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	46b9      	mov	r9, r7
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d197      	bne.n	80008d6 <_Z9Mqtt_Initv+0x76>
		pub_err_count+=1;
 80009a6:	4aa4      	ldr	r2, [pc, #656]	; (8000c38 <_Z9Mqtt_Initv+0x3d8>)
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	6013      	str	r3, [r2, #0]
		if(pub_err_count>7)
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	dd91      	ble.n	80008d6 <_Z9Mqtt_Initv+0x76>
 80009b2:	4b98      	ldr	r3, [pc, #608]	; (8000c14 <_Z9Mqtt_Initv+0x3b4>)
 80009b4:	4fa1      	ldr	r7, [pc, #644]	; (8000c3c <_Z9Mqtt_Initv+0x3dc>)
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	4ba1      	ldr	r3, [pc, #644]	; (8000c40 <_Z9Mqtt_Initv+0x3e0>)
 80009ba:	2605      	movs	r6, #5
 80009bc:	4698      	mov	r8, r3
				sub=false;
 80009be:	003b      	movs	r3, r7
 80009c0:	2400      	movs	r4, #0
 80009c2:	4657      	mov	r7, sl
 80009c4:	46da      	mov	sl, fp
 80009c6:	469b      	mov	fp, r3
 80009c8:	464b      	mov	r3, r9
 80009ca:	701c      	strb	r4, [r3, #0]
				modem_flag=false;
 80009cc:	9b01      	ldr	r3, [sp, #4]
				memset(buffer3, 9, sizeof(buffer3));
 80009ce:	2109      	movs	r1, #9
 80009d0:	4a8f      	ldr	r2, [pc, #572]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 80009d2:	0028      	movs	r0, r5
				modem_flag=false;
 80009d4:	701c      	strb	r4, [r3, #0]
				memset(buffer3, 9, sizeof(buffer3));
 80009d6:	f002 fb0d 	bl	8002ff4 <memset>
				HAL_UART_Transmit(&huart1, (uint8_t*)"AT+NETCLOSE\r\n",15,100);
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	220f      	movs	r2, #15
 80009de:	4641      	mov	r1, r8
 80009e0:	0038      	movs	r0, r7
 80009e2:	f002 f967 	bl	8002cb4 <HAL_UART_Transmit>
				HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 80009e6:	2297      	movs	r2, #151	; 0x97
 80009e8:	0029      	movs	r1, r5
 80009ea:	0038      	movs	r0, r7
 80009ec:	f001 fdbc 	bl	8002568 <HAL_UART_Receive_DMA>
				HAL_Delay(100);
 80009f0:	2064      	movs	r0, #100	; 0x64
 80009f2:	f000 fe91 	bl	8001718 <HAL_Delay>
				init_flag=0;
 80009f6:	465b      	mov	r3, fp
			for(int i=0;i<5;i++)
 80009f8:	3e01      	subs	r6, #1
				init_flag=0;
 80009fa:	601c      	str	r4, [r3, #0]
			for(int i=0;i<5;i++)
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d1e3      	bne.n	80009c8 <_Z9Mqtt_Initv+0x168>
			err_flag=1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	4652      	mov	r2, sl
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e766      	b.n	80008d6 <_Z9Mqtt_Initv+0x76>
		else if(buffer3[i]=='E'&&buffer3[i+1]=='R'&&buffer3[i+2]=='R'&&buffer3[i+3]=='O'&&buffer3[i+4]=='R')
 8000a08:	192a      	adds	r2, r5, r4
 8000a0a:	7891      	ldrb	r1, [r2, #2]
 8000a0c:	001c      	movs	r4, r3
 8000a0e:	2952      	cmp	r1, #82	; 0x52
 8000a10:	d1ba      	bne.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000a12:	78d3      	ldrb	r3, [r2, #3]
 8000a14:	2b4f      	cmp	r3, #79	; 0x4f
 8000a16:	d1b7      	bne.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000a18:	7913      	ldrb	r3, [r2, #4]
 8000a1a:	2b52      	cmp	r3, #82	; 0x52
 8000a1c:	d1b4      	bne.n	8000988 <_Z9Mqtt_Initv+0x128>
			pub_len=0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	464a      	mov	r2, r9
 8000a22:	6013      	str	r3, [r2, #0]
			pub=false;
 8000a24:	4642      	mov	r2, r8
			memset(buffer3, 10, sizeof(buffer3));
 8000a26:	210a      	movs	r1, #10
			pub=false;
 8000a28:	7013      	strb	r3, [r2, #0]
			memset(buffer3, 10, sizeof(buffer3));
 8000a2a:	0028      	movs	r0, r5
 8000a2c:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 8000a2e:	f002 fae1 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	222e      	movs	r2, #46	; 0x2e
 8000a36:	4983      	ldr	r1, [pc, #524]	; (8000c44 <_Z9Mqtt_Initv+0x3e4>)
 8000a38:	4650      	mov	r0, sl
 8000a3a:	f002 f93b 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(3500);
 8000a3e:	4882      	ldr	r0, [pc, #520]	; (8000c48 <_Z9Mqtt_Initv+0x3e8>)
 8000a40:	f000 fe6a 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000a44:	2297      	movs	r2, #151	; 0x97
 8000a46:	0029      	movs	r1, r5
 8000a48:	4650      	mov	r0, sl
 8000a4a:	f001 fd8d 	bl	8002568 <HAL_UART_Receive_DMA>
			HAL_Delay(1000);
 8000a4e:	20fa      	movs	r0, #250	; 0xfa
 8000a50:	0080      	lsls	r0, r0, #2
 8000a52:	f000 fe61 	bl	8001718 <HAL_Delay>
			memset(buffer3, 10, sizeof(buffer3));
 8000a56:	210a      	movs	r1, #10
 8000a58:	4a6d      	ldr	r2, [pc, #436]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 8000a5a:	0028      	movs	r0, r5
 8000a5c:	f002 faca 	bl	8002ff4 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000a60:	4f7a      	ldr	r7, [pc, #488]	; (8000c4c <_Z9Mqtt_Initv+0x3ec>)
 8000a62:	9901      	ldr	r1, [sp, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	0028      	movs	r0, r5
 8000a68:	f002 faa4 	bl	8002fb4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	221e      	movs	r2, #30
 8000a70:	0029      	movs	r1, r5
 8000a72:	4650      	mov	r0, sl
 8000a74:	f002 f91e 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000a78:	2064      	movs	r0, #100	; 0x64
 8000a7a:	f000 fe4d 	bl	8001718 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init , con_len,100);
 8000a7e:	883a      	ldrh	r2, [r7, #0]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	4973      	ldr	r1, [pc, #460]	; (8000c50 <_Z9Mqtt_Initv+0x3f0>)
 8000a84:	4650      	mov	r0, sl
 8000a86:	f002 f915 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000a8a:	2332      	movs	r3, #50	; 0x32
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	9902      	ldr	r1, [sp, #8]
 8000a90:	4650      	mov	r0, sl
 8000a92:	f002 f90f 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(300);
 8000a96:	2096      	movs	r0, #150	; 0x96
 8000a98:	0040      	lsls	r0, r0, #1
 8000a9a:	f000 fe3d 	bl	8001718 <HAL_Delay>
			memset(buffer3, 9, 400);
 8000a9e:	22c8      	movs	r2, #200	; 0xc8
 8000aa0:	2109      	movs	r1, #9
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	0028      	movs	r0, r5
 8000aa6:	f002 faa5 	bl	8002ff4 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 8000aaa:	4f6a      	ldr	r7, [pc, #424]	; (8000c54 <_Z9Mqtt_Initv+0x3f4>)
 8000aac:	9901      	ldr	r1, [sp, #4]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	0028      	movs	r0, r5
 8000ab2:	f002 fa7f 	bl	8002fb4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	2216      	movs	r2, #22
 8000aba:	0029      	movs	r1, r5
 8000abc:	4650      	mov	r0, sl
 8000abe:	f002 f8f9 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(200);
 8000ac2:	20c8      	movs	r0, #200	; 0xc8
 8000ac4:	f000 fe28 	bl	8001718 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4963      	ldr	r1, [pc, #396]	; (8000c58 <_Z9Mqtt_Initv+0x3f8>)
 8000acc:	0053      	lsls	r3, r2, #1
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	f002 f8ee 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	2202      	movs	r2, #2
 8000adc:	4650      	mov	r0, sl
 8000ade:	9902      	ldr	r1, [sp, #8]
 8000ae0:	f002 f8e8 	bl	8002cb4 <HAL_UART_Transmit>
			sub=false;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4f52      	ldr	r7, [pc, #328]	; (8000c30 <_Z9Mqtt_Initv+0x3d0>)
 8000ae8:	703b      	strb	r3, [r7, #0]
 8000aea:	e754      	b.n	8000996 <_Z9Mqtt_Initv+0x136>
		if(buffer3[i]=='I'&&buffer3[i+1]=='P'&&buffer3[i+2]=='C'&&buffer3[i+3]=='L'&&buffer3[i+4]=='O'&&buffer3[i+5]=='S'&&buffer3[i+6]=='E')
 8000aec:	1c63      	adds	r3, r4, #1
 8000aee:	5cea      	ldrb	r2, [r5, r3]
 8000af0:	2a50      	cmp	r2, #80	; 0x50
 8000af2:	d000      	beq.n	8000af6 <_Z9Mqtt_Initv+0x296>
 8000af4:	e747      	b.n	8000986 <_Z9Mqtt_Initv+0x126>
 8000af6:	192a      	adds	r2, r5, r4
 8000af8:	7891      	ldrb	r1, [r2, #2]
 8000afa:	001c      	movs	r4, r3
 8000afc:	2943      	cmp	r1, #67	; 0x43
 8000afe:	d000      	beq.n	8000b02 <_Z9Mqtt_Initv+0x2a2>
 8000b00:	e742      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000b02:	78d3      	ldrb	r3, [r2, #3]
 8000b04:	2b4c      	cmp	r3, #76	; 0x4c
 8000b06:	d000      	beq.n	8000b0a <_Z9Mqtt_Initv+0x2aa>
 8000b08:	e73e      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000b0a:	7913      	ldrb	r3, [r2, #4]
 8000b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8000b0e:	d000      	beq.n	8000b12 <_Z9Mqtt_Initv+0x2b2>
 8000b10:	e73a      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000b12:	7953      	ldrb	r3, [r2, #5]
 8000b14:	2b53      	cmp	r3, #83	; 0x53
 8000b16:	d000      	beq.n	8000b1a <_Z9Mqtt_Initv+0x2ba>
 8000b18:	e736      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000b1a:	7993      	ldrb	r3, [r2, #6]
 8000b1c:	2b45      	cmp	r3, #69	; 0x45
 8000b1e:	d000      	beq.n	8000b22 <_Z9Mqtt_Initv+0x2c2>
 8000b20:	e732      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
			sub=false;
 8000b22:	2300      	movs	r3, #0
			pub_len=0;
 8000b24:	464a      	mov	r2, r9
			sub=false;
 8000b26:	4f42      	ldr	r7, [pc, #264]	; (8000c30 <_Z9Mqtt_Initv+0x3d0>)
			pub_len=0;
 8000b28:	6013      	str	r3, [r2, #0]
			memset(buffer3, 10, sizeof(buffer3));\
 8000b2a:	3939      	subs	r1, #57	; 0x39
 8000b2c:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 8000b2e:	0028      	movs	r0, r5
			sub=false;
 8000b30:	703b      	strb	r3, [r7, #0]
			memset(buffer3, 10, sizeof(buffer3));\
 8000b32:	f002 fa5f 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	222e      	movs	r2, #46	; 0x2e
 8000b3a:	4942      	ldr	r1, [pc, #264]	; (8000c44 <_Z9Mqtt_Initv+0x3e4>)
 8000b3c:	4650      	mov	r0, sl
 8000b3e:	f002 f8b9 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(3500);
 8000b42:	4841      	ldr	r0, [pc, #260]	; (8000c48 <_Z9Mqtt_Initv+0x3e8>)
 8000b44:	f000 fde8 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000b48:	2297      	movs	r2, #151	; 0x97
 8000b4a:	0029      	movs	r1, r5
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	f001 fd0b 	bl	8002568 <HAL_UART_Receive_DMA>
			HAL_Delay(1000);
 8000b52:	20fa      	movs	r0, #250	; 0xfa
 8000b54:	0080      	lsls	r0, r0, #2
 8000b56:	f000 fddf 	bl	8001718 <HAL_Delay>
			memset(buffer3, 10, sizeof(buffer3));
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <_Z9Mqtt_Initv+0x3b0>)
 8000b5e:	0028      	movs	r0, r5
 8000b60:	f002 fa48 	bl	8002ff4 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000b64:	4a39      	ldr	r2, [pc, #228]	; (8000c4c <_Z9Mqtt_Initv+0x3ec>)
 8000b66:	9901      	ldr	r1, [sp, #4]
 8000b68:	9203      	str	r2, [sp, #12]
 8000b6a:	0028      	movs	r0, r5
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f002 fa21 	bl	8002fb4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	221e      	movs	r2, #30
 8000b76:	0029      	movs	r1, r5
 8000b78:	4650      	mov	r0, sl
 8000b7a:	f002 f89b 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f000 fdca 	bl	8001718 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init ,con_len+3,150);
 8000b84:	9a03      	ldr	r2, [sp, #12]
 8000b86:	2396      	movs	r3, #150	; 0x96
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	4931      	ldr	r1, [pc, #196]	; (8000c50 <_Z9Mqtt_Initv+0x3f0>)
 8000b8c:	3203      	adds	r2, #3
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	4650      	mov	r0, sl
 8000b92:	f002 f88f 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000b96:	2332      	movs	r3, #50	; 0x32
 8000b98:	2202      	movs	r2, #2
 8000b9a:	9902      	ldr	r1, [sp, #8]
 8000b9c:	4650      	mov	r0, sl
 8000b9e:	f002 f889 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(300);
 8000ba2:	2096      	movs	r0, #150	; 0x96
 8000ba4:	0040      	lsls	r0, r0, #1
 8000ba6:	f000 fdb7 	bl	8001718 <HAL_Delay>
			memset(buffer3, 9, 400);
 8000baa:	22c8      	movs	r2, #200	; 0xc8
 8000bac:	2109      	movs	r1, #9
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	f002 fa1f 	bl	8002ff4 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <_Z9Mqtt_Initv+0x3f4>)
 8000bb8:	9901      	ldr	r1, [sp, #4]
 8000bba:	9203      	str	r2, [sp, #12]
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	f002 f9f8 	bl	8002fb4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	2216      	movs	r2, #22
 8000bc8:	0029      	movs	r1, r5
 8000bca:	4650      	mov	r0, sl
 8000bcc:	f002 f872 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(200);
 8000bd0:	20c8      	movs	r0, #200	; 0xc8
 8000bd2:	f000 fda1 	bl	8001718 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 8000bd6:	9a03      	ldr	r2, [sp, #12]
 8000bd8:	491f      	ldr	r1, [pc, #124]	; (8000c58 <_Z9Mqtt_Initv+0x3f8>)
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	4650      	mov	r0, sl
 8000bde:	0053      	lsls	r3, r2, #1
 8000be0:	189b      	adds	r3, r3, r2
 8000be2:	b292      	uxth	r2, r2
 8000be4:	f002 f866 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000be8:	2332      	movs	r3, #50	; 0x32
 8000bea:	2202      	movs	r2, #2
 8000bec:	4650      	mov	r0, sl
 8000bee:	9902      	ldr	r1, [sp, #8]
 8000bf0:	f002 f860 	bl	8002cb4 <HAL_UART_Transmit>
			pub=false;
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	7013      	strb	r3, [r2, #0]
 8000bfa:	e6cc      	b.n	8000996 <_Z9Mqtt_Initv+0x136>
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	08003808 	.word	0x08003808
 8000c04:	08003828 	.word	0x08003828
 8000c08:	200001b4 	.word	0x200001b4
 8000c0c:	20000f04 	.word	0x20000f04
 8000c10:	000005dc 	.word	0x000005dc
 8000c14:	200002bc 	.word	0x200002bc
 8000c18:	08003954 	.word	0x08003954
 8000c1c:	08003824 	.word	0x08003824
 8000c20:	200002c0 	.word	0x200002c0
 8000c24:	200003c4 	.word	0x200003c4
 8000c28:	000003f2 	.word	0x000003f2
 8000c2c:	200014e0 	.word	0x200014e0
 8000c30:	200016dc 	.word	0x200016dc
 8000c34:	000005aa 	.word	0x000005aa
 8000c38:	200014e4 	.word	0x200014e4
 8000c3c:	200002b8 	.word	0x200002b8
 8000c40:	08003968 	.word	0x08003968
 8000c44:	080038f0 	.word	0x080038f0
 8000c48:	00000dac 	.word	0x00000dac
 8000c4c:	2000007c 	.word	0x2000007c
 8000c50:	200002c4 	.word	0x200002c4
 8000c54:	20000efc 	.word	0x20000efc
 8000c58:	200007b8 	.word	0x200007b8
		else if(buffer3[i]=='O'&&buffer3[i+1]=='K')
 8000c5c:	3401      	adds	r4, #1
 8000c5e:	2b4f      	cmp	r3, #79	; 0x4f
 8000c60:	d000      	beq.n	8000c64 <_Z9Mqtt_Initv+0x404>
 8000c62:	e691      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
 8000c64:	5d2b      	ldrb	r3, [r5, r4]
 8000c66:	2b4b      	cmp	r3, #75	; 0x4b
 8000c68:	d000      	beq.n	8000c6c <_Z9Mqtt_Initv+0x40c>
 8000c6a:	e68d      	b.n	8000988 <_Z9Mqtt_Initv+0x128>
			pub_len=0;
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	464f      	mov	r7, r9
			memset(buffer3, 9, sizeof(buffer3));
 8000c70:	4ab1      	ldr	r2, [pc, #708]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000c72:	2109      	movs	r1, #9
 8000c74:	0028      	movs	r0, r5
			pub_len=0;
 8000c76:	603c      	str	r4, [r7, #0]
			memset(buffer3, 9, sizeof(buffer3));
 8000c78:	f002 f9bc 	bl	8002ff4 <memset>
			pub=true;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4642      	mov	r2, r8
 8000c80:	7013      	strb	r3, [r2, #0]
			pub_err_count=0;
 8000c82:	4bae      	ldr	r3, [pc, #696]	; (8000f3c <_Z9Mqtt_Initv+0x6dc>)
 8000c84:	601c      	str	r4, [r3, #0]
	if(!pub)
 8000c86:	e626      	b.n	80008d6 <_Z9Mqtt_Initv+0x76>
 8000c88:	46ba      	mov	sl, r7
 8000c8a:	4fad      	ldr	r7, [pc, #692]	; (8000f40 <_Z9Mqtt_Initv+0x6e0>)
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	2605      	movs	r6, #5
 8000c90:	46b8      	mov	r8, r7
 8000c92:	4657      	mov	r7, sl
			memset(buffer3, 10, sizeof(buffer3));
 8000c94:	210a      	movs	r1, #10
 8000c96:	4aa8      	ldr	r2, [pc, #672]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f002 f9ab 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGSOCKCONT=1,\"IP\",\"internet\"\r\n",44,100);
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	222c      	movs	r2, #44	; 0x2c
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	0038      	movs	r0, r7
 8000ca6:	f002 f805 	bl	8002cb4 <HAL_UART_Transmit>
			HAL_Delay(1500);
 8000caa:	48a3      	ldr	r0, [pc, #652]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000cac:	f000 fd34 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000cb0:	0029      	movs	r1, r5
 8000cb2:	2297      	movs	r2, #151	; 0x97
 8000cb4:	0038      	movs	r0, r7
 8000cb6:	f001 fc57 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000cba:	0028      	movs	r0, r5
 8000cbc:	f7ff fc6e 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	f002 f99e 	bl	8003004 <strstr>
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d107      	bne.n	8000cdc <_Z9Mqtt_Initv+0x47c>
				HAL_Delay(2000);
 8000ccc:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000cce:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000cd0:	00c0      	lsls	r0, r0, #3
 8000cd2:	f000 fd21 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d1dc      	bne.n	8000c94 <_Z9Mqtt_Initv+0x434>
 8000cda:	e5f9      	b.n	80008d0 <_Z9Mqtt_Initv+0x70>
 8000cdc:	46ba      	mov	sl, r7
 8000cde:	4b99      	ldr	r3, [pc, #612]	; (8000f44 <_Z9Mqtt_Initv+0x6e4>)
 8000ce0:	4f99      	ldr	r7, [pc, #612]	; (8000f48 <_Z9Mqtt_Initv+0x6e8>)
 8000ce2:	46a1      	mov	r9, r4
 8000ce4:	46b8      	mov	r8, r7
 8000ce6:	2605      	movs	r6, #5
 8000ce8:	001c      	movs	r4, r3
 8000cea:	4657      	mov	r7, sl
			memset(buffer3, 10, sizeof(buffer3));
 8000cec:	210a      	movs	r1, #10
 8000cee:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000cf0:	0028      	movs	r0, r5
 8000cf2:	f002 f97f 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CSOCKSETPN=1\r\n",19,100);
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	2213      	movs	r2, #19
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	0038      	movs	r0, r7
 8000cfe:	f001 ffd9 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+CSOCKSETPN=1");
 8000d02:	4640      	mov	r0, r8
 8000d04:	f7ff fc4a 	bl	800059c <log_uart>
			HAL_Delay(1500);
 8000d08:	488b      	ldr	r0, [pc, #556]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000d0a:	f000 fd05 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000d0e:	0029      	movs	r1, r5
 8000d10:	2297      	movs	r2, #151	; 0x97
 8000d12:	0038      	movs	r0, r7
 8000d14:	f001 fc28 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000d18:	0028      	movs	r0, r5
 8000d1a:	f7ff fc3f 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000d1e:	4649      	mov	r1, r9
 8000d20:	0028      	movs	r0, r5
 8000d22:	f002 f96f 	bl	8003004 <strstr>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d107      	bne.n	8000d3a <_Z9Mqtt_Initv+0x4da>
				HAL_Delay(2000);
 8000d2a:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000d2c:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000d2e:	00c0      	lsls	r0, r0, #3
 8000d30:	f000 fcf2 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d1d9      	bne.n	8000cec <_Z9Mqtt_Initv+0x48c>
 8000d38:	e5ca      	b.n	80008d0 <_Z9Mqtt_Initv+0x70>
 8000d3a:	46ba      	mov	sl, r7
 8000d3c:	4b83      	ldr	r3, [pc, #524]	; (8000f4c <_Z9Mqtt_Initv+0x6ec>)
 8000d3e:	4f84      	ldr	r7, [pc, #528]	; (8000f50 <_Z9Mqtt_Initv+0x6f0>)
 8000d40:	2605      	movs	r6, #5
 8000d42:	46b8      	mov	r8, r7
 8000d44:	001c      	movs	r4, r3
 8000d46:	4657      	mov	r7, sl
			memset(buffer3, 10, sizeof(buffer3));
 8000d48:	210a      	movs	r1, #10
 8000d4a:	4a7b      	ldr	r2, [pc, #492]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000d4c:	0028      	movs	r0, r5
 8000d4e:	f002 f951 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMODE=0\r\n",16,100);
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	2210      	movs	r2, #16
 8000d56:	0021      	movs	r1, r4
 8000d58:	0038      	movs	r0, r7
 8000d5a:	f001 ffab 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+CIPMODE=0");
 8000d5e:	4640      	mov	r0, r8
 8000d60:	f7ff fc1c 	bl	800059c <log_uart>
			HAL_Delay(1500);
 8000d64:	4874      	ldr	r0, [pc, #464]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000d66:	f000 fcd7 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000d6a:	0029      	movs	r1, r5
 8000d6c:	2297      	movs	r2, #151	; 0x97
 8000d6e:	0038      	movs	r0, r7
 8000d70:	f001 fbfa 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000d74:	0028      	movs	r0, r5
 8000d76:	f7ff fc11 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	f002 f941 	bl	8003004 <strstr>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d106      	bne.n	8000d94 <_Z9Mqtt_Initv+0x534>
				HAL_Delay(1000);
 8000d86:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000d88:	3e01      	subs	r6, #1
				HAL_Delay(1000);
 8000d8a:	0080      	lsls	r0, r0, #2
 8000d8c:	f000 fcc4 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d1d9      	bne.n	8000d48 <_Z9Mqtt_Initv+0x4e8>
 8000d94:	46ba      	mov	sl, r7
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <_Z9Mqtt_Initv+0x6f4>)
 8000d98:	4f6f      	ldr	r7, [pc, #444]	; (8000f58 <_Z9Mqtt_Initv+0x6f8>)
 8000d9a:	2605      	movs	r6, #5
 8000d9c:	46b8      	mov	r8, r7
 8000d9e:	001c      	movs	r4, r3
 8000da0:	4657      	mov	r7, sl
			memset(buffer3, 10, sizeof(buffer3));
 8000da2:	210a      	movs	r1, #10
 8000da4:	4a64      	ldr	r2, [pc, #400]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000da6:	0028      	movs	r0, r5
 8000da8:	f002 f924 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPRXGET=1\r\n",17,100);
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2211      	movs	r2, #17
 8000db0:	0021      	movs	r1, r4
 8000db2:	0038      	movs	r0, r7
 8000db4:	f001 ff7e 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+CIPRXGET=1");
 8000db8:	4640      	mov	r0, r8
 8000dba:	f7ff fbef 	bl	800059c <log_uart>
			HAL_Delay(1500);
 8000dbe:	485e      	ldr	r0, [pc, #376]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000dc0:	f000 fcaa 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000dc4:	0029      	movs	r1, r5
 8000dc6:	2297      	movs	r2, #151	; 0x97
 8000dc8:	0038      	movs	r0, r7
 8000dca:	f001 fbcd 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000dce:	0028      	movs	r0, r5
 8000dd0:	f7ff fbe4 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	0028      	movs	r0, r5
 8000dd8:	f002 f914 	bl	8003004 <strstr>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d106      	bne.n	8000dee <_Z9Mqtt_Initv+0x58e>
				HAL_Delay(2000);
 8000de0:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000de2:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000de4:	00c0      	lsls	r0, r0, #3
 8000de6:	f000 fc97 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d1d9      	bne.n	8000da2 <_Z9Mqtt_Initv+0x542>
 8000dee:	464c      	mov	r4, r9
 8000df0:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <_Z9Mqtt_Initv+0x6fc>)
 8000df2:	46ba      	mov	sl, r7
 8000df4:	4698      	mov	r8, r3
			else if(strstr(buffer3,"opened"))
 8000df6:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <_Z9Mqtt_Initv+0x700>)
 8000df8:	4f5a      	ldr	r7, [pc, #360]	; (8000f64 <_Z9Mqtt_Initv+0x704>)
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	0023      	movs	r3, r4
 8000dfe:	2605      	movs	r6, #5
 8000e00:	4644      	mov	r4, r8
 8000e02:	46b8      	mov	r8, r7
 8000e04:	4657      	mov	r7, sl
 8000e06:	469a      	mov	sl, r3
			memset(buffer3, 10, sizeof(buffer3));
 8000e08:	210a      	movs	r1, #10
 8000e0a:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	f002 f8f1 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+NETOPEN\r\n",14,100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	220e      	movs	r2, #14
 8000e16:	0021      	movs	r1, r4
 8000e18:	0038      	movs	r0, r7
 8000e1a:	f001 ff4b 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+NETOPEN");
 8000e1e:	4640      	mov	r0, r8
 8000e20:	f7ff fbbc 	bl	800059c <log_uart>
			HAL_Delay(1500);
 8000e24:	4844      	ldr	r0, [pc, #272]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000e26:	f000 fc77 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000e2a:	0029      	movs	r1, r5
 8000e2c:	2297      	movs	r2, #151	; 0x97
 8000e2e:	0038      	movs	r0, r7
 8000e30:	f001 fb9a 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000e34:	0028      	movs	r0, r5
 8000e36:	f7ff fbb1 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000e3a:	4651      	mov	r1, sl
 8000e3c:	0028      	movs	r0, r5
 8000e3e:	f002 f8e1 	bl	8003004 <strstr>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d10d      	bne.n	8000e62 <_Z9Mqtt_Initv+0x602>
			else if(strstr(buffer3,"opened"))
 8000e46:	4649      	mov	r1, r9
 8000e48:	0028      	movs	r0, r5
 8000e4a:	f002 f8db 	bl	8003004 <strstr>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d107      	bne.n	8000e62 <_Z9Mqtt_Initv+0x602>
				HAL_Delay(2000);
 8000e52:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000e54:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000e56:	00c0      	lsls	r0, r0, #3
 8000e58:	f000 fc5e 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d1d3      	bne.n	8000e08 <_Z9Mqtt_Initv+0x5a8>
 8000e60:	e536      	b.n	80008d0 <_Z9Mqtt_Initv+0x70>
 8000e62:	4654      	mov	r4, sl
 8000e64:	46ba      	mov	sl, r7
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <_Z9Mqtt_Initv+0x708>)
 8000e68:	4f40      	ldr	r7, [pc, #256]	; (8000f6c <_Z9Mqtt_Initv+0x70c>)
 8000e6a:	46a0      	mov	r8, r4
 8000e6c:	46b9      	mov	r9, r7
 8000e6e:	2605      	movs	r6, #5
 8000e70:	001f      	movs	r7, r3
 8000e72:	4654      	mov	r4, sl
			memset(buffer3, 10, sizeof(buffer3));
 8000e74:	210a      	movs	r1, #10
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000e78:	0028      	movs	r0, r5
 8000e7a:	f002 f8bb 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+IPADDR\r\n",13,100);
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	220d      	movs	r2, #13
 8000e82:	0039      	movs	r1, r7
 8000e84:	0020      	movs	r0, r4
 8000e86:	f001 ff15 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+IPADDR");
 8000e8a:	4648      	mov	r0, r9
 8000e8c:	f7ff fb86 	bl	800059c <log_uart>
			HAL_Delay(1500);
 8000e90:	4829      	ldr	r0, [pc, #164]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000e92:	f000 fc41 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000e96:	0029      	movs	r1, r5
 8000e98:	2297      	movs	r2, #151	; 0x97
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f001 fb64 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	f7ff fb7b 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	0028      	movs	r0, r5
 8000eaa:	f002 f8ab 	bl	8003004 <strstr>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d107      	bne.n	8000ec2 <_Z9Mqtt_Initv+0x662>
				HAL_Delay(2000);
 8000eb2:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000eb4:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000eb6:	00c0      	lsls	r0, r0, #3
 8000eb8:	f000 fc2e 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d1d9      	bne.n	8000e74 <_Z9Mqtt_Initv+0x614>
 8000ec0:	e506      	b.n	80008d0 <_Z9Mqtt_Initv+0x70>
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <_Z9Mqtt_Initv+0x710>)
			else if(strstr(buffer3,"CIPOPEN: 0,4"))
 8000ec4:	4f2b      	ldr	r7, [pc, #172]	; (8000f74 <_Z9Mqtt_Initv+0x714>)
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <_Z9Mqtt_Initv+0x718>)
 8000eca:	46a2      	mov	sl, r4
 8000ecc:	4644      	mov	r4, r8
 8000ece:	4698      	mov	r8, r3
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2605      	movs	r6, #5
 8000ed4:	4647      	mov	r7, r8
 8000ed6:	46a0      	mov	r8, r4
 8000ed8:	4654      	mov	r4, sl
 8000eda:	469a      	mov	sl, r3
			memset(buffer3, 10, sizeof(buffer3));
 8000edc:	210a      	movs	r1, #10
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <_Z9Mqtt_Initv+0x6d8>)
 8000ee0:	0028      	movs	r0, r5
 8000ee2:	f002 f887 	bl	8002ff4 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	222e      	movs	r2, #46	; 0x2e
 8000eea:	4649      	mov	r1, r9
 8000eec:	0020      	movs	r0, r4
 8000eee:	f001 fee1 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart("AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883");
 8000ef2:	0038      	movs	r0, r7
 8000ef4:	f7ff fb52 	bl	800059c <log_uart>
			HAL_Delay(3500);
 8000ef8:	4820      	ldr	r0, [pc, #128]	; (8000f7c <_Z9Mqtt_Initv+0x71c>)
 8000efa:	f000 fc0d 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000efe:	0029      	movs	r1, r5
 8000f00:	2297      	movs	r2, #151	; 0x97
 8000f02:	0020      	movs	r0, r4
 8000f04:	f001 fb30 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000f08:	0028      	movs	r0, r5
 8000f0a:	f7ff fb47 	bl	800059c <log_uart>
			if(strstr(buffer3,"OK"))
 8000f0e:	4641      	mov	r1, r8
 8000f10:	0028      	movs	r0, r5
 8000f12:	f002 f877 	bl	8003004 <strstr>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d132      	bne.n	8000f80 <_Z9Mqtt_Initv+0x720>
			else if(strstr(buffer3,"CIPOPEN: 0,4"))
 8000f1a:	4651      	mov	r1, sl
 8000f1c:	0028      	movs	r0, r5
 8000f1e:	f002 f871 	bl	8003004 <strstr>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d12c      	bne.n	8000f80 <_Z9Mqtt_Initv+0x720>
				HAL_Delay(2000);
 8000f26:	20fa      	movs	r0, #250	; 0xfa
		for(int i=0;i<5;i++)
 8000f28:	3e01      	subs	r6, #1
				HAL_Delay(2000);
 8000f2a:	00c0      	lsls	r0, r0, #3
 8000f2c:	f000 fbf4 	bl	8001718 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d1d3      	bne.n	8000edc <_Z9Mqtt_Initv+0x67c>
 8000f34:	e4cc      	b.n	80008d0 <_Z9Mqtt_Initv+0x70>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	000005dc 	.word	0x000005dc
 8000f3c:	200014e4 	.word	0x200014e4
 8000f40:	0800382c 	.word	0x0800382c
 8000f44:	08003850 	.word	0x08003850
 8000f48:	08003864 	.word	0x08003864
 8000f4c:	08003874 	.word	0x08003874
 8000f50:	08003884 	.word	0x08003884
 8000f54:	08003894 	.word	0x08003894
 8000f58:	080038a4 	.word	0x080038a4
 8000f5c:	080038b4 	.word	0x080038b4
 8000f60:	080038d0 	.word	0x080038d0
 8000f64:	080038c4 	.word	0x080038c4
 8000f68:	080038d8 	.word	0x080038d8
 8000f6c:	080038e4 	.word	0x080038e4
 8000f70:	080038f0 	.word	0x080038f0
 8000f74:	08003944 	.word	0x08003944
 8000f78:	0800391c 	.word	0x0800391c
 8000f7c:	00000dac 	.word	0x00000dac
		memset(buffer3, 10, sizeof(buffer3));
 8000f80:	46a2      	mov	sl, r4
 8000f82:	210a      	movs	r1, #10
 8000f84:	4a3c      	ldr	r2, [pc, #240]	; (8001078 <_Z9Mqtt_Initv+0x818>)
 8000f86:	0028      	movs	r0, r5
 8000f88:	f002 f834 	bl	8002ff4 <memset>
		sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <_Z9Mqtt_Initv+0x81c>)
 8000f8e:	4c3c      	ldr	r4, [pc, #240]	; (8001080 <_Z9Mqtt_Initv+0x820>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	0028      	movs	r0, r5
 8000f96:	001f      	movs	r7, r3
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f002 f80b 	bl	8002fb4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	221e      	movs	r2, #30
 8000fa2:	0029      	movs	r1, r5
 8000fa4:	4650      	mov	r0, sl
 8000fa6:	f001 fe85 	bl	8002cb4 <HAL_UART_Transmit>
		log_uart(buffer3);
 8000faa:	0028      	movs	r0, r5
 8000fac:	f7ff faf6 	bl	800059c <log_uart>
		HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f000 fbb1 	bl	8001718 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init ,con_len,100);
 8000fb6:	8822      	ldrh	r2, [r4, #0]
 8000fb8:	4c32      	ldr	r4, [pc, #200]	; (8001084 <_Z9Mqtt_Initv+0x824>)
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	0021      	movs	r1, r4
 8000fbe:	4650      	mov	r0, sl
 8000fc0:	f001 fe78 	bl	8002cb4 <HAL_UART_Transmit>
		log_uart(recive_packet_init);
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f7ff fae9 	bl	800059c <log_uart>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <_Z9Mqtt_Initv+0x828>)
 8000fcc:	2332      	movs	r3, #50	; 0x32
 8000fce:	0016      	movs	r6, r2
 8000fd0:	9202      	str	r2, [sp, #8]
 8000fd2:	0031      	movs	r1, r6
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	f001 fe6c 	bl	8002cb4 <HAL_UART_Transmit>
		HAL_Delay(1500);
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <_Z9Mqtt_Initv+0x818>)
 8000fde:	f000 fb9b 	bl	8001718 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 400);
 8000fe2:	22c8      	movs	r2, #200	; 0xc8
 8000fe4:	0029      	movs	r1, r5
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	4650      	mov	r0, sl
 8000fea:	f001 fabd 	bl	8002568 <HAL_UART_Receive_DMA>
		HAL_Delay(1000);
 8000fee:	20fa      	movs	r0, #250	; 0xfa
 8000ff0:	0080      	lsls	r0, r0, #2
 8000ff2:	f000 fb91 	bl	8001718 <HAL_Delay>
		log_uart(buffer3);
 8000ff6:	0028      	movs	r0, r5
 8000ff8:	f7ff fad0 	bl	800059c <log_uart>
		memset(buffer3, 9, 400);
 8000ffc:	22c8      	movs	r2, #200	; 0xc8
 8000ffe:	2109      	movs	r1, #9
 8001000:	0052      	lsls	r2, r2, #1
 8001002:	0028      	movs	r0, r5
 8001004:	f001 fff6 	bl	8002ff4 <memset>
		sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 8001008:	4c20      	ldr	r4, [pc, #128]	; (800108c <_Z9Mqtt_Initv+0x82c>)
 800100a:	0039      	movs	r1, r7
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	0028      	movs	r0, r5
 8001010:	f001 ffd0 	bl	8002fb4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2216      	movs	r2, #22
 8001018:	0029      	movs	r1, r5
 800101a:	4650      	mov	r0, sl
 800101c:	f001 fe4a 	bl	8002cb4 <HAL_UART_Transmit>
		log_uart(buffer3);
 8001020:	0028      	movs	r0, r5
 8001022:	f7ff fabb 	bl	800059c <log_uart>
		HAL_Delay(200);
 8001026:	20c8      	movs	r0, #200	; 0xc8
 8001028:	f000 fb76 	bl	8001718 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	4c18      	ldr	r4, [pc, #96]	; (8001090 <_Z9Mqtt_Initv+0x830>)
 8001030:	0053      	lsls	r3, r2, #1
 8001032:	189b      	adds	r3, r3, r2
 8001034:	0021      	movs	r1, r4
 8001036:	b292      	uxth	r2, r2
 8001038:	4650      	mov	r0, sl
 800103a:	f001 fe3b 	bl	8002cb4 <HAL_UART_Transmit>
		log_uart(recive_packet_sub);
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff faac 	bl	800059c <log_uart>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8001044:	2332      	movs	r3, #50	; 0x32
 8001046:	2202      	movs	r2, #2
 8001048:	0031      	movs	r1, r6
 800104a:	4650      	mov	r0, sl
 800104c:	f001 fe32 	bl	8002cb4 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001050:	20fa      	movs	r0, #250	; 0xfa
 8001052:	0040      	lsls	r0, r0, #1
 8001054:	f000 fb60 	bl	8001718 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 512);
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0029      	movs	r1, r5
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4650      	mov	r0, sl
 8001060:	f001 fa82 	bl	8002568 <HAL_UART_Receive_DMA>
		log_uart(buffer3);
 8001064:	0028      	movs	r0, r5
 8001066:	f7ff fa99 	bl	800059c <log_uart>
		HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f000 fb54 	bl	8001718 <HAL_Delay>
		err_flag=0;
 8001070:	2300      	movs	r3, #0
 8001072:	465a      	mov	r2, fp
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e43d      	b.n	80008f4 <_Z9Mqtt_Initv+0x94>
 8001078:	000005dc 	.word	0x000005dc
 800107c:	08003954 	.word	0x08003954
 8001080:	2000007c 	.word	0x2000007c
 8001084:	200002c4 	.word	0x200002c4
 8001088:	08003824 	.word	0x08003824
 800108c:	20000efc 	.word	0x20000efc
 8001090:	200007b8 	.word	0x200007b8

08001094 <_Z11Mqtt_Recivev>:
uint8_t rxmessage1[500];

//uint8_t test[100];
uint32_t all_len=0;
void Mqtt_Recive()
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	46de      	mov	lr, fp
 8001098:	4657      	mov	r7, sl
 800109a:	464e      	mov	r6, r9
 800109c:	4645      	mov	r5, r8
 800109e:	b5e0      	push	{r5, r6, r7, lr}

	int last_len=0;
	if(err_flag!=1)
 80010a0:	4baa      	ldr	r3, [pc, #680]	; (800134c <_Z11Mqtt_Recivev+0x2b8>)
{
 80010a2:	b093      	sub	sp, #76	; 0x4c
	if(err_flag!=1)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d106      	bne.n	80010b8 <_Z11Mqtt_Recivev+0x24>
			HAL_Delay(1);
			all_len++;
		}
	}

}
 80010aa:	b013      	add	sp, #76	; 0x4c
 80010ac:	bcf0      	pop	{r4, r5, r6, r7}
 80010ae:	46bb      	mov	fp, r7
 80010b0:	46b2      	mov	sl, r6
 80010b2:	46a9      	mov	r9, r5
 80010b4:	46a0      	mov	r8, r4
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(buffer3, 9, 1500);
 80010b8:	4fa5      	ldr	r7, [pc, #660]	; (8001350 <_Z11Mqtt_Recivev+0x2bc>)
 80010ba:	2109      	movs	r1, #9
 80010bc:	4aa5      	ldr	r2, [pc, #660]	; (8001354 <_Z11Mqtt_Recivev+0x2c0>)
 80010be:	0038      	movs	r0, r7
 80010c0:	f001 ff98 	bl	8002ff4 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPRXGET=4,0\r\n", 24, 50);
 80010c4:	4ba4      	ldr	r3, [pc, #656]	; (8001358 <_Z11Mqtt_Recivev+0x2c4>)
 80010c6:	2218      	movs	r2, #24
 80010c8:	4699      	mov	r9, r3
 80010ca:	49a4      	ldr	r1, [pc, #656]	; (800135c <_Z11Mqtt_Recivev+0x2c8>)
 80010cc:	2332      	movs	r3, #50	; 0x32
 80010ce:	4648      	mov	r0, r9
 80010d0:	f001 fdf0 	bl	8002cb4 <HAL_UART_Transmit>
		HAL_Delay(200);
 80010d4:	20c8      	movs	r0, #200	; 0xc8
 80010d6:	f000 fb1f 	bl	8001718 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 1500);
 80010da:	4a9e      	ldr	r2, [pc, #632]	; (8001354 <_Z11Mqtt_Recivev+0x2c0>)
 80010dc:	0039      	movs	r1, r7
 80010de:	4648      	mov	r0, r9
 80010e0:	f001 fa42 	bl	8002568 <HAL_UART_Receive_DMA>
 80010e4:	003b      	movs	r3, r7
 80010e6:	2201      	movs	r2, #1
		for(int i=0;i<1450;i++)
 80010e8:	489d      	ldr	r0, [pc, #628]	; (8001360 <_Z11Mqtt_Recivev+0x2cc>)
 80010ea:	e004      	b.n	80010f6 <_Z11Mqtt_Recivev+0x62>
 80010ec:	3201      	adds	r2, #1
 80010ee:	3301      	adds	r3, #1
 80010f0:	4282      	cmp	r2, r0
 80010f2:	d100      	bne.n	80010f6 <_Z11Mqtt_Recivev+0x62>
 80010f4:	e10c      	b.n	8001310 <_Z11Mqtt_Recivev+0x27c>
			if(buffer3[i]=='+'&&buffer3[i+1]=='C'&&buffer3[i+2]=='I'&&buffer3[i+3]=='P'&&buffer3[i+4]=='R'&&buffer3[i+5]=='X'&&buffer3[i+6]=='G'&&buffer3[i+7]=='E'&&buffer3[i+8]=='T'&&buffer3[i+9]==':')
 80010f6:	7819      	ldrb	r1, [r3, #0]
 80010f8:	292b      	cmp	r1, #43	; 0x2b
 80010fa:	d1f7      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 80010fc:	7859      	ldrb	r1, [r3, #1]
 80010fe:	2943      	cmp	r1, #67	; 0x43
 8001100:	d1f4      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 8001102:	7899      	ldrb	r1, [r3, #2]
 8001104:	2949      	cmp	r1, #73	; 0x49
 8001106:	d1f1      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 8001108:	78d9      	ldrb	r1, [r3, #3]
 800110a:	2950      	cmp	r1, #80	; 0x50
 800110c:	d1ee      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 800110e:	7919      	ldrb	r1, [r3, #4]
 8001110:	2952      	cmp	r1, #82	; 0x52
 8001112:	d1eb      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 8001114:	7959      	ldrb	r1, [r3, #5]
 8001116:	2958      	cmp	r1, #88	; 0x58
 8001118:	d1e8      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 800111a:	7999      	ldrb	r1, [r3, #6]
 800111c:	2947      	cmp	r1, #71	; 0x47
 800111e:	d1e5      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 8001120:	79d9      	ldrb	r1, [r3, #7]
 8001122:	2945      	cmp	r1, #69	; 0x45
 8001124:	d1e2      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 8001126:	7a19      	ldrb	r1, [r3, #8]
 8001128:	2954      	cmp	r1, #84	; 0x54
 800112a:	d1df      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
 800112c:	7a59      	ldrb	r1, [r3, #9]
 800112e:	293a      	cmp	r1, #58	; 0x3a
 8001130:	d1dc      	bne.n	80010ec <_Z11Mqtt_Recivev+0x58>
				memcpy(rxmessage1,strstr((char*)buffer3,"+CIPRXGET:"),500);
 8001132:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <_Z11Mqtt_Recivev+0x2d0>)
 8001134:	0038      	movs	r0, r7
 8001136:	0019      	movs	r1, r3
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	f001 ff63 	bl	8003004 <strstr>
 800113e:	4b8a      	ldr	r3, [pc, #552]	; (8001368 <_Z11Mqtt_Recivev+0x2d4>)
 8001140:	22fa      	movs	r2, #250	; 0xfa
 8001142:	4698      	mov	r8, r3
 8001144:	0001      	movs	r1, r0
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	0018      	movs	r0, r3
 800114a:	f001 ffaf 	bl	80030ac <memcpy>
				len1=rxmessage1[15]-'0';
 800114e:	4643      	mov	r3, r8
 8001150:	7bde      	ldrb	r6, [r3, #15]
				if(rxmessage1[16]!='\n'&&rxmessage1[16]!='\r')
 8001152:	7c1a      	ldrb	r2, [r3, #16]
				len1=rxmessage1[15]-'0';
 8001154:	3e30      	subs	r6, #48	; 0x30
				if(rxmessage1[16]!='\n'&&rxmessage1[16]!='\r')
 8001156:	2a0a      	cmp	r2, #10
 8001158:	d100      	bne.n	800115c <_Z11Mqtt_Recivev+0xc8>
 800115a:	e0d5      	b.n	8001308 <_Z11Mqtt_Recivev+0x274>
 800115c:	2a0d      	cmp	r2, #13
 800115e:	d100      	bne.n	8001162 <_Z11Mqtt_Recivev+0xce>
 8001160:	e0d2      	b.n	8001308 <_Z11Mqtt_Recivev+0x274>
					len1=len1*10+rxmessage1[16]-'0';
 8001162:	230a      	movs	r3, #10
 8001164:	435e      	muls	r6, r3
 8001166:	18b6      	adds	r6, r6, r2
					if(rxmessage1[17]!='\n'&&rxmessage1[17]!='\r')
 8001168:	4642      	mov	r2, r8
 800116a:	7c52      	ldrb	r2, [r2, #17]
					len1=len1*10+rxmessage1[16]-'0';
 800116c:	3e30      	subs	r6, #48	; 0x30
					if(rxmessage1[17]!='\n'&&rxmessage1[17]!='\r')
 800116e:	429a      	cmp	r2, r3
 8001170:	d00e      	beq.n	8001190 <_Z11Mqtt_Recivev+0xfc>
 8001172:	2a0d      	cmp	r2, #13
 8001174:	d00c      	beq.n	8001190 <_Z11Mqtt_Recivev+0xfc>
						len1=len1*10+rxmessage1[17]-'0';
 8001176:	435e      	muls	r6, r3
 8001178:	18b6      	adds	r6, r6, r2
						if(rxmessage1[18]!='\n'&&rxmessage1[18]!='\r')
 800117a:	4642      	mov	r2, r8
 800117c:	7c92      	ldrb	r2, [r2, #18]
						len1=len1*10+rxmessage1[17]-'0';
 800117e:	3e30      	subs	r6, #48	; 0x30
						if(rxmessage1[18]!='\n'&&rxmessage1[18]!='\r')
 8001180:	429a      	cmp	r2, r3
 8001182:	d005      	beq.n	8001190 <_Z11Mqtt_Recivev+0xfc>
 8001184:	2a0d      	cmp	r2, #13
 8001186:	d003      	beq.n	8001190 <_Z11Mqtt_Recivev+0xfc>
							len1=len1*10+rxmessage1[18]-'0';
 8001188:	4373      	muls	r3, r6
 800118a:	189b      	adds	r3, r3, r2
 800118c:	3b30      	subs	r3, #48	; 0x30
 800118e:	001e      	movs	r6, r3
				if(len1>=500)
 8001190:	23fa      	movs	r3, #250	; 0xfa
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	429e      	cmp	r6, r3
 8001196:	da00      	bge.n	800119a <_Z11Mqtt_Recivev+0x106>
 8001198:	e0b6      	b.n	8001308 <_Z11Mqtt_Recivev+0x274>
					len1=400;
 800119a:	3b64      	subs	r3, #100	; 0x64
 800119c:	469a      	mov	sl, r3
					last_len=len1-400;
 800119e:	3e91      	subs	r6, #145	; 0x91
 80011a0:	3eff      	subs	r6, #255	; 0xff
		while(last_len>10)
 80011a2:	4b72      	ldr	r3, [pc, #456]	; (800136c <_Z11Mqtt_Recivev+0x2d8>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4b72      	ldr	r3, [pc, #456]	; (8001370 <_Z11Mqtt_Recivev+0x2dc>)
 80011a8:	469b      	mov	fp, r3
						pub=false;
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <_Z11Mqtt_Recivev+0x2e0>)
 80011ac:	9303      	str	r3, [sp, #12]
							HAL_UART_Transmit(&huart2, (uint8_t*)"+CIPRXGET:", 12,30);
 80011ae:	4b72      	ldr	r3, [pc, #456]	; (8001378 <_Z11Mqtt_Recivev+0x2e4>)
 80011b0:	9302      	str	r3, [sp, #8]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011b2:	2120      	movs	r1, #32
 80011b4:	4871      	ldr	r0, [pc, #452]	; (800137c <_Z11Mqtt_Recivev+0x2e8>)
 80011b6:	f000 fd11 	bl	8001bdc <HAL_GPIO_TogglePin>
			memset(buffer3, 10, sizeof(buffer3));
 80011ba:	210a      	movs	r1, #10
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <_Z11Mqtt_Recivev+0x2c0>)
 80011be:	0038      	movs	r0, r7
 80011c0:	f001 ff18 	bl	8002ff4 <memset>
			sprintf(ui,"AT+CIPRXGET=2,0,%d\r\n",len1);
 80011c4:	4652      	mov	r2, sl
 80011c6:	4659      	mov	r1, fp
 80011c8:	a805      	add	r0, sp, #20
 80011ca:	f001 fef3 	bl	8002fb4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)ui, 22,50);
 80011ce:	2332      	movs	r3, #50	; 0x32
 80011d0:	2216      	movs	r2, #22
 80011d2:	a905      	add	r1, sp, #20
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 fd6d 	bl	8002cb4 <HAL_UART_Transmit>
			log_uart(ui);
 80011da:	a805      	add	r0, sp, #20
 80011dc:	f7ff f9de 	bl	800059c <log_uart>
			HAL_Delay(150);
 80011e0:	2096      	movs	r0, #150	; 0x96
 80011e2:	f000 fa99 	bl	8001718 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1,  (uint8_t*)buffer3, 1500);
 80011e6:	0039      	movs	r1, r7
 80011e8:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <_Z11Mqtt_Recivev+0x2c0>)
 80011ea:	4648      	mov	r0, r9
 80011ec:	f001 f9bc 	bl	8002568 <HAL_UART_Receive_DMA>
			log_uart((char*)rxmessage1);
 80011f0:	4640      	mov	r0, r8
 80011f2:	f7ff f9d3 	bl	800059c <log_uart>
 80011f6:	003c      	movs	r4, r7
 80011f8:	2501      	movs	r5, #1
 80011fa:	e005      	b.n	8001208 <_Z11Mqtt_Recivev+0x174>
			for(int i=0;i<1450;i++)
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <_Z11Mqtt_Recivev+0x2ec>)
 80011fe:	429d      	cmp	r5, r3
 8001200:	d100      	bne.n	8001204 <_Z11Mqtt_Recivev+0x170>
 8001202:	e095      	b.n	8001330 <_Z11Mqtt_Recivev+0x29c>
 8001204:	3401      	adds	r4, #1
 8001206:	3501      	adds	r5, #1
				if(buffer3[i]=='+'&&buffer3[i+1]=='C'&&buffer3[i+2]=='I'&&buffer3[i+3]=='P'&&buffer3[i+4]=='R'&&buffer3[i+5]=='X'&&buffer3[i+6]=='G'&&buffer3[i+7]=='E'&&buffer3[i+8]=='T'&&buffer3[i+9]==':')
 8001208:	7823      	ldrb	r3, [r4, #0]
 800120a:	2b2b      	cmp	r3, #43	; 0x2b
 800120c:	d1f6      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 800120e:	7863      	ldrb	r3, [r4, #1]
 8001210:	2b43      	cmp	r3, #67	; 0x43
 8001212:	d1f3      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 8001214:	78a3      	ldrb	r3, [r4, #2]
 8001216:	2b49      	cmp	r3, #73	; 0x49
 8001218:	d1f0      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 800121a:	78e3      	ldrb	r3, [r4, #3]
 800121c:	2b50      	cmp	r3, #80	; 0x50
 800121e:	d1ed      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 8001220:	7923      	ldrb	r3, [r4, #4]
 8001222:	2b52      	cmp	r3, #82	; 0x52
 8001224:	d1ea      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 8001226:	7963      	ldrb	r3, [r4, #5]
 8001228:	2b58      	cmp	r3, #88	; 0x58
 800122a:	d1e7      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 800122c:	79a3      	ldrb	r3, [r4, #6]
 800122e:	2b47      	cmp	r3, #71	; 0x47
 8001230:	d1e4      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 8001232:	79e3      	ldrb	r3, [r4, #7]
 8001234:	2b45      	cmp	r3, #69	; 0x45
 8001236:	d1e1      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 8001238:	7a23      	ldrb	r3, [r4, #8]
 800123a:	2b54      	cmp	r3, #84	; 0x54
 800123c:	d1de      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
 800123e:	7a63      	ldrb	r3, [r4, #9]
 8001240:	2b3a      	cmp	r3, #58	; 0x3a
 8001242:	d1db      	bne.n	80011fc <_Z11Mqtt_Recivev+0x168>
					memcpy(rxmessage1,strstr((char*)buffer3,"+CIPRXGET:"),500);
 8001244:	9901      	ldr	r1, [sp, #4]
 8001246:	0038      	movs	r0, r7
 8001248:	f001 fedc 	bl	8003004 <strstr>
 800124c:	22fa      	movs	r2, #250	; 0xfa
 800124e:	0001      	movs	r1, r0
 8001250:	0052      	lsls	r2, r2, #1
 8001252:	4640      	mov	r0, r8
 8001254:	f001 ff2a 	bl	80030ac <memcpy>
					len2=rxmessage1[19]-'0';
 8001258:	4643      	mov	r3, r8
 800125a:	7cde      	ldrb	r6, [r3, #19]
					if(rxmessage1[20]!='\n'&&rxmessage1[20]!='\r')
 800125c:	7d1a      	ldrb	r2, [r3, #20]
					len2=rxmessage1[19]-'0';
 800125e:	3e30      	subs	r6, #48	; 0x30
					if(rxmessage1[20]!='\n'&&rxmessage1[20]!='\r')
 8001260:	2a0a      	cmp	r2, #10
 8001262:	d06a      	beq.n	800133a <_Z11Mqtt_Recivev+0x2a6>
 8001264:	2a0d      	cmp	r2, #13
 8001266:	d068      	beq.n	800133a <_Z11Mqtt_Recivev+0x2a6>
						len2=len2*10+rxmessage1[20]-'0';
 8001268:	00b3      	lsls	r3, r6, #2
 800126a:	199b      	adds	r3, r3, r6
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	189b      	adds	r3, r3, r2
 8001270:	3b30      	subs	r3, #48	; 0x30
 8001272:	001e      	movs	r6, r3
						if(rxmessage1[21]!='\n'&&rxmessage1[21]!='\r')
 8001274:	4643      	mov	r3, r8
 8001276:	7d5a      	ldrb	r2, [r3, #21]
 8001278:	2a0a      	cmp	r2, #10
 800127a:	d012      	beq.n	80012a2 <_Z11Mqtt_Recivev+0x20e>
 800127c:	2a0d      	cmp	r2, #13
 800127e:	d010      	beq.n	80012a2 <_Z11Mqtt_Recivev+0x20e>
							len2=len2*10+rxmessage1[21]-'0';
 8001280:	00b3      	lsls	r3, r6, #2
 8001282:	199b      	adds	r3, r3, r6
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	189b      	adds	r3, r3, r2
 8001288:	3b30      	subs	r3, #48	; 0x30
 800128a:	001e      	movs	r6, r3
							if(rxmessage1[22]!='\n'&&rxmessage1[22]!='\r')
 800128c:	4643      	mov	r3, r8
 800128e:	7d9a      	ldrb	r2, [r3, #22]
 8001290:	2a0a      	cmp	r2, #10
 8001292:	d006      	beq.n	80012a2 <_Z11Mqtt_Recivev+0x20e>
 8001294:	2a0d      	cmp	r2, #13
 8001296:	d004      	beq.n	80012a2 <_Z11Mqtt_Recivev+0x20e>
								len2=len2*10+rxmessage1[22]-'0';
 8001298:	230a      	movs	r3, #10
 800129a:	4373      	muls	r3, r6
 800129c:	189b      	adds	r3, r3, r2
 800129e:	3b30      	subs	r3, #48	; 0x30
 80012a0:	001e      	movs	r6, r3
					if(len2>=500)
 80012a2:	23fa      	movs	r3, #250	; 0xfa
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	429e      	cmp	r6, r3
 80012a8:	db47      	blt.n	800133a <_Z11Mqtt_Recivev+0x2a6>
 80012aa:	22c8      	movs	r2, #200	; 0xc8
 80012ac:	0052      	lsls	r2, r2, #1
						all_len+=len2;
 80012ae:	9900      	ldr	r1, [sp, #0]
						memcpy(rxmessage1,strstr((char*)buffer3,"+CIPRXGET:"),500);
 80012b0:	0038      	movs	r0, r7
						all_len+=len2;
 80012b2:	680b      	ldr	r3, [r1, #0]
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
						pub=false;
 80012b8:	2300      	movs	r3, #0
 80012ba:	9a03      	ldr	r2, [sp, #12]
						memcpy(rxmessage1,strstr((char*)buffer3,"+CIPRXGET:"),500);
 80012bc:	9901      	ldr	r1, [sp, #4]
						pub=false;
 80012be:	7013      	strb	r3, [r2, #0]
						last_len=last_len-len1;
 80012c0:	4653      	mov	r3, sl
 80012c2:	1af6      	subs	r6, r6, r3
						memcpy(rxmessage1,strstr((char*)buffer3,"+CIPRXGET:"),500);
 80012c4:	f001 fe9e 	bl	8003004 <strstr>
 80012c8:	22fa      	movs	r2, #250	; 0xfa
 80012ca:	0001      	movs	r1, r0
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	4640      	mov	r0, r8
 80012d0:	f001 feec 	bl	80030ac <memcpy>
							HAL_Delay(30);
 80012d4:	201e      	movs	r0, #30
 80012d6:	f000 fa1f 	bl	8001718 <HAL_Delay>
							HAL_UART_Transmit(&huart2, (uint8_t*)"+CIPRXGET:", 12,30);
 80012da:	9901      	ldr	r1, [sp, #4]
 80012dc:	231e      	movs	r3, #30
 80012de:	220c      	movs	r2, #12
 80012e0:	9802      	ldr	r0, [sp, #8]
 80012e2:	f001 fce7 	bl	8002cb4 <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart2, rxmessage1, 440,250);
 80012e6:	22dc      	movs	r2, #220	; 0xdc
 80012e8:	4641      	mov	r1, r8
 80012ea:	23fa      	movs	r3, #250	; 0xfa
 80012ec:	0052      	lsls	r2, r2, #1
 80012ee:	9802      	ldr	r0, [sp, #8]
 80012f0:	f001 fce0 	bl	8002cb4 <HAL_UART_Transmit>
							HAL_Delay(30);
 80012f4:	201e      	movs	r0, #30
 80012f6:	f000 fa0f 	bl	8001718 <HAL_Delay>
							memset( rxmessage1, 9, 500);
 80012fa:	22fa      	movs	r2, #250	; 0xfa
 80012fc:	2109      	movs	r1, #9
 80012fe:	4640      	mov	r0, r8
 8001300:	0052      	lsls	r2, r2, #1
 8001302:	f001 fe77 	bl	8002ff4 <memset>
						for(int z=0;z<1;z++)
 8001306:	e779      	b.n	80011fc <_Z11Mqtt_Recivev+0x168>
		while(last_len>10)
 8001308:	46b2      	mov	sl, r6
 800130a:	2e0a      	cmp	r6, #10
 800130c:	dd00      	ble.n	8001310 <_Z11Mqtt_Recivev+0x27c>
 800130e:	e748      	b.n	80011a2 <_Z11Mqtt_Recivev+0x10e>
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <_Z11Mqtt_Recivev+0x2d8>)
 8001312:	001a      	movs	r2, r3
 8001314:	9300      	str	r3, [sp, #0]
		if(all_len>200000)
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <_Z11Mqtt_Recivev+0x2f0>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d800      	bhi.n	8001320 <_Z11Mqtt_Recivev+0x28c>
 800131e:	e6c4      	b.n	80010aa <_Z11Mqtt_Recivev+0x16>
			HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f000 f9f9 	bl	8001718 <HAL_Delay>
			all_len++;
 8001326:	9a00      	ldr	r2, [sp, #0]
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	6013      	str	r3, [r2, #0]
}
 800132e:	e6bc      	b.n	80010aa <_Z11Mqtt_Recivev+0x16>
		while(last_len>10)
 8001330:	2e0a      	cmp	r6, #10
 8001332:	dd00      	ble.n	8001336 <_Z11Mqtt_Recivev+0x2a2>
 8001334:	e73d      	b.n	80011b2 <_Z11Mqtt_Recivev+0x11e>
 8001336:	9a00      	ldr	r2, [sp, #0]
 8001338:	e7ed      	b.n	8001316 <_Z11Mqtt_Recivev+0x282>
						all_len+=len2;
 800133a:	0032      	movs	r2, r6
					if(len2>10)
 800133c:	2e0a      	cmp	r6, #10
 800133e:	dcb6      	bgt.n	80012ae <_Z11Mqtt_Recivev+0x21a>
			for(int i=0;i<1450;i++)
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <_Z11Mqtt_Recivev+0x2ec>)
 8001342:	429d      	cmp	r5, r3
 8001344:	d000      	beq.n	8001348 <_Z11Mqtt_Recivev+0x2b4>
 8001346:	e75d      	b.n	8001204 <_Z11Mqtt_Recivev+0x170>
 8001348:	9a00      	ldr	r2, [sp, #0]
 800134a:	e7e4      	b.n	8001316 <_Z11Mqtt_Recivev+0x282>
 800134c:	20000000 	.word	0x20000000
 8001350:	20000f04 	.word	0x20000f04
 8001354:	000005dc 	.word	0x000005dc
 8001358:	200001b4 	.word	0x200001b4
 800135c:	08003978 	.word	0x08003978
 8001360:	000005ab 	.word	0x000005ab
 8001364:	0800398c 	.word	0x0800398c
 8001368:	200014e8 	.word	0x200014e8
 800136c:	20000f00 	.word	0x20000f00
 8001370:	08003998 	.word	0x08003998
 8001374:	200014e0 	.word	0x200014e0
 8001378:	20000234 	.word	0x20000234
 800137c:	48000400 	.word	0x48000400
 8001380:	000005aa 	.word	0x000005aa
 8001384:	00030d40 	.word	0x00030d40

08001388 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	2201      	movs	r2, #1
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MspInit+0x2c>)
{
 800138c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	6999      	ldr	r1, [r3, #24]
 8001390:	4311      	orrs	r1, r2
 8001392:	6199      	str	r1, [r3, #24]
 8001394:	6999      	ldr	r1, [r3, #24]
 8001396:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	0549      	lsls	r1, r1, #21
 80013a2:	430a      	orrs	r2, r1
 80013a4:	61da      	str	r2, [r3, #28]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	400b      	ands	r3, r1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	b002      	add	sp, #8
 80013b0:	4770      	bx	lr
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_RTC_MspInit+0x18>)
 80013ba:	6802      	ldr	r2, [r0, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d000      	beq.n	80013c2 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013c0:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_RTC_MspInit+0x1c>)
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	6a11      	ldr	r1, [r2, #32]
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6213      	str	r3, [r2, #32]
}
 80013ce:	e7f7      	b.n	80013c0 <HAL_RTC_MspInit+0x8>
 80013d0:	40002800 	.word	0x40002800
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b530      	push	{r4, r5, lr}
 80013da:	0004      	movs	r4, r0
 80013dc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	2214      	movs	r2, #20
 80013e0:	2100      	movs	r1, #0
 80013e2:	a804      	add	r0, sp, #16
 80013e4:	f001 fe06 	bl	8002ff4 <memset>
  if(huart->Instance==USART1)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_UART_MspInit+0x17c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d004      	beq.n	80013fa <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80013f0:	4a59      	ldr	r2, [pc, #356]	; (8001558 <HAL_UART_MspInit+0x180>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d052      	beq.n	800149c <HAL_UART_MspInit+0xc4>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f6:	b00b      	add	sp, #44	; 0x2c
 80013f8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	4b57      	ldr	r3, [pc, #348]	; (800155c <HAL_UART_MspInit+0x184>)
 80013fe:	01c9      	lsls	r1, r1, #7
 8001400:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8001404:	430a      	orrs	r2, r1
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	0289      	lsls	r1, r1, #10
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800141e:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	400b      	ands	r3, r1
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001426:	2302      	movs	r3, #2
 8001428:	0152      	lsls	r2, r2, #5
 800142a:	9204      	str	r2, [sp, #16]
 800142c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001434:	3b02      	subs	r3, #2
 8001436:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f000 facc 	bl	80019d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800143c:	4d48      	ldr	r5, [pc, #288]	; (8001560 <HAL_UART_MspInit+0x188>)
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_UART_MspInit+0x18c>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001442:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001444:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001446:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001448:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144c:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001450:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001452:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001456:	f000 f9d7 	bl	8001808 <HAL_DMA_Init>
 800145a:	2800      	cmp	r0, #0
 800145c:	d171      	bne.n	8001542 <HAL_UART_MspInit+0x16a>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_UART_MspInit+0x190>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001460:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001462:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001464:	4d41      	ldr	r5, [pc, #260]	; (800156c <HAL_UART_MspInit+0x194>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001468:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146a:	2310      	movs	r3, #16
 800146c:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001470:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001476:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001478:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800147a:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800147c:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800147e:	f000 f9c3 	bl	8001808 <HAL_DMA_Init>
 8001482:	2800      	cmp	r0, #0
 8001484:	d15a      	bne.n	800153c <HAL_UART_MspInit+0x164>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800148c:	66a5      	str	r5, [r4, #104]	; 0x68
 800148e:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001490:	f000 f954 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001494:	201b      	movs	r0, #27
 8001496:	f000 f983 	bl	80017a0 <HAL_NVIC_EnableIRQ>
 800149a:	e7ac      	b.n	80013f6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_UART_MspInit+0x184>)
 80014a0:	0292      	lsls	r2, r2, #10
 80014a2:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	4311      	orrs	r1, r2
 80014a8:	61d9      	str	r1, [r3, #28]
 80014aa:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ae:	4011      	ands	r1, r2
 80014b0:	9102      	str	r1, [sp, #8]
 80014b2:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	6959      	ldr	r1, [r3, #20]
 80014b6:	4311      	orrs	r1, r2
 80014b8:	6159      	str	r1, [r3, #20]
 80014ba:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4013      	ands	r3, r2
 80014c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c2:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c6:	2302      	movs	r3, #2
 80014c8:	9204      	str	r2, [sp, #16]
 80014ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014d0:	3b02      	subs	r3, #2
 80014d2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f000 fa7e 	bl	80019d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80014d8:	4d25      	ldr	r5, [pc, #148]	; (8001570 <HAL_UART_MspInit+0x198>)
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_UART_MspInit+0x19c>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80014de:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e0:	2300      	movs	r3, #0
 80014e2:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	60ab      	str	r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e6:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e8:	616b      	str	r3, [r5, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014ea:	61ab      	str	r3, [r5, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014ec:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014ee:	0028      	movs	r0, r5
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014f0:	019b      	lsls	r3, r3, #6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	60ea      	str	r2, [r5, #12]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014f4:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014f6:	f000 f987 	bl	8001808 <HAL_DMA_Init>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d124      	bne.n	8001548 <HAL_UART_MspInit+0x170>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_UART_MspInit+0x1a0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001500:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001502:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001504:	4d1d      	ldr	r5, [pc, #116]	; (800157c <HAL_UART_MspInit+0x1a4>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001508:	602b      	str	r3, [r5, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150a:	2310      	movs	r3, #16
 800150c:	606b      	str	r3, [r5, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001510:	0028      	movs	r0, r5
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	60ea      	str	r2, [r5, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001516:	612b      	str	r3, [r5, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001518:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800151a:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800151c:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800151e:	f000 f973 	bl	8001808 <HAL_DMA_Init>
 8001522:	2800      	cmp	r0, #0
 8001524:	d113      	bne.n	800154e <HAL_UART_MspInit+0x176>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800152c:	66a5      	str	r5, [r4, #104]	; 0x68
 800152e:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001530:	f000 f904 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 f933 	bl	80017a0 <HAL_NVIC_EnableIRQ>
}
 800153a:	e75c      	b.n	80013f6 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 800153c:	f7ff f98e 	bl	800085c <Error_Handler>
 8001540:	e7a1      	b.n	8001486 <HAL_UART_MspInit+0xae>
      Error_Handler();
 8001542:	f7ff f98b 	bl	800085c <Error_Handler>
 8001546:	e78a      	b.n	800145e <HAL_UART_MspInit+0x86>
      Error_Handler();
 8001548:	f7ff f988 	bl	800085c <Error_Handler>
 800154c:	e7d7      	b.n	80014fe <HAL_UART_MspInit+0x126>
      Error_Handler();
 800154e:	f7ff f985 	bl	800085c <Error_Handler>
 8001552:	e7e8      	b.n	8001526 <HAL_UART_MspInit+0x14e>
 8001554:	40013800 	.word	0x40013800
 8001558:	40004400 	.word	0x40004400
 800155c:	40021000 	.word	0x40021000
 8001560:	20000084 	.word	0x20000084
 8001564:	40020030 	.word	0x40020030
 8001568:	4002001c 	.word	0x4002001c
 800156c:	200000c8 	.word	0x200000c8
 8001570:	2000010c 	.word	0x2000010c
 8001574:	40020058 	.word	0x40020058
 8001578:	40020044 	.word	0x40020044
 800157c:	20000150 	.word	0x20000150

08001580 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler>
 8001582:	46c0      	nop			; (mov r8, r8)

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b510      	push	{r4, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 8001586:	f000 f917 	bl	80017b8 <HAL_NVIC_SystemReset>
  while (1)
 800158a:	e7fc      	b.n	8001586 <HardFault_Handler+0x2>

0800158c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800158c:	4770      	bx	lr
 800158e:	46c0      	nop			; (mov r8, r8)

08001590 <PendSV_Handler>:
 8001590:	4770      	bx	lr
 8001592:	46c0      	nop			; (mov r8, r8)

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 f8ad 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bd10      	pop	{r4, pc}

0800159c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800159c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <DMA1_Channel2_3_IRQHandler+0x10>)
 80015a0:	f000 f9ca 	bl	8001938 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80015a6:	f000 f9c7 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	200000c8 	.word	0x200000c8
 80015b0:	20000084 	.word	0x20000084

080015b4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80015b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <DMA1_Channel4_5_IRQHandler+0x10>)
 80015b8:	f000 f9be 	bl	8001938 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80015be:	f000 f9bb 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80015c2:	bd10      	pop	{r4, pc}
 80015c4:	20000150 	.word	0x20000150
 80015c8:	2000010c 	.word	0x2000010c

080015cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
//	Uart_isr(&huart1);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015ce:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USART1_IRQHandler+0xc>)
 80015d0:	f001 f89a 	bl	8002708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	200001b4 	.word	0x200001b4

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USART2_IRQHandler+0xc>)
 80015e0:	f001 f892 	bl	8002708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e4:	bd10      	pop	{r4, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000234 	.word	0x20000234

080015ec <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <_sbrk+0x34>)
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <_sbrk+0x38>)
{
 80015f0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f2:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <_sbrk+0x3c>)
{
 80015f6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015f8:	6808      	ldr	r0, [r1, #0]
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d004      	beq.n	8001608 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	18c3      	adds	r3, r0, r3
 8001600:	4293      	cmp	r3, r2
 8001602:	d806      	bhi.n	8001612 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001604:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001606:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800160c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4293      	cmp	r3, r2
 8001610:	d9f8      	bls.n	8001604 <_sbrk+0x18>
    errno = ENOMEM;
 8001612:	f001 fd1f 	bl	8003054 <__errno>
 8001616:	230c      	movs	r3, #12
 8001618:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800161a:	2001      	movs	r0, #1
 800161c:	4240      	negs	r0, r0
 800161e:	e7f2      	b.n	8001606 <_sbrk+0x1a>
 8001620:	00000400 	.word	0x00000400
 8001624:	20002000 	.word	0x20002000
 8001628:	200016e0 	.word	0x200016e0
 800162c:	20001830 	.word	0x20001830

08001630 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001630:	4770      	bx	lr
 8001632:	46c0      	nop			; (mov r8, r8)

08001634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001636:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001638:	f7ff fffa 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	; (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <LoopForever+0xe>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	; (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001662:	f001 fcfd 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001666:	f7fe ffdd 	bl	8000624 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   r0, =_estack
 800166c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001678:	08003a30 	.word	0x08003a30
  ldr r2, =_sbss
 800167c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001680:	20001830 	.word	0x20001830

08001684 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_IRQHandler>
	...

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	20fa      	movs	r0, #250	; 0xfa
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_InitTick+0x40>)
 8001690:	0080      	lsls	r0, r0, #2
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	f7fe fd42 	bl	800011c <__udivsi3>
 8001698:	4d0c      	ldr	r5, [pc, #48]	; (80016cc <HAL_InitTick+0x44>)
 800169a:	0001      	movs	r1, r0
 800169c:	6828      	ldr	r0, [r5, #0]
 800169e:	f7fe fd3d 	bl	800011c <__udivsi3>
 80016a2:	f000 f897 	bl	80017d4 <HAL_SYSTICK_Config>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80016aa:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ac:	2c03      	cmp	r4, #3
 80016ae:	d900      	bls.n	80016b2 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b2:	3802      	subs	r0, #2
 80016b4:	2200      	movs	r2, #0
 80016b6:	0021      	movs	r1, r4
 80016b8:	f000 f840 	bl	800173c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_InitTick+0x48>)
 80016be:	2000      	movs	r0, #0
 80016c0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80016c2:	e7f5      	b.n	80016b0 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7f3      	b.n	80016b0 <HAL_InitTick+0x28>
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	2110      	movs	r1, #16
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_Init+0x1c>)
{
 80016d8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016da:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80016dc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016de:	430b      	orrs	r3, r1
 80016e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	f7ff ffd1 	bl	8001688 <HAL_InitTick>
  HAL_MspInit();
 80016e6:	f7ff fe4f 	bl	8001388 <HAL_MspInit>
}
 80016ea:	2000      	movs	r0, #0
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x10>)
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_IncTick+0x14>)
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	185b      	adds	r3, r3, r1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	4770      	bx	lr
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	200016e4 	.word	0x200016e4
 8001708:	20000008 	.word	0x20000008

0800170c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_GetTick+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
}
 8001710:	4770      	bx	lr
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200016e4 	.word	0x200016e4

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff6 	bl	800170c <HAL_GetTick>
 8001720:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	1c63      	adds	r3, r4, #1
 8001724:	d002      	beq.n	800172c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_Delay+0x20>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	1b40      	subs	r0, r0, r5
 8001732:	42a0      	cmp	r0, r4
 8001734:	d3fa      	bcc.n	800172c <HAL_Delay+0x14>
  {
  }
}
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800173e:	2800      	cmp	r0, #0
 8001740:	db14      	blt.n	800176c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_NVIC_SetPriority+0x5c>)
 8001744:	2203      	movs	r2, #3
 8001746:	469c      	mov	ip, r3
 8001748:	23ff      	movs	r3, #255	; 0xff
 800174a:	0884      	lsrs	r4, r0, #2
 800174c:	4002      	ands	r2, r0
 800174e:	0018      	movs	r0, r3
 8001750:	26c0      	movs	r6, #192	; 0xc0
 8001752:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001754:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001756:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001758:	400b      	ands	r3, r1
 800175a:	4093      	lsls	r3, r2
 800175c:	00a4      	lsls	r4, r4, #2
 800175e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001760:	00b6      	lsls	r6, r6, #2
 8001762:	59a5      	ldr	r5, [r4, r6]
 8001764:	4385      	bics	r5, r0
 8001766:	432b      	orrs	r3, r5
 8001768:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800176a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_NVIC_SetPriority+0x60>)
 800176e:	230f      	movs	r3, #15
 8001770:	4694      	mov	ip, r2
 8001772:	2203      	movs	r2, #3
 8001774:	4003      	ands	r3, r0
 8001776:	4010      	ands	r0, r2
 8001778:	32fc      	adds	r2, #252	; 0xfc
 800177a:	0015      	movs	r5, r2
 800177c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800177e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001780:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001782:	400a      	ands	r2, r1
 8001784:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001786:	3b08      	subs	r3, #8
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4463      	add	r3, ip
 800178e:	69dc      	ldr	r4, [r3, #28]
 8001790:	43ac      	bics	r4, r5
 8001792:	4322      	orrs	r2, r4
 8001794:	61da      	str	r2, [r3, #28]
 8001796:	e7e8      	b.n	800176a <HAL_NVIC_SetPriority+0x2e>
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017a0:	2800      	cmp	r0, #0
 80017a2:	db05      	blt.n	80017b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a4:	221f      	movs	r2, #31
 80017a6:	2301      	movs	r3, #1
 80017a8:	4002      	ands	r2, r0
 80017aa:	4093      	lsls	r3, r2
 80017ac:	4a01      	ldr	r2, [pc, #4]	; (80017b4 <HAL_NVIC_EnableIRQ+0x14>)
 80017ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017b8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_NVIC_SystemReset+0x14>)
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_NVIC_SystemReset+0x18>)
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80017c6:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80017c8:	e7fd      	b.n	80017c6 <HAL_NVIC_SystemReset+0xe>
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	05fa0004 	.word	0x05fa0004

080017d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	1e43      	subs	r3, r0, #1
 80017d8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d20e      	bcs.n	80017fe <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e0:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e8:	6a03      	ldr	r3, [r0, #32]
 80017ea:	0609      	lsls	r1, r1, #24
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	3307      	adds	r3, #7
 80017fc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017fe:	4770      	bx	lr
 8001800:	e000e010 	.word	0xe000e010
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800180c:	d027      	beq.n	800185e <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180e:	2521      	movs	r5, #33	; 0x21
 8001810:	2302      	movs	r3, #2
 8001812:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001814:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001818:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800181a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800181c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800181e:	6863      	ldr	r3, [r4, #4]
 8001820:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	68e1      	ldr	r1, [r4, #12]
 8001824:	430b      	orrs	r3, r1
 8001826:	6921      	ldr	r1, [r4, #16]
 8001828:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	6961      	ldr	r1, [r4, #20]
 800182c:	430b      	orrs	r3, r1
 800182e:	69a1      	ldr	r1, [r4, #24]
 8001830:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001832:	69e1      	ldr	r1, [r4, #28]
 8001834:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001836:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001838:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_DMA_Init+0x60>)
 800183c:	2114      	movs	r1, #20
 800183e:	469c      	mov	ip, r3
 8001840:	4460      	add	r0, ip
 8001842:	f7fe fc6b 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001848:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 800184a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800184e:	0080      	lsls	r0, r0, #2
 8001850:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001852:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001854:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001858:	321f      	adds	r2, #31
 800185a:	54a3      	strb	r3, [r4, r2]
}  
 800185c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
 8001860:	e7fc      	b.n	800185c <HAL_DMA_Init+0x54>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	ffffc00f 	.word	0xffffc00f
 8001868:	bffdfff8 	.word	0xbffdfff8
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_DMA_Start_IT>:
{
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001872:	2420      	movs	r4, #32
 8001874:	5d05      	ldrb	r5, [r0, r4]
 8001876:	2d01      	cmp	r5, #1
 8001878:	d037      	beq.n	80018ea <HAL_DMA_Start_IT+0x7a>
 800187a:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800187c:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 800187e:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001880:	5dc5      	ldrb	r5, [r0, r7]
 8001882:	b2ee      	uxtb	r6, r5
 8001884:	2d01      	cmp	r5, #1
 8001886:	d003      	beq.n	8001890 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma); 
 8001888:	2300      	movs	r3, #0
 800188a:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 800188c:	2002      	movs	r0, #2
} 
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	3c1e      	subs	r4, #30
 8001892:	55c4      	strb	r4, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001894:	2400      	movs	r4, #0
 8001896:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001898:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800189a:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800189c:	6825      	ldr	r5, [r4, #0]
 800189e:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018a0:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018a2:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018a4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80018a6:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80018a8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	6843      	ldr	r3, [r0, #4]
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d00e      	beq.n	80018ce <HAL_DMA_Start_IT+0x5e>
    if(NULL != hdma->XferHalfCpltCallback )
 80018b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 80018b2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b4:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ba:	220e      	movs	r2, #14
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018c2:	2201      	movs	r2, #1
 80018c4:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018c8:	4313      	orrs	r3, r2
 80018ca:	6023      	str	r3, [r4, #0]
 80018cc:	e7df      	b.n	800188e <HAL_DMA_Start_IT+0x1e>
    if(NULL != hdma->XferHalfCpltCallback )
 80018ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80018d0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018d2:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_DMA_Start_IT+0x4a>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018d8:	220a      	movs	r2, #10
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	3a06      	subs	r2, #6
 80018e4:	4393      	bics	r3, r2
 80018e6:	6023      	str	r3, [r4, #0]
 80018e8:	e7eb      	b.n	80018c2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80018ea:	2002      	movs	r0, #2
 80018ec:	e7cf      	b.n	800188e <HAL_DMA_Start_IT+0x1e>
 80018ee:	46c0      	nop			; (mov r8, r8)

080018f0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f0:	2321      	movs	r3, #33	; 0x21
{  
 80018f2:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f4:	5cc2      	ldrb	r2, [r0, r3]
 80018f6:	2a02      	cmp	r2, #2
 80018f8:	d003      	beq.n	8001902 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	3b1d      	subs	r3, #29
 80018fc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80018fe:	2001      	movs	r0, #1
}
 8001900:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001902:	240e      	movs	r4, #14
 8001904:	6802      	ldr	r2, [r0, #0]
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	43a1      	bics	r1, r4
 800190a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190c:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800190e:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001910:	6814      	ldr	r4, [r2, #0]
 8001912:	438c      	bics	r4, r1
 8001914:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001916:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001918:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800191a:	40a5      	lsls	r5, r4
 800191c:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001920:	2200      	movs	r2, #0
 8001922:	2320      	movs	r3, #32
 8001924:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001926:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 800192c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2000      	movs	r0, #0
 8001930:	e7e6      	b.n	8001900 <HAL_DMA_Abort_IT+0x10>
 8001932:	2000      	movs	r0, #0
 8001934:	e7e4      	b.n	8001900 <HAL_DMA_Abort_IT+0x10>
 8001936:	46c0      	nop			; (mov r8, r8)

08001938 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001938:	2104      	movs	r1, #4
{
 800193a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800193c:	000c      	movs	r4, r1
 800193e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001940:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001942:	409c      	lsls	r4, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001944:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001946:	6806      	ldr	r6, [r0, #0]
 8001948:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800194a:	4222      	tst	r2, r4
 800194c:	d00d      	beq.n	800196a <HAL_DMA_IRQHandler+0x32>
 800194e:	4229      	tst	r1, r5
 8001950:	d00b      	beq.n	800196a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001952:	6833      	ldr	r3, [r6, #0]
 8001954:	069b      	lsls	r3, r3, #26
 8001956:	d402      	bmi.n	800195e <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001958:	6833      	ldr	r3, [r6, #0]
 800195a:	438b      	bics	r3, r1
 800195c:	6033      	str	r3, [r6, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800195e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001960:	607c      	str	r4, [r7, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001962:	2b00      	cmp	r3, #0
 8001964:	d000      	beq.n	8001968 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8001966:	4798      	blx	r3
}  
 8001968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800196a:	2102      	movs	r1, #2
 800196c:	000c      	movs	r4, r1
 800196e:	409c      	lsls	r4, r3
 8001970:	4222      	tst	r2, r4
 8001972:	d014      	beq.n	800199e <HAL_DMA_IRQHandler+0x66>
 8001974:	4229      	tst	r1, r5
 8001976:	d012      	beq.n	800199e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	069b      	lsls	r3, r3, #26
 800197c:	d406      	bmi.n	800198c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800197e:	220a      	movs	r2, #10
 8001980:	6833      	ldr	r3, [r6, #0]
 8001982:	4393      	bics	r3, r2
 8001984:	6033      	str	r3, [r6, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001986:	2321      	movs	r3, #33	; 0x21
 8001988:	3a09      	subs	r2, #9
 800198a:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 800198c:	2320      	movs	r3, #32
 800198e:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001990:	607c      	str	r4, [r7, #4]
  	__HAL_UNLOCK(hdma);
 8001992:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001994:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0e6      	beq.n	8001968 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800199a:	4798      	blx	r3
 800199c:	e7e4      	b.n	8001968 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800199e:	2108      	movs	r1, #8
 80019a0:	000c      	movs	r4, r1
 80019a2:	409c      	lsls	r4, r3
 80019a4:	4222      	tst	r2, r4
 80019a6:	d0df      	beq.n	8001968 <HAL_DMA_IRQHandler+0x30>
 80019a8:	4229      	tst	r1, r5
 80019aa:	d0dd      	beq.n	8001968 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ac:	6832      	ldr	r2, [r6, #0]
 80019ae:	3106      	adds	r1, #6
 80019b0:	438a      	bics	r2, r1
 80019b2:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019b4:	2201      	movs	r2, #1
 80019b6:	0011      	movs	r1, r2
 80019b8:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 80019ba:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019bc:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019be:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80019c0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 80019c2:	2200      	movs	r2, #0
 80019c4:	3b01      	subs	r3, #1
 80019c6:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80019c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0cc      	beq.n	8001968 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80019ce:	4798      	blx	r3
 80019d0:	e7ca      	b.n	8001968 <HAL_DMA_IRQHandler+0x30>
 80019d2:	46c0      	nop			; (mov r8, r8)

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	4657      	mov	r7, sl
 80019dc:	464e      	mov	r6, r9
 80019de:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
{ 
 80019e4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	2d00      	cmp	r5, #0
 80019e8:	d100      	bne.n	80019ec <HAL_GPIO_Init+0x18>
 80019ea:	e080      	b.n	8001aee <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <HAL_GPIO_Init+0x1e4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ee:	4688      	mov	r8, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4691      	mov	r9, r2
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f2:	2401      	movs	r4, #1
 80019f4:	002a      	movs	r2, r5
 80019f6:	409c      	lsls	r4, r3
 80019f8:	4022      	ands	r2, r4
 80019fa:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80019fc:	4225      	tst	r5, r4
 80019fe:	d072      	beq.n	8001ae6 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a00:	4642      	mov	r2, r8
 8001a02:	6852      	ldr	r2, [r2, #4]
 8001a04:	2610      	movs	r6, #16
 8001a06:	0011      	movs	r1, r2
 8001a08:	43b1      	bics	r1, r6
 8001a0a:	9101      	str	r1, [sp, #4]
 8001a0c:	2902      	cmp	r1, #2
 8001a0e:	d100      	bne.n	8001a12 <HAL_GPIO_Init+0x3e>
 8001a10:	e074      	b.n	8001afc <HAL_GPIO_Init+0x128>
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a12:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a14:	6806      	ldr	r6, [r0, #0]
 8001a16:	46b3      	mov	fp, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a18:	005e      	lsls	r6, r3, #1
 8001a1a:	40b7      	lsls	r7, r6
 8001a1c:	46bc      	mov	ip, r7
 8001a1e:	43ff      	mvns	r7, r7
 8001a20:	4661      	mov	r1, ip
 8001a22:	46ba      	mov	sl, r7
 8001a24:	465f      	mov	r7, fp
 8001a26:	438f      	bics	r7, r1
 8001a28:	46bb      	mov	fp, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2a:	2703      	movs	r7, #3
 8001a2c:	4017      	ands	r7, r2
 8001a2e:	40b7      	lsls	r7, r6
 8001a30:	46bc      	mov	ip, r7
 8001a32:	465f      	mov	r7, fp
 8001a34:	4661      	mov	r1, ip
 8001a36:	430f      	orrs	r7, r1
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a38:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER = temp;
 8001a3a:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	3901      	subs	r1, #1
 8001a3e:	2901      	cmp	r1, #1
 8001a40:	d800      	bhi.n	8001a44 <HAL_GPIO_Init+0x70>
 8001a42:	e083      	b.n	8001b4c <HAL_GPIO_Init+0x178>
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a44:	4651      	mov	r1, sl
      temp = GPIOx->PUPDR;
 8001a46:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a48:	400c      	ands	r4, r1
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	6889      	ldr	r1, [r1, #8]
 8001a4e:	40b1      	lsls	r1, r6
 8001a50:	4321      	orrs	r1, r4
      GPIOx->PUPDR = temp;
 8001a52:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0549      	lsls	r1, r1, #21
 8001a58:	420a      	tst	r2, r1
 8001a5a:	d044      	beq.n	8001ae6 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	2401      	movs	r4, #1
 8001a60:	464e      	mov	r6, r9
 8001a62:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a64:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4321      	orrs	r1, r4
 8001a68:	61b1      	str	r1, [r6, #24]
 8001a6a:	69b1      	ldr	r1, [r6, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6c:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	4021      	ands	r1, r4
 8001a70:	4c52      	ldr	r4, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x1e8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a72:	401e      	ands	r6, r3
 8001a74:	46a4      	mov	ip, r4
 8001a76:	00b6      	lsls	r6, r6, #2
 8001a78:	40b7      	lsls	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	9103      	str	r1, [sp, #12]
 8001a7c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7e:	0899      	lsrs	r1, r3, #2
 8001a80:	0089      	lsls	r1, r1, #2
 8001a82:	4461      	add	r1, ip
 8001a84:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a86:	43bc      	bics	r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a88:	2790      	movs	r7, #144	; 0x90
 8001a8a:	05ff      	lsls	r7, r7, #23
 8001a8c:	42b8      	cmp	r0, r7
 8001a8e:	d00e      	beq.n	8001aae <HAL_GPIO_Init+0xda>
 8001a90:	4f4b      	ldr	r7, [pc, #300]	; (8001bc0 <HAL_GPIO_Init+0x1ec>)
 8001a92:	42b8      	cmp	r0, r7
 8001a94:	d100      	bne.n	8001a98 <HAL_GPIO_Init+0xc4>
 8001a96:	e086      	b.n	8001ba6 <HAL_GPIO_Init+0x1d2>
 8001a98:	4f4a      	ldr	r7, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x1f0>)
 8001a9a:	42b8      	cmp	r0, r7
 8001a9c:	d100      	bne.n	8001aa0 <HAL_GPIO_Init+0xcc>
 8001a9e:	e086      	b.n	8001bae <HAL_GPIO_Init+0x1da>
 8001aa0:	4f49      	ldr	r7, [pc, #292]	; (8001bc8 <HAL_GPIO_Init+0x1f4>)
 8001aa2:	42b8      	cmp	r0, r7
 8001aa4:	d100      	bne.n	8001aa8 <HAL_GPIO_Init+0xd4>
 8001aa6:	e07a      	b.n	8001b9e <HAL_GPIO_Init+0x1ca>
 8001aa8:	2705      	movs	r7, #5
 8001aaa:	40b7      	lsls	r7, r6
 8001aac:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aae:	608c      	str	r4, [r1, #8]
        temp = EXTI->IMR;
 8001ab0:	4946      	ldr	r1, [pc, #280]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001ab2:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8001ab4:	6809      	ldr	r1, [r1, #0]
        temp &= ~(iocurrent);
 8001ab6:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	03d6      	lsls	r6, r2, #15
 8001aba:	d457      	bmi.n	8001b6c <HAL_GPIO_Init+0x198>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001abc:	4e43      	ldr	r6, [pc, #268]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001abe:	4021      	ands	r1, r4
        EXTI->IMR = temp;
 8001ac0:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8001ac2:	6871      	ldr	r1, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	0396      	lsls	r6, r2, #14
 8001ac6:	d458      	bmi.n	8001b7a <HAL_GPIO_Init+0x1a6>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001ac8:	4e40      	ldr	r6, [pc, #256]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001aca:	4021      	ands	r1, r4
        EXTI->EMR = temp;
 8001acc:	6071      	str	r1, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	68b1      	ldr	r1, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad0:	02d6      	lsls	r6, r2, #11
 8001ad2:	d459      	bmi.n	8001b88 <HAL_GPIO_Init+0x1b4>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001ad4:	4e3d      	ldr	r6, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001ad6:	4021      	ands	r1, r4
        EXTI->RTSR = temp;
 8001ad8:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001ada:	68f1      	ldr	r1, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	0292      	lsls	r2, r2, #10
 8001ade:	d45a      	bmi.n	8001b96 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8001ae0:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
 8001ae4:	60d1      	str	r1, [r2, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	002a      	movs	r2, r5
      }
    }

    position++;
 8001ae8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	40da      	lsrs	r2, r3
 8001aec:	d181      	bne.n	80019f2 <HAL_GPIO_Init+0x1e>
  } 
}
 8001aee:	b005      	add	sp, #20
 8001af0:	bcf0      	pop	{r4, r5, r6, r7}
 8001af2:	46bb      	mov	fp, r7
 8001af4:	46b2      	mov	sl, r6
 8001af6:	46a9      	mov	r9, r5
 8001af8:	46a0      	mov	r8, r4
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3u];
 8001afc:	08d9      	lsrs	r1, r3, #3
 8001afe:	0089      	lsls	r1, r1, #2
 8001b00:	468b      	mov	fp, r1
 8001b02:	4483      	add	fp, r0
 8001b04:	4659      	mov	r1, fp
 8001b06:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b08:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3u];
 8001b0a:	46b4      	mov	ip, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0c:	2607      	movs	r6, #7
 8001b0e:	401e      	ands	r6, r3
 8001b10:	00b6      	lsls	r6, r6, #2
 8001b12:	40b7      	lsls	r7, r6
 8001b14:	46ba      	mov	sl, r7
 8001b16:	4667      	mov	r7, ip
 8001b18:	4651      	mov	r1, sl
 8001b1a:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b1c:	4641      	mov	r1, r8
 8001b1e:	6909      	ldr	r1, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	46bc      	mov	ip, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b22:	000f      	movs	r7, r1
 8001b24:	40b7      	lsls	r7, r6
 8001b26:	4661      	mov	r1, ip
 8001b28:	003e      	movs	r6, r7
 8001b2a:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	620e      	str	r6, [r1, #32]
      temp = GPIOx->MODER;
 8001b30:	6801      	ldr	r1, [r0, #0]
 8001b32:	005e      	lsls	r6, r3, #1
 8001b34:	468c      	mov	ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b36:	2103      	movs	r1, #3
 8001b38:	40b1      	lsls	r1, r6
 8001b3a:	43cf      	mvns	r7, r1
 8001b3c:	46ba      	mov	sl, r7
 8001b3e:	4667      	mov	r7, ip
 8001b40:	438f      	bics	r7, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b42:	2103      	movs	r1, #3
 8001b44:	4011      	ands	r1, r2
 8001b46:	40b1      	lsls	r1, r6
 8001b48:	4339      	orrs	r1, r7
      GPIOx->MODER = temp;
 8001b4a:	6001      	str	r1, [r0, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b4c:	4657      	mov	r7, sl
        temp = GPIOx->OSPEEDR;
 8001b4e:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b50:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b52:	4641      	mov	r1, r8
 8001b54:	68c9      	ldr	r1, [r1, #12]
 8001b56:	40b1      	lsls	r1, r6
 8001b58:	4339      	orrs	r1, r7
        GPIOx->OSPEEDR = temp;
 8001b5a:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b5c:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5e:	43a1      	bics	r1, r4
 8001b60:	000c      	movs	r4, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b62:	0911      	lsrs	r1, r2, #4
 8001b64:	4099      	lsls	r1, r3
 8001b66:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8001b68:	6041      	str	r1, [r0, #4]
 8001b6a:	e76b      	b.n	8001a44 <HAL_GPIO_Init+0x70>
          temp |= iocurrent;
 8001b6c:	9e00      	ldr	r6, [sp, #0]
 8001b6e:	4331      	orrs	r1, r6
        EXTI->IMR = temp;
 8001b70:	4e16      	ldr	r6, [pc, #88]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
 8001b72:	6031      	str	r1, [r6, #0]
        temp = EXTI->EMR;
 8001b74:	6871      	ldr	r1, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b76:	0396      	lsls	r6, r2, #14
 8001b78:	d5a6      	bpl.n	8001ac8 <HAL_GPIO_Init+0xf4>
          temp |= iocurrent;
 8001b7a:	9e00      	ldr	r6, [sp, #0]
 8001b7c:	4331      	orrs	r1, r6
        EXTI->EMR = temp;
 8001b7e:	4e13      	ldr	r6, [pc, #76]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
 8001b80:	6071      	str	r1, [r6, #4]
        temp = EXTI->RTSR;
 8001b82:	68b1      	ldr	r1, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b84:	02d6      	lsls	r6, r2, #11
 8001b86:	d5a5      	bpl.n	8001ad4 <HAL_GPIO_Init+0x100>
          temp |= iocurrent;
 8001b88:	9e00      	ldr	r6, [sp, #0]
 8001b8a:	4331      	orrs	r1, r6
        EXTI->RTSR = temp;
 8001b8c:	4e0f      	ldr	r6, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x1f8>)
 8001b8e:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 8001b90:	68f1      	ldr	r1, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b92:	0292      	lsls	r2, r2, #10
 8001b94:	d5a4      	bpl.n	8001ae0 <HAL_GPIO_Init+0x10c>
          temp |= iocurrent;
 8001b96:	9a00      	ldr	r2, [sp, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	e7a1      	b.n	8001ae2 <HAL_GPIO_Init+0x10e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b9e:	2703      	movs	r7, #3
 8001ba0:	40b7      	lsls	r7, r6
 8001ba2:	433c      	orrs	r4, r7
 8001ba4:	e783      	b.n	8001aae <HAL_GPIO_Init+0xda>
 8001ba6:	2701      	movs	r7, #1
 8001ba8:	40b7      	lsls	r7, r6
 8001baa:	433c      	orrs	r4, r7
 8001bac:	e77f      	b.n	8001aae <HAL_GPIO_Init+0xda>
 8001bae:	2702      	movs	r7, #2
 8001bb0:	40b7      	lsls	r7, r6
 8001bb2:	433c      	orrs	r4, r7
 8001bb4:	e77b      	b.n	8001aae <HAL_GPIO_Init+0xda>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001bda:	e7fc      	b.n	8001bd6 <HAL_GPIO_WritePin+0x6>

08001bdc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001bdc:	6943      	ldr	r3, [r0, #20]
 8001bde:	4219      	tst	r1, r3
 8001be0:	d002      	beq.n	8001be8 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001be2:	0409      	lsls	r1, r1, #16
 8001be4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001be6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be8:	6181      	str	r1, [r0, #24]
}
 8001bea:	e7fc      	b.n	8001be6 <HAL_GPIO_TogglePin+0xa>

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	46ce      	mov	lr, r9
 8001bf0:	4647      	mov	r7, r8
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
 8001bfc:	e0ee      	b.n	8001ddc <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfe:	6803      	ldr	r3, [r0, #0]
 8001c00:	07da      	lsls	r2, r3, #31
 8001c02:	d535      	bpl.n	8001c70 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c04:	210c      	movs	r1, #12
 8001c06:	48c3      	ldr	r0, [pc, #780]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001c08:	6842      	ldr	r2, [r0, #4]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	2a04      	cmp	r2, #4
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCC_OscConfig+0x26>
 8001c10:	e101      	b.n	8001e16 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c12:	6842      	ldr	r2, [r0, #4]
 8001c14:	4011      	ands	r1, r2
 8001c16:	2908      	cmp	r1, #8
 8001c18:	d100      	bne.n	8001c1c <HAL_RCC_OscConfig+0x30>
 8001c1a:	e0f8      	b.n	8001e0e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d00f      	beq.n	8001c42 <HAL_RCC_OscConfig+0x56>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d100      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c>
 8001c26:	e11e      	b.n	8001e66 <HAL_RCC_OscConfig+0x27a>
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d100      	bne.n	8001c2e <HAL_RCC_OscConfig+0x42>
 8001c2c:	e1a7      	b.n	8001f7e <HAL_RCC_OscConfig+0x392>
 8001c2e:	4bb9      	ldr	r3, [pc, #740]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001c30:	49b9      	ldr	r1, [pc, #740]	; (8001f18 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	49b8      	ldr	r1, [pc, #736]	; (8001f1c <HAL_RCC_OscConfig+0x330>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e005      	b.n	8001c4e <HAL_RCC_OscConfig+0x62>
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	4ab3      	ldr	r2, [pc, #716]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	6811      	ldr	r1, [r2, #0]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fd5d 	bl	800170c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c54:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4faf      	ldr	r7, [pc, #700]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001c58:	02b6      	lsls	r6, r6, #10
 8001c5a:	e005      	b.n	8001c68 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fd56 	bl	800170c <HAL_GetTick>
 8001c60:	1b40      	subs	r0, r0, r5
 8001c62:	2864      	cmp	r0, #100	; 0x64
 8001c64:	d900      	bls.n	8001c68 <HAL_RCC_OscConfig+0x7c>
 8001c66:	e0fc      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4233      	tst	r3, r6
 8001c6c:	d0f6      	beq.n	8001c5c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	079a      	lsls	r2, r3, #30
 8001c72:	d529      	bpl.n	8001cc8 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c74:	220c      	movs	r2, #12
 8001c76:	49a7      	ldr	r1, [pc, #668]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001c78:	6848      	ldr	r0, [r1, #4]
 8001c7a:	4202      	tst	r2, r0
 8001c7c:	d100      	bne.n	8001c80 <HAL_RCC_OscConfig+0x94>
 8001c7e:	e0a6      	b.n	8001dce <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c80:	6848      	ldr	r0, [r1, #4]
 8001c82:	4002      	ands	r2, r0
 8001c84:	2a08      	cmp	r2, #8
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x9e>
 8001c88:	e09d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4da1      	ldr	r5, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d100      	bne.n	8001c94 <HAL_RCC_OscConfig+0xa8>
 8001c92:	e11f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001c94:	2201      	movs	r2, #1
 8001c96:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fd35 	bl	800170c <HAL_GetTick>
 8001ca2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e005      	b.n	8001cb2 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fd31 	bl	800170c <HAL_GetTick>
 8001caa:	1b80      	subs	r0, r0, r6
 8001cac:	2802      	cmp	r0, #2
 8001cae:	d900      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xc6>
 8001cb0:	e0d7      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	421f      	tst	r7, r3
 8001cb6:	d0f6      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	21f8      	movs	r1, #248	; 0xf8
 8001cba:	682a      	ldr	r2, [r5, #0]
 8001cbc:	6923      	ldr	r3, [r4, #16]
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	071a      	lsls	r2, r3, #28
 8001cca:	d42d      	bmi.n	8001d28 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	075a      	lsls	r2, r3, #29
 8001cce:	d544      	bpl.n	8001d5a <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd4:	4b8f      	ldr	r3, [pc, #572]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001cd6:	0552      	lsls	r2, r2, #21
 8001cd8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4211      	tst	r1, r2
 8001cde:	d108      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	4311      	orrs	r1, r2
 8001ce4:	61d9      	str	r1, [r3, #28]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	2780      	movs	r7, #128	; 0x80
 8001cf4:	4e8a      	ldr	r6, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x334>)
 8001cf6:	007f      	lsls	r7, r7, #1
 8001cf8:	6833      	ldr	r3, [r6, #0]
 8001cfa:	423b      	tst	r3, r7
 8001cfc:	d100      	bne.n	8001d00 <HAL_RCC_OscConfig+0x114>
 8001cfe:	e094      	b.n	8001e2a <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	68a3      	ldr	r3, [r4, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d100      	bne.n	8001d08 <HAL_RCC_OscConfig+0x11c>
 8001d06:	e0f8      	b.n	8001efa <HAL_RCC_OscConfig+0x30e>
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x122>
 8001d0c:	e0c4      	b.n	8001e98 <HAL_RCC_OscConfig+0x2ac>
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d100      	bne.n	8001d14 <HAL_RCC_OscConfig+0x128>
 8001d12:	e140      	b.n	8001f96 <HAL_RCC_OscConfig+0x3aa>
 8001d14:	2101      	movs	r1, #1
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	621a      	str	r2, [r3, #32]
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	3103      	adds	r1, #3
 8001d22:	438a      	bics	r2, r1
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	e0ec      	b.n	8001f02 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d28:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4d7a      	ldr	r5, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d34:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4313      	orrs	r3, r2
 8001d38:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fce7 	bl	800170c <HAL_GetTick>
 8001d3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d40:	e005      	b.n	8001d4e <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff fce3 	bl	800170c <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d900      	bls.n	8001d4e <HAL_RCC_OscConfig+0x162>
 8001d4c:	e089      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d50:	421f      	tst	r7, r3
 8001d52:	d0f6      	beq.n	8001d42 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	075a      	lsls	r2, r3, #29
 8001d58:	d4ba      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d5a:	06db      	lsls	r3, r3, #27
 8001d5c:	d512      	bpl.n	8001d84 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d5e:	6963      	ldr	r3, [r4, #20]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x17a>
 8001d64:	e13d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d66:	3305      	adds	r3, #5
 8001d68:	d000      	beq.n	8001d6c <HAL_RCC_OscConfig+0x180>
 8001d6a:	e0e9      	b.n	8001f40 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d6c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d6e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d70:	4a68      	ldr	r2, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001d72:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d74:	438b      	bics	r3, r1
 8001d76:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d78:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001d7a:	69a3      	ldr	r3, [r4, #24]
 8001d7c:	4381      	bics	r1, r0
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	6a23      	ldr	r3, [r4, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	4d61      	ldr	r5, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001d8e:	6869      	ldr	r1, [r5, #4]
 8001d90:	400a      	ands	r2, r1
 8001d92:	2a08      	cmp	r2, #8
 8001d94:	d100      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1ac>
 8001d96:	e108      	b.n	8001faa <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1b2>
 8001d9c:	e13f      	b.n	800201e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4013      	ands	r3, r2
 8001da6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001da8:	f7ff fcb0 	bl	800170c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001dae:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fcab 	bl	800170c <HAL_GetTick>
 8001db6:	1b00      	subs	r0, r0, r4
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d852      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	4233      	tst	r3, r6
 8001dc0:	d1f7      	bne.n	8001db2 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dc6:	684a      	ldr	r2, [r1, #4]
 8001dc8:	03d2      	lsls	r2, r2, #15
 8001dca:	d500      	bpl.n	8001dce <HAL_RCC_OscConfig+0x1e2>
 8001dcc:	e75d      	b.n	8001c8a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	0792      	lsls	r2, r2, #30
 8001dd4:	d539      	bpl.n	8001e4a <HAL_RCC_OscConfig+0x25e>
 8001dd6:	68e2      	ldr	r2, [r4, #12]
 8001dd8:	2a01      	cmp	r2, #1
 8001dda:	d036      	beq.n	8001e4a <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8001ddc:	2001      	movs	r0, #1
}
 8001dde:	b003      	add	sp, #12
 8001de0:	bcc0      	pop	{r6, r7}
 8001de2:	46b9      	mov	r9, r7
 8001de4:	46b0      	mov	r8, r6
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4393      	bics	r3, r2
 8001df0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001df2:	f7ff fc8b 	bl	800170c <HAL_GetTick>
 8001df6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e004      	b.n	8001e04 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fc87 	bl	800170c <HAL_GetTick>
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d82e      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e06:	421f      	tst	r7, r3
 8001e08:	d1f7      	bne.n	8001dfa <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	e7a3      	b.n	8001d56 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0e:	6842      	ldr	r2, [r0, #4]
 8001e10:	03d2      	lsls	r2, r2, #15
 8001e12:	d400      	bmi.n	8001e16 <HAL_RCC_OscConfig+0x22a>
 8001e14:	e702      	b.n	8001c1c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	0392      	lsls	r2, r2, #14
 8001e1c:	d400      	bmi.n	8001e20 <HAL_RCC_OscConfig+0x234>
 8001e1e:	e727      	b.n	8001c70 <HAL_RCC_OscConfig+0x84>
 8001e20:	6862      	ldr	r2, [r4, #4]
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d000      	beq.n	8001e28 <HAL_RCC_OscConfig+0x23c>
 8001e26:	e723      	b.n	8001c70 <HAL_RCC_OscConfig+0x84>
 8001e28:	e7d8      	b.n	8001ddc <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	6833      	ldr	r3, [r6, #0]
 8001e2c:	433b      	orrs	r3, r7
 8001e2e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e30:	f7ff fc6c 	bl	800170c <HAL_GetTick>
 8001e34:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	e004      	b.n	8001e42 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7ff fc68 	bl	800170c <HAL_GetTick>
 8001e3c:	1b40      	subs	r0, r0, r5
 8001e3e:	2864      	cmp	r0, #100	; 0x64
 8001e40:	d80f      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	6833      	ldr	r3, [r6, #0]
 8001e44:	423b      	tst	r3, r7
 8001e46:	d0f7      	beq.n	8001e38 <HAL_RCC_OscConfig+0x24c>
 8001e48:	e75a      	b.n	8001d00 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	25f8      	movs	r5, #248	; 0xf8
 8001e4c:	4831      	ldr	r0, [pc, #196]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001e4e:	6922      	ldr	r2, [r4, #16]
 8001e50:	6801      	ldr	r1, [r0, #0]
 8001e52:	00d2      	lsls	r2, r2, #3
 8001e54:	43a9      	bics	r1, r5
 8001e56:	430a      	orrs	r2, r1
 8001e58:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	071a      	lsls	r2, r3, #28
 8001e5c:	d400      	bmi.n	8001e60 <HAL_RCC_OscConfig+0x274>
 8001e5e:	e735      	b.n	8001ccc <HAL_RCC_OscConfig+0xe0>
 8001e60:	e762      	b.n	8001d28 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8001e62:	2003      	movs	r0, #3
 8001e64:	e7bb      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	4d2b      	ldr	r5, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	4013      	ands	r3, r2
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	4013      	ands	r3, r2
 8001e7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc46 	bl	800170c <HAL_GetTick>
 8001e80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e004      	b.n	8001e8e <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fc42 	bl	800170c <HAL_GetTick>
 8001e88:	1b80      	subs	r0, r0, r6
 8001e8a:	2864      	cmp	r0, #100	; 0x64
 8001e8c:	d8e9      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	682b      	ldr	r3, [r5, #0]
 8001e90:	423b      	tst	r3, r7
 8001e92:	d1f7      	bne.n	8001e84 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	e6eb      	b.n	8001c70 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4e1e      	ldr	r6, [pc, #120]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	4d22      	ldr	r5, [pc, #136]	; (8001f28 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	6a33      	ldr	r3, [r6, #32]
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	6233      	str	r3, [r6, #32]
 8001ea4:	6a33      	ldr	r3, [r6, #32]
 8001ea6:	3203      	adds	r2, #3
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001eac:	f7ff fc2e 	bl	800170c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001eb2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	4698      	mov	r8, r3
 8001eb6:	e004      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fc28 	bl	800170c <HAL_GetTick>
 8001ebc:	1bc0      	subs	r0, r0, r7
 8001ebe:	42a8      	cmp	r0, r5
 8001ec0:	d8cf      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	4642      	mov	r2, r8
 8001ec4:	6a33      	ldr	r3, [r6, #32]
 8001ec6:	421a      	tst	r2, r3
 8001ec8:	d1f6      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8001eca:	464b      	mov	r3, r9
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d04f      	beq.n	8001f70 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	e742      	b.n	8001d5a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4393      	bics	r3, r2
 8001edc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ede:	f7ff fc15 	bl	800170c <HAL_GetTick>
 8001ee2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee4:	e004      	b.n	8001ef0 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fc11 	bl	800170c <HAL_GetTick>
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d8b8      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	421f      	tst	r7, r3
 8001ef4:	d1f7      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	e6e6      	b.n	8001cc8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efa:	4906      	ldr	r1, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
 8001efc:	6a0a      	ldr	r2, [r1, #32]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001f02:	f7ff fc03 	bl	800170c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8001f08:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	4d06      	ldr	r5, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e011      	b.n	8001f36 <HAL_RCC_OscConfig+0x34a>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffeffff 	.word	0xfffeffff
 8001f1c:	fffbffff 	.word	0xfffbffff
 8001f20:	40007000 	.word	0x40007000
 8001f24:	feffffff 	.word	0xfeffffff
 8001f28:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fbee 	bl	800170c <HAL_GetTick>
 8001f30:	1b80      	subs	r0, r0, r6
 8001f32:	42a8      	cmp	r0, r5
 8001f34:	d895      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	4643      	mov	r3, r8
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	421f      	tst	r7, r3
 8001f3c:	d0f6      	beq.n	8001f2c <HAL_RCC_OscConfig+0x340>
 8001f3e:	e7c4      	b.n	8001eca <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f40:	2204      	movs	r2, #4
 8001f42:	4d53      	ldr	r5, [pc, #332]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f44:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f46:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001f4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f4e:	3a03      	subs	r2, #3
 8001f50:	4393      	bics	r3, r2
 8001f52:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001f54:	f7ff fbda 	bl	800170c <HAL_GetTick>
 8001f58:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f5c:	f7ff fbd6 	bl	800170c <HAL_GetTick>
 8001f60:	1b80      	subs	r0, r0, r6
 8001f62:	2802      	cmp	r0, #2
 8001f64:	d900      	bls.n	8001f68 <HAL_RCC_OscConfig+0x37c>
 8001f66:	e77c      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f6a:	421f      	tst	r7, r3
 8001f6c:	d1f6      	bne.n	8001f5c <HAL_RCC_OscConfig+0x370>
 8001f6e:	e709      	b.n	8001d84 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
 8001f72:	4948      	ldr	r1, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x4a8>)
 8001f74:	69d3      	ldr	r3, [r2, #28]
 8001f76:	400b      	ands	r3, r1
 8001f78:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	e6ed      	b.n	8001d5a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
 8001f82:	02d2      	lsls	r2, r2, #11
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	0252      	lsls	r2, r2, #9
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e65b      	b.n	8001c4e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f96:	2104      	movs	r1, #4
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	621a      	str	r2, [r3, #32]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	3903      	subs	r1, #3
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e7ab      	b.n	8001f02 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d100      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3c4>
 8001fae:	e715      	b.n	8001ddc <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001fb2:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fb6:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8001fba:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	d000      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x3d8>
 8001fc2:	e70c      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc4:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc8:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	428b      	cmp	r3, r1
 8001fcc:	d000      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x3e4>
 8001fce:	e706      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd0:	23f0      	movs	r3, #240	; 0xf0
 8001fd2:	039b      	lsls	r3, r3, #14
 8001fd4:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fd8:	1ad2      	subs	r2, r2, r3
 8001fda:	1e53      	subs	r3, r2, #1
 8001fdc:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8001fde:	b2d0      	uxtb	r0, r2
 8001fe0:	e6fd      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	4d2a      	ldr	r5, [pc, #168]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fe6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fe8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fea:	430a      	orrs	r2, r1
 8001fec:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001fee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fb8a 	bl	800170c <HAL_GetTick>
 8001ff8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ffc:	f7ff fb86 	bl	800170c <HAL_GetTick>
 8002000:	1b80      	subs	r0, r0, r6
 8002002:	2802      	cmp	r0, #2
 8002004:	d900      	bls.n	8002008 <HAL_RCC_OscConfig+0x41c>
 8002006:	e72c      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002008:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800200a:	421f      	tst	r7, r3
 800200c:	d0f6      	beq.n	8001ffc <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800200e:	21f8      	movs	r1, #248	; 0xf8
 8002010:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002012:	69a3      	ldr	r3, [r4, #24]
 8002014:	438a      	bics	r2, r1
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4313      	orrs	r3, r2
 800201a:	636b      	str	r3, [r5, #52]	; 0x34
 800201c:	e6b2      	b.n	8001d84 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 800201e:	682b      	ldr	r3, [r5, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002024:	4013      	ands	r3, r2
 8002026:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002028:	f7ff fb70 	bl	800170c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800202e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	e005      	b.n	800203e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fb6b 	bl	800170c <HAL_GetTick>
 8002036:	1b80      	subs	r0, r0, r6
 8002038:	2802      	cmp	r0, #2
 800203a:	d900      	bls.n	800203e <HAL_RCC_OscConfig+0x452>
 800203c:	e711      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	423b      	tst	r3, r7
 8002042:	d1f6      	bne.n	8002032 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002044:	220f      	movs	r2, #15
 8002046:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4e11      	ldr	r6, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204a:	4393      	bics	r3, r2
 800204c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800204e:	4313      	orrs	r3, r2
 8002050:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002052:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002056:	686a      	ldr	r2, [r5, #4]
 8002058:	430b      	orrs	r3, r1
 800205a:	4910      	ldr	r1, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x4b0>)
 800205c:	400a      	ands	r2, r1
 800205e:	4313      	orrs	r3, r2
 8002060:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	682a      	ldr	r2, [r5, #0]
 8002066:	045b      	lsls	r3, r3, #17
 8002068:	4313      	orrs	r3, r2
 800206a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800206c:	f7ff fb4e 	bl	800170c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002072:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002074:	04ad      	lsls	r5, r5, #18
 8002076:	e005      	b.n	8002084 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff fb48 	bl	800170c <HAL_GetTick>
 800207c:	1b00      	subs	r0, r0, r4
 800207e:	2802      	cmp	r0, #2
 8002080:	d900      	bls.n	8002084 <HAL_RCC_OscConfig+0x498>
 8002082:	e6ee      	b.n	8001e62 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	6833      	ldr	r3, [r6, #0]
 8002086:	422b      	tst	r3, r5
 8002088:	d0f6      	beq.n	8002078 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 800208a:	2000      	movs	r0, #0
 800208c:	e6a7      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	efffffff 	.word	0xefffffff
 8002098:	feffffff 	.word	0xfeffffff
 800209c:	ffc2ffff 	.word	0xffc2ffff

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	46ce      	mov	lr, r9
 80020a4:	4647      	mov	r7, r8
 80020a6:	b580      	push	{r7, lr}
 80020a8:	0004      	movs	r4, r0
 80020aa:	000d      	movs	r5, r1
 80020ac:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b2:	2301      	movs	r3, #1
 80020b4:	4950      	ldr	r1, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x158>)
 80020b6:	680a      	ldr	r2, [r1, #0]
 80020b8:	401a      	ands	r2, r3
 80020ba:	42aa      	cmp	r2, r5
 80020bc:	d20d      	bcs.n	80020da <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	680a      	ldr	r2, [r1, #0]
 80020c0:	439a      	bics	r2, r3
 80020c2:	432a      	orrs	r2, r5
 80020c4:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	680a      	ldr	r2, [r1, #0]
 80020c8:	4013      	ands	r3, r2
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	d005      	beq.n	80020da <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80020d0:	b009      	add	sp, #36	; 0x24
 80020d2:	bcc0      	pop	{r6, r7}
 80020d4:	46b9      	mov	r9, r7
 80020d6:	46b0      	mov	r8, r6
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	079a      	lsls	r2, r3, #30
 80020de:	d50e      	bpl.n	80020fe <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	075a      	lsls	r2, r3, #29
 80020e2:	d505      	bpl.n	80020f0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020e4:	22e0      	movs	r2, #224	; 0xe0
 80020e6:	4945      	ldr	r1, [pc, #276]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
 80020e8:	00d2      	lsls	r2, r2, #3
 80020ea:	6848      	ldr	r0, [r1, #4]
 80020ec:	4302      	orrs	r2, r0
 80020ee:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	20f0      	movs	r0, #240	; 0xf0
 80020f2:	4942      	ldr	r1, [pc, #264]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
 80020f4:	684a      	ldr	r2, [r1, #4]
 80020f6:	4382      	bics	r2, r0
 80020f8:	68a0      	ldr	r0, [r4, #8]
 80020fa:	4302      	orrs	r2, r0
 80020fc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	07db      	lsls	r3, r3, #31
 8002100:	d522      	bpl.n	8002148 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002104:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	2a01      	cmp	r2, #1
 800210a:	d067      	beq.n	80021dc <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210c:	2a02      	cmp	r2, #2
 800210e:	d062      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	079b      	lsls	r3, r3, #30
 8002112:	d5dc      	bpl.n	80020ce <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002114:	2103      	movs	r1, #3
 8002116:	4e39      	ldr	r6, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
 8002118:	6873      	ldr	r3, [r6, #4]
 800211a:	438b      	bics	r3, r1
 800211c:	4313      	orrs	r3, r2
 800211e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002120:	f7ff faf4 	bl	800170c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002124:	230c      	movs	r3, #12
 8002126:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 800212a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e004      	b.n	800213a <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff faec 	bl	800170c <HAL_GetTick>
 8002134:	1bc0      	subs	r0, r0, r7
 8002136:	4548      	cmp	r0, r9
 8002138:	d853      	bhi.n	80021e2 <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4643      	mov	r3, r8
 800213c:	6872      	ldr	r2, [r6, #4]
 800213e:	401a      	ands	r2, r3
 8002140:	6863      	ldr	r3, [r4, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1f3      	bne.n	8002130 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	2101      	movs	r1, #1
 800214a:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x158>)
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	400b      	ands	r3, r1
 8002150:	42ab      	cmp	r3, r5
 8002152:	d905      	bls.n	8002160 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	438b      	bics	r3, r1
 8002158:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	4219      	tst	r1, r3
 800215e:	d1b6      	bne.n	80020ce <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	075b      	lsls	r3, r3, #29
 8002164:	d506      	bpl.n	8002174 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
 8002168:	4926      	ldr	r1, [pc, #152]	; (8002204 <HAL_RCC_ClockConfig+0x164>)
 800216a:	6853      	ldr	r3, [r2, #4]
 800216c:	400b      	ands	r3, r1
 800216e:	68e1      	ldr	r1, [r4, #12]
 8002170:	430b      	orrs	r3, r1
 8002172:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002174:	466a      	mov	r2, sp
 8002176:	0011      	movs	r1, r2
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_ClockConfig+0x168>)
 800217a:	cb31      	ldmia	r3!, {r0, r4, r5}
 800217c:	c131      	stmia	r1!, {r0, r4, r5}
 800217e:	681b      	ldr	r3, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002180:	a804      	add	r0, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002182:	600b      	str	r3, [r1, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002184:	0001      	movs	r1, r0
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_ClockConfig+0x16c>)
 8002188:	cb70      	ldmia	r3!, {r4, r5, r6}
 800218a:	c170      	stmia	r1!, {r4, r5, r6}
 800218c:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800218e:	4c1b      	ldr	r4, [pc, #108]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002190:	600b      	str	r3, [r1, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002192:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002194:	6861      	ldr	r1, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002196:	400b      	ands	r3, r1
 8002198:	2b08      	cmp	r3, #8
 800219a:	d00e      	beq.n	80021ba <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219c:	481c      	ldr	r0, [pc, #112]	; (8002210 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_ClockConfig+0x15c>)
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_RCC_ClockConfig+0x174>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	491c      	ldr	r1, [pc, #112]	; (8002218 <HAL_RCC_ClockConfig+0x178>)
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	0f1b      	lsrs	r3, r3, #28
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f7ff fa69 	bl	8001688 <HAL_InitTick>
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
 80021b8:	e78a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021ba:	260f      	movs	r6, #15
 80021bc:	0c8b      	lsrs	r3, r1, #18
 80021be:	4033      	ands	r3, r6
 80021c0:	5cd5      	ldrb	r5, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021c4:	03c9      	lsls	r1, r1, #15
 80021c6:	d50e      	bpl.n	80021e6 <HAL_RCC_ClockConfig+0x146>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021c8:	401e      	ands	r6, r3
 80021ca:	5d81      	ldrb	r1, [r0, r6]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <HAL_RCC_ClockConfig+0x170>)
 80021ce:	f7fd ffa5 	bl	800011c <__udivsi3>
 80021d2:	4368      	muls	r0, r5
 80021d4:	e7e3      	b.n	800219e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	019b      	lsls	r3, r3, #6
 80021d8:	d49c      	bmi.n	8002114 <HAL_RCC_ClockConfig+0x74>
 80021da:	e778      	b.n	80020ce <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	039b      	lsls	r3, r3, #14
 80021de:	d499      	bmi.n	8002114 <HAL_RCC_ClockConfig+0x74>
 80021e0:	e775      	b.n	80020ce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80021e2:	2003      	movs	r0, #3
 80021e4:	e774      	b.n	80020d0 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021e6:	016b      	lsls	r3, r5, #5
 80021e8:	1b5b      	subs	r3, r3, r5
 80021ea:	0198      	lsls	r0, r3, #6
 80021ec:	1ac0      	subs	r0, r0, r3
 80021ee:	00c0      	lsls	r0, r0, #3
 80021f0:	1940      	adds	r0, r0, r5
 80021f2:	0200      	lsls	r0, r0, #8
 80021f4:	e7d3      	b.n	800219e <HAL_RCC_ClockConfig+0xfe>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	00001388 	.word	0x00001388
 8002204:	fffff8ff 	.word	0xfffff8ff
 8002208:	080039c8 	.word	0x080039c8
 800220c:	080039dc 	.word	0x080039dc
 8002210:	007a1200 	.word	0x007a1200
 8002214:	080039b0 	.word	0x080039b0
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetSysClockFreq>:
{
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002220:	466a      	mov	r2, sp
 8002222:	0011      	movs	r1, r2
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_RCC_GetSysClockFreq+0x60>)
 8002226:	cb31      	ldmia	r3!, {r0, r4, r5}
 8002228:	c131      	stmia	r1!, {r0, r4, r5}
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	600b      	str	r3, [r1, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800222e:	a904      	add	r1, sp, #16
 8002230:	0008      	movs	r0, r1
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_GetSysClockFreq+0x64>)
 8002234:	cb70      	ldmia	r3!, {r4, r5, r6}
 8002236:	c070      	stmia	r0!, {r4, r5, r6}
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_RCC_GetSysClockFreq+0x68>)
 8002240:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002242:	4023      	ands	r3, r4
 8002244:	2b08      	cmp	r3, #8
 8002246:	d002      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 8002248:	480f      	ldr	r0, [pc, #60]	; (8002288 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800224a:	b008      	add	sp, #32
 800224c:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800224e:	260f      	movs	r6, #15
 8002250:	0ca3      	lsrs	r3, r4, #18
 8002252:	4033      	ands	r3, r6
 8002254:	5cd5      	ldrb	r5, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002258:	03e4      	lsls	r4, r4, #15
 800225a:	d506      	bpl.n	800226a <HAL_RCC_GetSysClockFreq+0x4e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800225c:	401e      	ands	r6, r3
 800225e:	5d89      	ldrb	r1, [r1, r6]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002262:	f7fd ff5b 	bl	800011c <__udivsi3>
 8002266:	4368      	muls	r0, r5
 8002268:	e7ef      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800226a:	016a      	lsls	r2, r5, #5
 800226c:	1b52      	subs	r2, r2, r5
 800226e:	0193      	lsls	r3, r2, #6
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	195b      	adds	r3, r3, r5
 8002276:	0218      	lsls	r0, r3, #8
 8002278:	e7e7      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x2e>
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	080039c8 	.word	0x080039c8
 8002280:	080039dc 	.word	0x080039dc
 8002284:	40021000 	.word	0x40021000
 8002288:	007a1200 	.word	0x007a1200

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4905      	ldr	r1, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002294:	055b      	lsls	r3, r3, #21
 8002296:	0f5b      	lsrs	r3, r3, #29
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	6810      	ldr	r0, [r2, #0]
 800229c:	40d8      	lsrs	r0, r3
}    
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	080039c0 	.word	0x080039c0

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	46ce      	mov	lr, r9
 80022b0:	4647      	mov	r7, r8
 80022b2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b4:	6803      	ldr	r3, [r0, #0]
{
 80022b6:	0004      	movs	r4, r0
 80022b8:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ba:	03da      	lsls	r2, r3, #15
 80022bc:	d530      	bpl.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022c2:	0552      	lsls	r2, r2, #21
 80022c4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4211      	tst	r1, r2
 80022ca:	d041      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	2680      	movs	r6, #128	; 0x80
 80022ce:	4d41      	ldr	r5, [pc, #260]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80022d0:	0076      	lsls	r6, r6, #1
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	4233      	tst	r3, r6
 80022d6:	d049      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d8:	4d3d      	ldr	r5, [pc, #244]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	6a2a      	ldr	r2, [r5, #32]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	0010      	movs	r0, r2
 80022e2:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e4:	421a      	tst	r2, r3
 80022e6:	d063      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80022e8:	6861      	ldr	r1, [r4, #4]
 80022ea:	400b      	ands	r3, r1
 80022ec:	4283      	cmp	r3, r0
 80022ee:	d00e      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f2:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f4:	6a2e      	ldr	r6, [r5, #32]
 80022f6:	0240      	lsls	r0, r0, #9
 80022f8:	4330      	orrs	r0, r6
 80022fa:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fc:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022fe:	4a36      	ldr	r2, [pc, #216]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4e36      	ldr	r6, [pc, #216]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002302:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002304:	4030      	ands	r0, r6
 8002306:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002308:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800230a:	07db      	lsls	r3, r3, #31
 800230c:	d43f      	bmi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002310:	4831      	ldr	r0, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002312:	6a13      	ldr	r3, [r2, #32]
 8002314:	4003      	ands	r3, r0
 8002316:	430b      	orrs	r3, r1
 8002318:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800231a:	2f01      	cmp	r7, #1
 800231c:	d051      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	07da      	lsls	r2, r3, #31
 8002322:	d506      	bpl.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	2003      	movs	r0, #3
 8002326:	492a      	ldr	r1, [pc, #168]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002328:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800232a:	4382      	bics	r2, r0
 800232c:	68a0      	ldr	r0, [r4, #8]
 800232e:	4302      	orrs	r2, r0
 8002330:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002332:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002334:	069b      	lsls	r3, r3, #26
 8002336:	d506      	bpl.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002338:	2110      	movs	r1, #16
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800233c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800233e:	438b      	bics	r3, r1
 8002340:	68e1      	ldr	r1, [r4, #12]
 8002342:	430b      	orrs	r3, r1
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002346:	b003      	add	sp, #12
 8002348:	bcc0      	pop	{r6, r7}
 800234a:	46b9      	mov	r9, r7
 800234c:	46b0      	mov	r8, r6
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4d1f      	ldr	r5, [pc, #124]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4311      	orrs	r1, r2
 8002358:	61d9      	str	r1, [r3, #28]
 800235a:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4013      	ands	r3, r2
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8002366:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4233      	tst	r3, r6
 800236a:	d1b5      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	4333      	orrs	r3, r6
 8002370:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002372:	f7ff f9cb 	bl	800170c <HAL_GetTick>
 8002376:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	4233      	tst	r3, r6
 800237c:	d1ac      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff f9c5 	bl	800170c <HAL_GetTick>
 8002382:	4643      	mov	r3, r8
 8002384:	1ac0      	subs	r0, r0, r3
 8002386:	2864      	cmp	r0, #100	; 0x64
 8002388:	d9f6      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800238a:	2003      	movs	r0, #3
 800238c:	e7db      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 800238e:	f7ff f9bd 	bl	800170c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	2302      	movs	r3, #2
 8002394:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8002398:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e004      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff f9b5 	bl	800170c <HAL_GetTick>
 80023a2:	1b80      	subs	r0, r0, r6
 80023a4:	4548      	cmp	r0, r9
 80023a6:	d8f0      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	4642      	mov	r2, r8
 80023aa:	6a2b      	ldr	r3, [r5, #32]
 80023ac:	421a      	tst	r2, r3
 80023ae:	d0f6      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80023b2:	4809      	ldr	r0, [pc, #36]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80023b4:	6a13      	ldr	r3, [r2, #32]
 80023b6:	6861      	ldr	r1, [r4, #4]
 80023b8:	4003      	ands	r3, r0
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 80023be:	2f01      	cmp	r7, #1
 80023c0:	d1ad      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	69d3      	ldr	r3, [r2, #28]
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	e7a8      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	fffffcff 	.word	0xfffffcff
 80023dc:	fffeffff 	.word	0xfffeffff
 80023e0:	00001388 	.word	0x00001388
 80023e4:	efffffff 	.word	0xefffffff

080023e8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	1e04      	subs	r4, r0, #0
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80023ec:	d04c      	beq.n	8002488 <HAL_RTC_Init+0xa0>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023ee:	7f43      	ldrb	r3, [r0, #29]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d05f      	beq.n	80024b6 <HAL_RTC_Init+0xce>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023f6:	2302      	movs	r3, #2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023f8:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023fa:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002400:	3a77      	subs	r2, #119	; 0x77
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	0652      	lsls	r2, r2, #25
 8002408:	d527      	bpl.n	800245a <HAL_RTC_Init+0x72>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	492c      	ldr	r1, [pc, #176]	; (80024c0 <HAL_RTC_Init+0xd8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800240e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002410:	400a      	ands	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002414:	6862      	ldr	r2, [r4, #4]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	4302      	orrs	r2, r0
 800241a:	6960      	ldr	r0, [r4, #20]
 800241c:	4302      	orrs	r2, r0
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002422:	68e2      	ldr	r2, [r4, #12]
 8002424:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002426:	68a2      	ldr	r2, [r4, #8]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	0412      	lsls	r2, r2, #16
 800242c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800242e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002430:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	438a      	bics	r2, r1
 8002436:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	0692      	lsls	r2, r2, #26
 800243c:	d526      	bpl.n	800248c <HAL_RTC_Init+0xa4>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800243e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002440:	4920      	ldr	r1, [pc, #128]	; (80024c4 <HAL_RTC_Init+0xdc>)
    return HAL_OK;
 8002442:	2000      	movs	r0, #0
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002444:	400a      	ands	r2, r1
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	69a1      	ldr	r1, [r4, #24]
 800244c:	430a      	orrs	r2, r1
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002458:	e017      	b.n	800248a <HAL_RTC_Init+0xa2>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800245a:	2201      	movs	r2, #1
 800245c:	4252      	negs	r2, r2
 800245e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002460:	f7ff f954 	bl	800170c <HAL_GetTick>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002464:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8002466:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002468:	2640      	movs	r6, #64	; 0x40
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800246a:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4216      	tst	r6, r2
 8002472:	d1ca      	bne.n	800240a <HAL_RTC_Init+0x22>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002474:	f7ff f94a 	bl	800170c <HAL_GetTick>
 8002478:	1b40      	subs	r0, r0, r5
 800247a:	42b8      	cmp	r0, r7
 800247c:	d9f6      	bls.n	800246c <HAL_RTC_Init+0x84>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002484:	2304      	movs	r3, #4
 8002486:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
}
 800248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	3120      	adds	r1, #32
 8002490:	438a      	bics	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8002494:	f7ff f93a 	bl	800170c <HAL_GetTick>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002498:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 800249a:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800249c:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800249e:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024a0:	e004      	b.n	80024ac <HAL_RTC_Init+0xc4>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024a2:	f7ff f933 	bl	800170c <HAL_GetTick>
 80024a6:	1b40      	subs	r0, r0, r5
 80024a8:	42b8      	cmp	r0, r7
 80024aa:	d8e8      	bhi.n	800247e <HAL_RTC_Init+0x96>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4216      	tst	r6, r2
 80024b2:	d0f6      	beq.n	80024a2 <HAL_RTC_Init+0xba>
 80024b4:	e7c3      	b.n	800243e <HAL_RTC_Init+0x56>
    hrtc->Lock = HAL_UNLOCKED;
 80024b6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80024b8:	f7fe ff7e 	bl	80013b8 <HAL_RTC_MspInit>
 80024bc:	e79b      	b.n	80023f6 <HAL_RTC_Init+0xe>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	ff8fffbf 	.word	0xff8fffbf
 80024c4:	fffbffff 	.word	0xfffbffff

080024c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024c8:	0013      	movs	r3, r2
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ca:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80024d0:	2a20      	cmp	r2, #32
 80024d2:	d135      	bne.n	8002540 <HAL_UART_Transmit_DMA+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	2900      	cmp	r1, #0
 80024d6:	d031      	beq.n	800253c <HAL_UART_Transmit_DMA+0x74>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02f      	beq.n	800253c <HAL_UART_Transmit_DMA+0x74>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	6880      	ldr	r0, [r0, #8]
 80024e0:	0152      	lsls	r2, r2, #5
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d025      	beq.n	8002532 <HAL_UART_Transmit_DMA+0x6a>
      {
        return  HAL_ERROR;
      }
    }

    __HAL_LOCK(huart);
 80024e6:	2570      	movs	r5, #112	; 0x70
 80024e8:	5d62      	ldrb	r2, [r4, r5]
 80024ea:	2a01      	cmp	r2, #1
 80024ec:	d028      	beq.n	8002540 <HAL_UART_Transmit_DMA+0x78>
 80024ee:	2201      	movs	r2, #1

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80024f2:	5562      	strb	r2, [r4, r5]
    huart->TxXferSize  = Size;
 80024f4:	324f      	adds	r2, #79	; 0x4f
    huart->pTxBuffPtr  = pData;
 80024f6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 80024f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferSize  = Size;
 80024fa:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80024fc:	3202      	adds	r2, #2
 80024fe:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002500:	3a31      	subs	r2, #49	; 0x31
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002504:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8002506:	2800      	cmp	r0, #0
 8002508:	d01c      	beq.n	8002544 <HAL_UART_Transmit_DMA+0x7c>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800250a:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_UART_Transmit_DMA+0x94>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800250c:	6346      	str	r6, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800250e:	6282      	str	r2, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_UART_Transmit_DMA+0x98>)
 8002512:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_UART_Transmit_DMA+0x9c>)
 8002516:	6302      	str	r2, [r0, #48]	; 0x30

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	3228      	adds	r2, #40	; 0x28
 800251c:	f7ff f9a8 	bl	8001870 <HAL_DMA_Start_IT>
 8002520:	2800      	cmp	r0, #0
 8002522:	d00f      	beq.n	8002544 <HAL_UART_Transmit_DMA+0x7c>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002524:	2310      	movs	r3, #16
 8002526:	67e3      	str	r3, [r4, #124]	; 0x7c

        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002528:	3310      	adds	r3, #16
        __HAL_UNLOCK(huart);
 800252a:	5566      	strb	r6, [r4, r5]

        return HAL_ERROR;
 800252c:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 800252e:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8002530:	e005      	b.n	800253e <HAL_UART_Transmit_DMA+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	6922      	ldr	r2, [r4, #16]
 8002534:	2a00      	cmp	r2, #0
 8002536:	d1d6      	bne.n	80024e6 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002538:	07ca      	lsls	r2, r1, #31
 800253a:	d5d4      	bpl.n	80024e6 <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800253e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002540:	2002      	movs	r0, #2
 8002542:	e7fc      	b.n	800253e <HAL_UART_Transmit_DMA+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002544:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8002546:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002548:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800254a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800254c:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800254e:	3230      	adds	r2, #48	; 0x30
 8002550:	54a1      	strb	r1, [r4, r2]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	3180      	adds	r1, #128	; 0x80
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800255a:	e7f0      	b.n	800253e <HAL_UART_Transmit_DMA+0x76>
 800255c:	08002619 	.word	0x08002619
 8002560:	08002645 	.word	0x08002645
 8002564:	080026a5 	.word	0x080026a5

08002568 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	0013      	movs	r3, r2
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800256c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800256e:	0004      	movs	r4, r0
 8002570:	000d      	movs	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8002572:	2a20      	cmp	r2, #32
 8002574:	d134      	bne.n	80025e0 <HAL_UART_Receive_DMA+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8002576:	2900      	cmp	r1, #0
 8002578:	d030      	beq.n	80025dc <HAL_UART_Receive_DMA+0x74>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02e      	beq.n	80025dc <HAL_UART_Receive_DMA+0x74>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	6881      	ldr	r1, [r0, #8]
 8002582:	0152      	lsls	r2, r2, #5
 8002584:	4291      	cmp	r1, r2
 8002586:	d024      	beq.n	80025d2 <HAL_UART_Receive_DMA+0x6a>
      {
        return  HAL_ERROR;
      }
    }

    __HAL_LOCK(huart);
 8002588:	2670      	movs	r6, #112	; 0x70
 800258a:	5da2      	ldrb	r2, [r4, r6]
 800258c:	2a01      	cmp	r2, #1
 800258e:	d027      	beq.n	80025e0 <HAL_UART_Receive_DMA+0x78>
 8002590:	2201      	movs	r2, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8002594:	55a2      	strb	r2, [r4, r6]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 8002596:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->RxXferSize = Size;
 8002598:	3257      	adds	r2, #87	; 0x57
    huart->pRxBuffPtr = pData;
 800259a:	6565      	str	r5, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 800259c:	52a3      	strh	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800259e:	3a36      	subs	r2, #54	; 0x36
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a0:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025a2:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d01d      	beq.n	80025e4 <HAL_UART_Receive_DMA+0x7c>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_UART_Receive_DMA+0xa4>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80025aa:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025ac:	6282      	str	r2, [r0, #40]	; 0x28
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_UART_Receive_DMA+0xa8>)
      huart->hdmarx->XferAbortCallback = NULL;
 80025b0:	6347      	str	r7, [r0, #52]	; 0x34
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025b2:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_UART_Receive_DMA+0xac>)
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80025b6:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025b8:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80025ba:	002a      	movs	r2, r5
 80025bc:	f7ff f958 	bl	8001870 <HAL_DMA_Start_IT>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d00f      	beq.n	80025e4 <HAL_UART_Receive_DMA+0x7c>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80025c4:	2310      	movs	r3, #16
 80025c6:	67e3      	str	r3, [r4, #124]	; 0x7c

        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80025c8:	3310      	adds	r3, #16
        __HAL_UNLOCK(huart);
 80025ca:	55a7      	strb	r7, [r4, r6]

        return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80025ce:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80025d0:	e005      	b.n	80025de <HAL_UART_Receive_DMA+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d2:	6902      	ldr	r2, [r0, #16]
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d1d7      	bne.n	8002588 <HAL_UART_Receive_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 80025d8:	07ea      	lsls	r2, r5, #31
 80025da:	d5d5      	bpl.n	8002588 <HAL_UART_Receive_DMA+0x20>
      return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80025de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80025e0:	2002      	movs	r0, #2
 80025e2:	e7fc      	b.n	80025de <HAL_UART_Receive_DMA+0x76>
    __HAL_UNLOCK(huart);
 80025e4:	2370      	movs	r3, #112	; 0x70
 80025e6:	2200      	movs	r2, #0
 80025e8:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	3201      	adds	r2, #1
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	32ff      	adds	r2, #255	; 0xff
 80025f2:	430a      	orrs	r2, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	2101      	movs	r1, #1
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f8:	689a      	ldr	r2, [r3, #8]
    return HAL_OK;
 80025fa:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	313f      	adds	r1, #63	; 0x3f
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002608:	e7e9      	b.n	80025de <HAL_UART_Receive_DMA+0x76>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	08002655 	.word	0x08002655
 8002610:	08002695 	.word	0x08002695
 8002614:	080026a5 	.word	0x080026a5

08002618 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002618:	6982      	ldr	r2, [r0, #24]
{
 800261a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800261c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800261e:	2a20      	cmp	r2, #32
 8002620:	d00c      	beq.n	800263c <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8002622:	2252      	movs	r2, #82	; 0x52
 8002624:	2100      	movs	r1, #0
 8002626:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3180      	adds	r1, #128	; 0x80
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	438a      	bics	r2, r1
 8002630:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	3940      	subs	r1, #64	; 0x40
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800263a:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800263c:	0018      	movs	r0, r3
 800263e:	f7fd fdfb 	bl	8000238 <HAL_UART_TxCpltCallback>
}
 8002642:	e7fa      	b.n	800263a <UART_DMATransmitCplt+0x22>

08002644 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002644:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002646:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002648:	f7fd fdf4 	bl	8000234 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800264c:	bd10      	pop	{r4, pc}
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <HAL_UART_RxCpltCallback>:
 8002650:	4770      	bx	lr
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002654:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002656:	699b      	ldr	r3, [r3, #24]
{
 8002658:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800265a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800265c:	2b20      	cmp	r3, #32
 800265e:	d012      	beq.n	8002686 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 8002660:	235a      	movs	r3, #90	; 0x5a
 8002662:	2200      	movs	r2, #0
 8002664:	52c2      	strh	r2, [r0, r3]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	4908      	ldr	r1, [pc, #32]	; (800268c <UART_DMAReceiveCplt+0x38>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	3103      	adds	r1, #3
 8002674:	31ff      	adds	r1, #255	; 0xff
 8002676:	438a      	bics	r2, r1
 8002678:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	313f      	adds	r1, #63	; 0x3f
 800267e:	438a      	bics	r2, r1
 8002680:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002682:	2320      	movs	r3, #32
 8002684:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002686:	f7ff ffe3 	bl	8002650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800268a:	bd10      	pop	{r4, pc}
 800268c:	fffffeff 	.word	0xfffffeff

08002690 <HAL_UART_RxHalfCpltCallback>:
 8002690:	4770      	bx	lr
 8002692:	46c0      	nop			; (mov r8, r8)

08002694 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002694:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002696:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002698:	f7ff fffa 	bl	8002690 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800269c:	bd10      	pop	{r4, pc}
 800269e:	46c0      	nop			; (mov r8, r8)

080026a0 <HAL_UART_ErrorCallback>:
 80026a0:	4770      	bx	lr
 80026a2:	46c0      	nop			; (mov r8, r8)

080026a4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80026a6:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80026a8:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80026aa:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80026ac:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	0612      	lsls	r2, r2, #24
 80026b2:	d501      	bpl.n	80026b8 <UART_DMAError+0x14>
 80026b4:	2c21      	cmp	r4, #33	; 0x21
 80026b6:	d01b      	beq.n	80026f0 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	0652      	lsls	r2, r2, #25
 80026bc:	d501      	bpl.n	80026c2 <UART_DMAError+0x1e>
 80026be:	2922      	cmp	r1, #34	; 0x22
 80026c0:	d006      	beq.n	80026d0 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026c2:	2210      	movs	r2, #16
 80026c4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80026c6:	4313      	orrs	r3, r2
 80026c8:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026ca:	f7ff ffe9 	bl	80026a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ce:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 80026d0:	2100      	movs	r1, #0
 80026d2:	225a      	movs	r2, #90	; 0x5a
 80026d4:	5281      	strh	r1, [r0, r2]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <UART_DMAError+0x60>)
 80026da:	4022      	ands	r2, r4
 80026dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	3423      	adds	r4, #35	; 0x23
 80026e2:	34ff      	adds	r4, #255	; 0xff
 80026e4:	43a2      	bics	r2, r4
 80026e6:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80026e8:	2320      	movs	r3, #32
  huart->RxISR = NULL;
 80026ea:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	6783      	str	r3, [r0, #120]	; 0x78
}
 80026ee:	e7e8      	b.n	80026c2 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 80026f0:	2252      	movs	r2, #82	; 0x52
 80026f2:	2400      	movs	r4, #0
 80026f4:	5284      	strh	r4, [r0, r2]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	34c0      	adds	r4, #192	; 0xc0
 80026fa:	43a2      	bics	r2, r4
 80026fc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026fe:	2220      	movs	r2, #32
 8002700:	6742      	str	r2, [r0, #116]	; 0x74
}
 8002702:	e7d9      	b.n	80026b8 <UART_DMAError+0x14>
 8002704:	fffffedf 	.word	0xfffffedf

08002708 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002708:	6803      	ldr	r3, [r0, #0]
{
 800270a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800270c:	69da      	ldr	r2, [r3, #28]
{
 800270e:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002710:	4854      	ldr	r0, [pc, #336]	; (8002864 <HAL_UART_IRQHandler+0x15c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002712:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002714:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8002716:	4202      	tst	r2, r0
 8002718:	d112      	bne.n	8002740 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800271a:	2020      	movs	r0, #32
 800271c:	4210      	tst	r0, r2
 800271e:	d002      	beq.n	8002726 <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002720:	4208      	tst	r0, r1
 8002722:	d000      	beq.n	8002726 <HAL_UART_IRQHandler+0x1e>
 8002724:	e07f      	b.n	8002826 <HAL_UART_IRQHandler+0x11e>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002726:	2080      	movs	r0, #128	; 0x80
 8002728:	4210      	tst	r0, r2
 800272a:	d002      	beq.n	8002732 <HAL_UART_IRQHandler+0x2a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800272c:	4208      	tst	r0, r1
 800272e:	d000      	beq.n	8002732 <HAL_UART_IRQHandler+0x2a>
 8002730:	e072      	b.n	8002818 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002732:	2040      	movs	r0, #64	; 0x40
 8002734:	4210      	tst	r0, r2
 8002736:	d002      	beq.n	800273e <HAL_UART_IRQHandler+0x36>
 8002738:	4208      	tst	r0, r1
 800273a:	d000      	beq.n	800273e <HAL_UART_IRQHandler+0x36>
 800273c:	e077      	b.n	800282e <HAL_UART_IRQHandler+0x126>
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002740:	2090      	movs	r0, #144	; 0x90
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002742:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002744:	0040      	lsls	r0, r0, #1
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002746:	4035      	ands	r5, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002748:	4008      	ands	r0, r1
 800274a:	4328      	orrs	r0, r5
 800274c:	d0eb      	beq.n	8002726 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800274e:	4216      	tst	r6, r2
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0x56>
 8002752:	05c8      	lsls	r0, r1, #23
 8002754:	d503      	bpl.n	800275e <HAL_UART_IRQHandler+0x56>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002756:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002758:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800275a:	4330      	orrs	r0, r6
 800275c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800275e:	2002      	movs	r0, #2
 8002760:	4210      	tst	r0, r2
 8002762:	d054      	beq.n	800280e <HAL_UART_IRQHandler+0x106>
 8002764:	2d00      	cmp	r5, #0
 8002766:	d00c      	beq.n	8002782 <HAL_UART_IRQHandler+0x7a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002768:	2604      	movs	r6, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800276a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800276c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800276e:	4330      	orrs	r0, r6
 8002770:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002772:	4216      	tst	r6, r2
 8002774:	d005      	beq.n	8002782 <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002776:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002778:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800277a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800277c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800277e:	4330      	orrs	r0, r6
 8002780:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002782:	2608      	movs	r6, #8
 8002784:	4216      	tst	r6, r2
 8002786:	d007      	beq.n	8002798 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002788:	2020      	movs	r0, #32
 800278a:	4008      	ands	r0, r1
 800278c:	4328      	orrs	r0, r5
 800278e:	d003      	beq.n	8002798 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002790:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002792:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002794:	4330      	orrs	r0, r6
 8002796:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002798:	2080      	movs	r0, #128	; 0x80
 800279a:	0100      	lsls	r0, r0, #4
 800279c:	4202      	tst	r2, r0
 800279e:	d006      	beq.n	80027ae <HAL_UART_IRQHandler+0xa6>
 80027a0:	014d      	lsls	r5, r1, #5
 80027a2:	d504      	bpl.n	80027ae <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027a4:	2520      	movs	r5, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80027aa:	4328      	orrs	r0, r5
 80027ac:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d0c4      	beq.n	800273e <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b4:	2020      	movs	r0, #32
 80027b6:	4210      	tst	r0, r2
 80027b8:	d001      	beq.n	80027be <HAL_UART_IRQHandler+0xb6>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027ba:	4208      	tst	r0, r1
 80027bc:	d146      	bne.n	800284c <HAL_UART_IRQHandler+0x144>
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027be:	2140      	movs	r1, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027c0:	2228      	movs	r2, #40	; 0x28
      errorcode = huart->ErrorCode;
 80027c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c4:	689d      	ldr	r5, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027c6:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c8:	400d      	ands	r5, r1
 80027ca:	4315      	orrs	r5, r2
 80027cc:	d045      	beq.n	800285a <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4825      	ldr	r0, [pc, #148]	; (8002868 <HAL_UART_IRQHandler+0x160>)
 80027d2:	4002      	ands	r2, r0
 80027d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	3023      	adds	r0, #35	; 0x23
 80027da:	30ff      	adds	r0, #255	; 0xff
 80027dc:	4382      	bics	r2, r0
 80027de:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	2220      	movs	r2, #32
 80027e2:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->RxISR = NULL;
 80027e4:	2200      	movs	r2, #0
 80027e6:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	4211      	tst	r1, r2
 80027ec:	d02a      	beq.n	8002844 <HAL_UART_IRQHandler+0x13c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	438a      	bics	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d024      	beq.n	8002844 <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_UART_IRQHandler+0x164>)
 80027fc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027fe:	f7ff f877 	bl	80018f0 <HAL_DMA_Abort_IT>
 8002802:	2800      	cmp	r0, #0
 8002804:	d09b      	beq.n	800273e <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002806:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002808:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800280a:	4798      	blx	r3
 800280c:	e797      	b.n	800273e <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800280e:	0750      	lsls	r0, r2, #29
 8002810:	d5b7      	bpl.n	8002782 <HAL_UART_IRQHandler+0x7a>
 8002812:	2d00      	cmp	r5, #0
 8002814:	d1af      	bne.n	8002776 <HAL_UART_IRQHandler+0x6e>
 8002816:	e7b4      	b.n	8002782 <HAL_UART_IRQHandler+0x7a>
    if (huart->TxISR != NULL)
 8002818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800281a:	2b00      	cmp	r3, #0
 800281c:	d100      	bne.n	8002820 <HAL_UART_IRQHandler+0x118>
 800281e:	e78e      	b.n	800273e <HAL_UART_IRQHandler+0x36>
      huart->TxISR(huart);
 8002820:	0020      	movs	r0, r4
 8002822:	4798      	blx	r3
 8002824:	e78b      	b.n	800273e <HAL_UART_IRQHandler+0x36>
      if (huart->RxISR != NULL)
 8002826:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <HAL_UART_IRQHandler+0x118>
 800282c:	e787      	b.n	800273e <HAL_UART_IRQHandler+0x36>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4382      	bics	r2, r0
 8002832:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002834:	2320      	movs	r3, #32
 8002836:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002838:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800283a:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800283c:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800283e:	f7fd fcfb 	bl	8000238 <HAL_UART_TxCpltCallback>
    return;
 8002842:	e77c      	b.n	800273e <HAL_UART_IRQHandler+0x36>
            HAL_UART_ErrorCallback(huart);
 8002844:	0020      	movs	r0, r4
 8002846:	f7ff ff2b 	bl	80026a0 <HAL_UART_ErrorCallback>
 800284a:	e778      	b.n	800273e <HAL_UART_IRQHandler+0x36>
        if (huart->RxISR != NULL)
 800284c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800284e:	2a00      	cmp	r2, #0
 8002850:	d0b5      	beq.n	80027be <HAL_UART_IRQHandler+0xb6>
          huart->RxISR(huart);
 8002852:	0020      	movs	r0, r4
 8002854:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	e7b1      	b.n	80027be <HAL_UART_IRQHandler+0xb6>
        HAL_UART_ErrorCallback(huart);
 800285a:	0020      	movs	r0, r4
 800285c:	f7ff ff20 	bl	80026a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002862:	e76c      	b.n	800273e <HAL_UART_IRQHandler+0x36>
 8002864:	0000080f 	.word	0x0000080f
 8002868:	fffffedf 	.word	0xfffffedf
 800286c:	08002871 	.word	0x08002871

08002870 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	225a      	movs	r2, #90	; 0x5a
{
 8002874:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002876:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002878:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800287a:	3a08      	subs	r2, #8
 800287c:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 800287e:	f7ff ff0f 	bl	80026a0 <HAL_UART_ErrorCallback>
}
 8002882:	bd10      	pop	{r4, pc}

08002884 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002884:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002886:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002888:	07da      	lsls	r2, r3, #31
 800288a:	d506      	bpl.n	800289a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800288c:	6801      	ldr	r1, [r0, #0]
 800288e:	4c28      	ldr	r4, [pc, #160]	; (8002930 <UART_AdvFeatureConfig+0xac>)
 8002890:	684a      	ldr	r2, [r1, #4]
 8002892:	4022      	ands	r2, r4
 8002894:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002896:	4322      	orrs	r2, r4
 8002898:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800289a:	079a      	lsls	r2, r3, #30
 800289c:	d506      	bpl.n	80028ac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800289e:	6801      	ldr	r1, [r0, #0]
 80028a0:	4c24      	ldr	r4, [pc, #144]	; (8002934 <UART_AdvFeatureConfig+0xb0>)
 80028a2:	684a      	ldr	r2, [r1, #4]
 80028a4:	4022      	ands	r2, r4
 80028a6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80028a8:	4322      	orrs	r2, r4
 80028aa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ac:	075a      	lsls	r2, r3, #29
 80028ae:	d506      	bpl.n	80028be <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b0:	6801      	ldr	r1, [r0, #0]
 80028b2:	4c21      	ldr	r4, [pc, #132]	; (8002938 <UART_AdvFeatureConfig+0xb4>)
 80028b4:	684a      	ldr	r2, [r1, #4]
 80028b6:	4022      	ands	r2, r4
 80028b8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80028ba:	4322      	orrs	r2, r4
 80028bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028be:	071a      	lsls	r2, r3, #28
 80028c0:	d506      	bpl.n	80028d0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c2:	6801      	ldr	r1, [r0, #0]
 80028c4:	4c1d      	ldr	r4, [pc, #116]	; (800293c <UART_AdvFeatureConfig+0xb8>)
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	4022      	ands	r2, r4
 80028ca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80028cc:	4322      	orrs	r2, r4
 80028ce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d0:	06da      	lsls	r2, r3, #27
 80028d2:	d506      	bpl.n	80028e2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d4:	6801      	ldr	r1, [r0, #0]
 80028d6:	4c1a      	ldr	r4, [pc, #104]	; (8002940 <UART_AdvFeatureConfig+0xbc>)
 80028d8:	688a      	ldr	r2, [r1, #8]
 80028da:	4022      	ands	r2, r4
 80028dc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80028de:	4322      	orrs	r2, r4
 80028e0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028e2:	069a      	lsls	r2, r3, #26
 80028e4:	d506      	bpl.n	80028f4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e6:	6801      	ldr	r1, [r0, #0]
 80028e8:	4c16      	ldr	r4, [pc, #88]	; (8002944 <UART_AdvFeatureConfig+0xc0>)
 80028ea:	688a      	ldr	r2, [r1, #8]
 80028ec:	4022      	ands	r2, r4
 80028ee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028f0:	4322      	orrs	r2, r4
 80028f2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028f4:	065a      	lsls	r2, r3, #25
 80028f6:	d50a      	bpl.n	800290e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028f8:	6801      	ldr	r1, [r0, #0]
 80028fa:	4d13      	ldr	r5, [pc, #76]	; (8002948 <UART_AdvFeatureConfig+0xc4>)
 80028fc:	684a      	ldr	r2, [r1, #4]
 80028fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002900:	402a      	ands	r2, r5
 8002902:	4322      	orrs	r2, r4
 8002904:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	0352      	lsls	r2, r2, #13
 800290a:	4294      	cmp	r4, r2
 800290c:	d009      	beq.n	8002922 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	d506      	bpl.n	8002920 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002912:	6802      	ldr	r2, [r0, #0]
 8002914:	490d      	ldr	r1, [pc, #52]	; (800294c <UART_AdvFeatureConfig+0xc8>)
 8002916:	6853      	ldr	r3, [r2, #4]
 8002918:	400b      	ands	r3, r1
 800291a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800291c:	430b      	orrs	r3, r1
 800291e:	6053      	str	r3, [r2, #4]
}
 8002920:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <UART_AdvFeatureConfig+0xcc>)
 8002926:	4022      	ands	r2, r4
 8002928:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800292a:	4322      	orrs	r2, r4
 800292c:	604a      	str	r2, [r1, #4]
 800292e:	e7ee      	b.n	800290e <UART_AdvFeatureConfig+0x8a>
 8002930:	fffdffff 	.word	0xfffdffff
 8002934:	fffeffff 	.word	0xfffeffff
 8002938:	fffbffff 	.word	0xfffbffff
 800293c:	ffff7fff 	.word	0xffff7fff
 8002940:	ffffefff 	.word	0xffffefff
 8002944:	ffffdfff 	.word	0xffffdfff
 8002948:	ffefffff 	.word	0xffefffff
 800294c:	fff7ffff 	.word	0xfff7ffff
 8002950:	ff9fffff 	.word	0xff9fffff

08002954 <UART_CheckIdleState>:
{
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	2300      	movs	r3, #0
{
 8002958:	46c6      	mov	lr, r8
 800295a:	0004      	movs	r4, r0
 800295c:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002960:	f7fe fed4 	bl	800170c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002964:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002966:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	0712      	lsls	r2, r2, #28
 800296c:	d40c      	bmi.n	8002988 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	0752      	lsls	r2, r2, #29
 8002972:	d430      	bmi.n	80029d6 <UART_CheckIdleState+0x82>
  huart->gState = HAL_UART_STATE_READY;
 8002974:	2320      	movs	r3, #32
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002978:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800297a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800297c:	2370      	movs	r3, #112	; 0x70
 800297e:	2200      	movs	r2, #0
 8002980:	54e2      	strb	r2, [r4, r3]
}
 8002982:	bc80      	pop	{r7}
 8002984:	46b8      	mov	r8, r7
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	0292      	lsls	r2, r2, #10
 800298c:	d4ef      	bmi.n	800296e <UART_CheckIdleState+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800298e:	2380      	movs	r3, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002992:	011b      	lsls	r3, r3, #4
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002994:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002996:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	04b6      	lsls	r6, r6, #18
 800299a:	e008      	b.n	80029ae <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800299c:	4217      	tst	r7, r2
 800299e:	d003      	beq.n	80029a8 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029a0:	4641      	mov	r1, r8
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	420a      	tst	r2, r1
 80029a6:	d131      	bne.n	8002a0c <UART_CheckIdleState+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	0292      	lsls	r2, r2, #10
 80029ac:	d4df      	bmi.n	800296e <UART_CheckIdleState+0x1a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7fe fead 	bl	800170c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b8:	42b0      	cmp	r0, r6
 80029ba:	d3ef      	bcc.n	800299c <UART_CheckIdleState+0x48>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029bc:	491c      	ldr	r1, [pc, #112]	; (8002a30 <UART_CheckIdleState+0xdc>)
      return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c0:	400a      	ands	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	31a3      	adds	r1, #163	; 0xa3
 80029c8:	31ff      	adds	r1, #255	; 0xff
 80029ca:	438a      	bics	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80029ce:	2320      	movs	r3, #32
 80029d0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029d2:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 80029d4:	e7d2      	b.n	800297c <UART_CheckIdleState+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	025b      	lsls	r3, r3, #9
 80029da:	d4cb      	bmi.n	8002974 <UART_CheckIdleState+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029dc:	2380      	movs	r3, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e0:	011b      	lsls	r3, r3, #4
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029e2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	04b6      	lsls	r6, r6, #18
 80029e8:	e008      	b.n	80029fc <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029ea:	4217      	tst	r7, r2
 80029ec:	d003      	beq.n	80029f6 <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029ee:	4641      	mov	r1, r8
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	420a      	tst	r2, r1
 80029f4:	d10a      	bne.n	8002a0c <UART_CheckIdleState+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	d4bb      	bmi.n	8002974 <UART_CheckIdleState+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fc:	f7fe fe86 	bl	800170c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a00:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a04:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a06:	42b0      	cmp	r0, r6
 8002a08:	d3ef      	bcc.n	80029ea <UART_CheckIdleState+0x96>
 8002a0a:	e7d7      	b.n	80029bc <UART_CheckIdleState+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4907      	ldr	r1, [pc, #28]	; (8002a30 <UART_CheckIdleState+0xdc>)
      return HAL_TIMEOUT;
 8002a14:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a16:	400a      	ands	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	31a3      	adds	r1, #163	; 0xa3
 8002a1e:	31ff      	adds	r1, #255	; 0xff
 8002a20:	438a      	bics	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002a24:	2320      	movs	r3, #32
 8002a26:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a28:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a2a:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8002a2c:	e7a6      	b.n	800297c <UART_CheckIdleState+0x28>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	fffffe5f 	.word	0xfffffe5f

08002a34 <HAL_UART_Init>:
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002a38:	d100      	bne.n	8002a3c <HAL_UART_Init+0x8>
 8002a3a:	e0a1      	b.n	8002b80 <HAL_UART_Init+0x14c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d05c      	beq.n	8002afc <HAL_UART_Init+0xc8>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a42:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a44:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002a46:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002a48:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4a:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	438a      	bics	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a52:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a56:	432a      	orrs	r2, r5
 8002a58:	6965      	ldr	r5, [r4, #20]
 8002a5a:	69e1      	ldr	r1, [r4, #28]
 8002a5c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a5e:	4d5b      	ldr	r5, [pc, #364]	; (8002bcc <HAL_UART_Init+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a60:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a62:	4028      	ands	r0, r5
 8002a64:	4302      	orrs	r2, r0
 8002a66:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4859      	ldr	r0, [pc, #356]	; (8002bd0 <HAL_UART_Init+0x19c>)
  tmpreg |= huart->Init.OneBitSampling;
 8002a6c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6e:	4002      	ands	r2, r0
 8002a70:	68e0      	ldr	r0, [r4, #12]
 8002a72:	4302      	orrs	r2, r0
 8002a74:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a76:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a78:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002a7a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a7c:	4d55      	ldr	r5, [pc, #340]	; (8002bd4 <HAL_UART_Init+0x1a0>)
 8002a7e:	4028      	ands	r0, r5
 8002a80:	4302      	orrs	r2, r0
 8002a82:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a84:	4a54      	ldr	r2, [pc, #336]	; (8002bd8 <HAL_UART_Init+0x1a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_UART_Init+0x66>
 8002a8a:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_UART_Init+0x1a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_UART_Init+0x74>
  huart->RxISR = NULL;
 8002a90:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002a92:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002a94:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002a96:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_UART_Init+0x1ac>)
 8002a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d92e      	bls.n	8002b06 <HAL_UART_Init+0xd2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	4299      	cmp	r1, r3
 8002aae:	d03d      	beq.n	8002b2c <HAL_UART_Init+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f7ff fbec 	bl	800228c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ab4:	6861      	ldr	r1, [r4, #4]
 8002ab6:	084b      	lsrs	r3, r1, #1
 8002ab8:	1818      	adds	r0, r3, r0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002aba:	f7fd fb2f 	bl	800011c <__udivsi3>
 8002abe:	0400      	lsls	r0, r0, #16
 8002ac0:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_UART_Init+0x1b0>)
 8002ac6:	3b10      	subs	r3, #16
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d8e1      	bhi.n	8002a90 <HAL_UART_Init+0x5c>
  huart->RxISR = NULL;
 8002acc:	2300      	movs	r3, #0
      huart->Instance->BRR = usartdiv;
 8002ace:	6825      	ldr	r5, [r4, #0]
 8002ad0:	60e8      	str	r0, [r5, #12]
  huart->RxISR = NULL;
 8002ad2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002ad4:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d145      	bne.n	8002b68 <HAL_UART_Init+0x134>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002adc:	686b      	ldr	r3, [r5, #4]
 8002ade:	4a42      	ldr	r2, [pc, #264]	; (8002be8 <HAL_UART_Init+0x1b4>)
  return (UART_CheckIdleState(huart));
 8002ae0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ae2:	4013      	ands	r3, r2
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ae4:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ae6:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ae8:	68ab      	ldr	r3, [r5, #8]
 8002aea:	4393      	bics	r3, r2
 8002aec:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	3a07      	subs	r2, #7
 8002af2:	4313      	orrs	r3, r2
 8002af4:	602b      	str	r3, [r5, #0]
  return (UART_CheckIdleState(huart));
 8002af6:	f7ff ff2d 	bl	8002954 <UART_CheckIdleState>
 8002afa:	e7cd      	b.n	8002a98 <HAL_UART_Init+0x64>
    huart->Lock = HAL_UNLOCKED;
 8002afc:	2270      	movs	r2, #112	; 0x70
 8002afe:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002b00:	f7fe fc6a 	bl	80013d8 <HAL_UART_MspInit>
 8002b04:	e79d      	b.n	8002a42 <HAL_UART_Init+0xe>
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_UART_Init+0x1b8>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	0212      	lsls	r2, r2, #8
 8002b0e:	4291      	cmp	r1, r2
 8002b10:	d03e      	beq.n	8002b90 <HAL_UART_Init+0x15c>
    switch (clocksource)
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d036      	beq.n	8002b84 <HAL_UART_Init+0x150>
 8002b16:	d82b      	bhi.n	8002b70 <HAL_UART_Init+0x13c>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0c9      	beq.n	8002ab0 <HAL_UART_Init+0x7c>
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d1b7      	bne.n	8002a90 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b20:	6861      	ldr	r1, [r4, #4]
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_UART_Init+0x1bc>)
 8002b24:	0848      	lsrs	r0, r1, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b26:	469c      	mov	ip, r3
 8002b28:	4460      	add	r0, ip
 8002b2a:	e7c6      	b.n	8002aba <HAL_UART_Init+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7ff fbae 	bl	800228c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b30:	6861      	ldr	r1, [r4, #4]
 8002b32:	0040      	lsls	r0, r0, #1
 8002b34:	084b      	lsrs	r3, r1, #1
 8002b36:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b38:	f7fd faf0 	bl	800011c <__udivsi3>
 8002b3c:	0400      	lsls	r0, r0, #16
 8002b3e:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b40:	0003      	movs	r3, r0
 8002b42:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <HAL_UART_Init+0x1b0>)
 8002b44:	3b10      	subs	r3, #16
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d8a2      	bhi.n	8002a90 <HAL_UART_Init+0x5c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	439a      	bics	r2, r3
 8002b50:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b52:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8002b54:	6825      	ldr	r5, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b56:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002b60:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0b9      	beq.n	8002adc <HAL_UART_Init+0xa8>
    UART_AdvFeatureConfig(huart);
 8002b68:	0020      	movs	r0, r4
 8002b6a:	f7ff fe8b 	bl	8002884 <UART_AdvFeatureConfig>
 8002b6e:	e7b5      	b.n	8002adc <HAL_UART_Init+0xa8>
    switch (clocksource)
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d000      	beq.n	8002b76 <HAL_UART_Init+0x142>
 8002b74:	e78c      	b.n	8002a90 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	6861      	ldr	r1, [r4, #4]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	0848      	lsrs	r0, r1, #1
 8002b7e:	e7d2      	b.n	8002b26 <HAL_UART_Init+0xf2>
    return HAL_ERROR;
 8002b80:	2001      	movs	r0, #1
 8002b82:	e789      	b.n	8002a98 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b84:	f7ff fb4a 	bl	800221c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b88:	6861      	ldr	r1, [r4, #4]
 8002b8a:	084b      	lsrs	r3, r1, #1
 8002b8c:	1818      	adds	r0, r3, r0
 8002b8e:	e794      	b.n	8002aba <HAL_UART_Init+0x86>
    switch (clocksource)
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d00b      	beq.n	8002bac <HAL_UART_Init+0x178>
 8002b94:	d811      	bhi.n	8002bba <HAL_UART_Init+0x186>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0c8      	beq.n	8002b2c <HAL_UART_Init+0xf8>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d000      	beq.n	8002ba0 <HAL_UART_Init+0x16c>
 8002b9e:	e777      	b.n	8002a90 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ba0:	6861      	ldr	r1, [r4, #4]
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_UART_Init+0x1c0>)
 8002ba4:	0848      	lsrs	r0, r1, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ba6:	469c      	mov	ip, r3
 8002ba8:	4460      	add	r0, ip
 8002baa:	e7c5      	b.n	8002b38 <HAL_UART_Init+0x104>
        pclk = HAL_RCC_GetSysClockFreq();
 8002bac:	f7ff fb36 	bl	800221c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bb0:	6861      	ldr	r1, [r4, #4]
 8002bb2:	0040      	lsls	r0, r0, #1
 8002bb4:	084b      	lsrs	r3, r1, #1
 8002bb6:	18c0      	adds	r0, r0, r3
 8002bb8:	e7be      	b.n	8002b38 <HAL_UART_Init+0x104>
    switch (clocksource)
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d000      	beq.n	8002bc0 <HAL_UART_Init+0x18c>
 8002bbe:	e767      	b.n	8002a90 <HAL_UART_Init+0x5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	6861      	ldr	r1, [r4, #4]
 8002bc4:	025b      	lsls	r3, r3, #9
 8002bc6:	0848      	lsrs	r0, r1, #1
 8002bc8:	e7ed      	b.n	8002ba6 <HAL_UART_Init+0x172>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	ffff69f3 	.word	0xffff69f3
 8002bd0:	ffffcfff 	.word	0xffffcfff
 8002bd4:	fffff4ff 	.word	0xfffff4ff
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40004400 	.word	0x40004400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	0000ffef 	.word	0x0000ffef
 8002be8:	fffff7ff 	.word	0xfffff7ff
 8002bec:	080039f0 	.word	0x080039f0
 8002bf0:	007a1200 	.word	0x007a1200
 8002bf4:	00f42400 	.word	0x00f42400

08002bf8 <UART_WaitOnFlagUntilTimeout>:
{
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	4646      	mov	r6, r8
 8002bfc:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bfe:	2304      	movs	r3, #4
{
 8002c00:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c02:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c04:	2380      	movs	r3, #128	; 0x80
{
 8002c06:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c08:	011b      	lsls	r3, r3, #4
{
 8002c0a:	b5c0      	push	{r6, r7, lr}
 8002c0c:	0015      	movs	r5, r2
 8002c0e:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c10:	469a      	mov	sl, r3
{
 8002c12:	000c      	movs	r4, r1
 8002c14:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	6801      	ldr	r1, [r0, #0]
 8002c18:	1c73      	adds	r3, r6, #1
 8002c1a:	d10c      	bne.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002c1c:	69cb      	ldr	r3, [r1, #28]
 8002c1e:	4023      	ands	r3, r4
 8002c20:	1b1b      	subs	r3, r3, r4
 8002c22:	425a      	negs	r2, r3
 8002c24:	4153      	adcs	r3, r2
 8002c26:	429d      	cmp	r5, r3
 8002c28:	d0f8      	beq.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002c2a:	2000      	movs	r0, #0
}
 8002c2c:	bce0      	pop	{r5, r6, r7}
 8002c2e:	46ba      	mov	sl, r7
 8002c30:	46b1      	mov	r9, r6
 8002c32:	46a8      	mov	r8, r5
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c36:	69cb      	ldr	r3, [r1, #28]
 8002c38:	4023      	ands	r3, r4
 8002c3a:	1b1b      	subs	r3, r3, r4
 8002c3c:	425a      	negs	r2, r3
 8002c3e:	4153      	adcs	r3, r2
 8002c40:	429d      	cmp	r5, r3
 8002c42:	d1f2      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c44:	f7fe fd62 	bl	800170c <HAL_GetTick>
 8002c48:	4643      	mov	r3, r8
 8002c4a:	1ac0      	subs	r0, r0, r3
 8002c4c:	42b0      	cmp	r0, r6
 8002c4e:	d81d      	bhi.n	8002c8c <UART_WaitOnFlagUntilTimeout+0x94>
 8002c50:	2e00      	cmp	r6, #0
 8002c52:	d01b      	beq.n	8002c8c <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c54:	464a      	mov	r2, r9
 8002c56:	6839      	ldr	r1, [r7, #0]
 8002c58:	680b      	ldr	r3, [r1, #0]
 8002c5a:	421a      	tst	r2, r3
 8002c5c:	d0dc      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c5e:	4652      	mov	r2, sl
 8002c60:	69cb      	ldr	r3, [r1, #28]
 8002c62:	4213      	tst	r3, r2
 8002c64:	d0d8      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c66:	620a      	str	r2, [r1, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c68:	680b      	ldr	r3, [r1, #0]
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <UART_WaitOnFlagUntilTimeout+0xb8>)
          return HAL_TIMEOUT;
 8002c6c:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6e:	4013      	ands	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	688b      	ldr	r3, [r1, #8]
 8002c74:	32a3      	adds	r2, #163	; 0xa3
 8002c76:	32ff      	adds	r2, #255	; 0xff
 8002c78:	4393      	bics	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002c7c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8002c7e:	2200      	movs	r2, #0
          huart->gState = HAL_UART_STATE_READY;
 8002c80:	677b      	str	r3, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002c82:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c84:	67fb      	str	r3, [r7, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8002c8a:	e7cf      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x34>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <UART_WaitOnFlagUntilTimeout+0xb8>)
 8002c90:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002c92:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c94:	400a      	ands	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	31a3      	adds	r1, #163	; 0xa3
 8002c9c:	31ff      	adds	r1, #255	; 0xff
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002ca2:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002ca4:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8002ca6:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002caa:	3350      	adds	r3, #80	; 0x50
 8002cac:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002cae:	e7bd      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x34>
 8002cb0:	fffffe5f 	.word	0xfffffe5f

08002cb4 <HAL_UART_Transmit>:
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	4657      	mov	r7, sl
 8002cb8:	464e      	mov	r6, r9
 8002cba:	4645      	mov	r5, r8
 8002cbc:	46de      	mov	lr, fp
 8002cbe:	b5e0      	push	{r5, r6, r7, lr}
 8002cc0:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc2:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002cc4:	0005      	movs	r5, r0
 8002cc6:	000f      	movs	r7, r1
 8002cc8:	0014      	movs	r4, r2
 8002cca:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d000      	beq.n	8002cd2 <HAL_UART_Transmit+0x1e>
 8002cd0:	e08a      	b.n	8002de8 <HAL_UART_Transmit+0x134>
    if ((pData == NULL) || (Size == 0U))
 8002cd2:	2900      	cmp	r1, #0
 8002cd4:	d04d      	beq.n	8002d72 <HAL_UART_Transmit+0xbe>
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d04b      	beq.n	8002d72 <HAL_UART_Transmit+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	6882      	ldr	r2, [r0, #8]
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d041      	beq.n	8002d68 <HAL_UART_Transmit+0xb4>
    __HAL_LOCK(huart);
 8002ce4:	2370      	movs	r3, #112	; 0x70
 8002ce6:	5cea      	ldrb	r2, [r5, r3]
 8002ce8:	2a01      	cmp	r2, #1
 8002cea:	d100      	bne.n	8002cee <HAL_UART_Transmit+0x3a>
 8002cec:	e07c      	b.n	8002de8 <HAL_UART_Transmit+0x134>
 8002cee:	2201      	movs	r2, #1
 8002cf0:	54ea      	strb	r2, [r5, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	67eb      	str	r3, [r5, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf6:	3321      	adds	r3, #33	; 0x21
 8002cf8:	676b      	str	r3, [r5, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fd07 	bl	800170c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002cfe:	2350      	movs	r3, #80	; 0x50
 8002d00:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8002d02:	3302      	adds	r3, #2
      pdata16bits = NULL;
 8002d04:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8002d06:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8002d0c:	4681      	mov	r9, r0
      pdata16bits = NULL;
 8002d0e:	468b      	mov	fp, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	015b      	lsls	r3, r3, #5
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d06a      	beq.n	8002dec <HAL_UART_Transmit+0x138>
    while (huart->TxXferCount > 0U)
 8002d16:	2352      	movs	r3, #82	; 0x52
 8002d18:	5aeb      	ldrh	r3, [r5, r3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_UART_Transmit+0x98>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1e:	2480      	movs	r4, #128	; 0x80
 8002d20:	682a      	ldr	r2, [r5, #0]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4698      	mov	r8, r3
 8002d28:	1c73      	adds	r3, r6, #1
 8002d2a:	d12a      	bne.n	8002d82 <HAL_UART_Transmit+0xce>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2c:	69d3      	ldr	r3, [r2, #28]
 8002d2e:	421c      	tst	r4, r3
 8002d30:	d0fc      	beq.n	8002d2c <HAL_UART_Transmit+0x78>
      if (pdata8bits == NULL)
 8002d32:	2f00      	cmp	r7, #0
 8002d34:	d04f      	beq.n	8002dd6 <HAL_UART_Transmit+0x122>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d36:	783b      	ldrb	r3, [r7, #0]
        pdata8bits++;
 8002d38:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002d3c:	2152      	movs	r1, #82	; 0x52
 8002d3e:	5a6b      	ldrh	r3, [r5, r1]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	526b      	strh	r3, [r5, r1]
    while (huart->TxXferCount > 0U)
 8002d46:	5a6b      	ldrh	r3, [r5, r1]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ea      	bne.n	8002d22 <HAL_UART_Transmit+0x6e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2140      	movs	r1, #64	; 0x40
 8002d52:	0028      	movs	r0, r5
 8002d54:	9600      	str	r6, [sp, #0]
 8002d56:	f7ff ff4f 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d15f      	bne.n	8002e1e <HAL_UART_Transmit+0x16a>
    huart->gState = HAL_UART_STATE_READY;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	676b      	str	r3, [r5, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8002d62:	3350      	adds	r3, #80	; 0x50
 8002d64:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8002d66:	e005      	b.n	8002d74 <HAL_UART_Transmit+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d68:	6903      	ldr	r3, [r0, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ba      	bne.n	8002ce4 <HAL_UART_Transmit+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d6e:	07cb      	lsls	r3, r1, #31
 8002d70:	d5b8      	bpl.n	8002ce4 <HAL_UART_Transmit+0x30>
      return  HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
}
 8002d74:	b003      	add	sp, #12
 8002d76:	bcf0      	pop	{r4, r5, r6, r7}
 8002d78:	46bb      	mov	fp, r7
 8002d7a:	46b2      	mov	sl, r6
 8002d7c:	46a9      	mov	r9, r5
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	0021      	movs	r1, r4
 8002d84:	69d3      	ldr	r3, [r2, #28]
 8002d86:	4019      	ands	r1, r3
 8002d88:	468a      	mov	sl, r1
 8002d8a:	421c      	tst	r4, r3
 8002d8c:	d1d1      	bne.n	8002d32 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fe fcbd 	bl	800170c <HAL_GetTick>
 8002d92:	464b      	mov	r3, r9
 8002d94:	1ac0      	subs	r0, r0, r3
 8002d96:	4286      	cmp	r6, r0
 8002d98:	d32f      	bcc.n	8002dfa <HAL_UART_Transmit+0x146>
 8002d9a:	2e00      	cmp	r6, #0
 8002d9c:	d02d      	beq.n	8002dfa <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	682a      	ldr	r2, [r5, #0]
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	4219      	tst	r1, r3
 8002da6:	d0bf      	beq.n	8002d28 <HAL_UART_Transmit+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002da8:	4641      	mov	r1, r8
 8002daa:	69d3      	ldr	r3, [r2, #28]
 8002dac:	420b      	tst	r3, r1
 8002dae:	d0bb      	beq.n	8002d28 <HAL_UART_Transmit+0x74>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db0:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	491b      	ldr	r1, [pc, #108]	; (8002e24 <HAL_UART_Transmit+0x170>)
        return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002db8:	400b      	ands	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	6893      	ldr	r3, [r2, #8]
 8002dbe:	31a3      	adds	r1, #163	; 0xa3
 8002dc0:	31ff      	adds	r1, #255	; 0xff
 8002dc2:	438b      	bics	r3, r1
 8002dc4:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002dc6:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8002dc8:	4652      	mov	r2, sl
          huart->gState = HAL_UART_STATE_READY;
 8002dca:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dce:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002dd0:	3350      	adds	r3, #80	; 0x50
 8002dd2:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8002dd4:	e7ce      	b.n	8002d74 <HAL_UART_Transmit+0xc0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd6:	465b      	mov	r3, fp
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	0ddb      	lsrs	r3, r3, #23
 8002dde:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8002de0:	2302      	movs	r3, #2
 8002de2:	469c      	mov	ip, r3
 8002de4:	44e3      	add	fp, ip
      huart->TxXferCount--;
 8002de6:	e7a9      	b.n	8002d3c <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8002de8:	2002      	movs	r0, #2
 8002dea:	e7c3      	b.n	8002d74 <HAL_UART_Transmit+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dec:	692b      	ldr	r3, [r5, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d000      	beq.n	8002df4 <HAL_UART_Transmit+0x140>
 8002df2:	e790      	b.n	8002d16 <HAL_UART_Transmit+0x62>
 8002df4:	46bb      	mov	fp, r7
      pdata8bits  = NULL;
 8002df6:	2700      	movs	r7, #0
 8002df8:	e78d      	b.n	8002d16 <HAL_UART_Transmit+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	4909      	ldr	r1, [pc, #36]	; (8002e24 <HAL_UART_Transmit+0x170>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
        return HAL_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	400a      	ands	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	31a3      	adds	r1, #163	; 0xa3
 8002e0a:	31ff      	adds	r1, #255	; 0xff
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002e10:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002e12:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8002e14:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e16:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002e18:	3350      	adds	r3, #80	; 0x50
 8002e1a:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8002e1c:	e7aa      	b.n	8002d74 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002e1e:	2003      	movs	r0, #3
 8002e20:	e7a8      	b.n	8002d74 <HAL_UART_Transmit+0xc0>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	fffffe5f 	.word	0xfffffe5f

08002e28 <_ZdlPvj>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	f000 f801 	bl	8002e30 <_ZdlPv>
 8002e2e:	bd10      	pop	{r4, pc}

08002e30 <_ZdlPv>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	f000 f801 	bl	8002e38 <free>
 8002e36:	bd10      	pop	{r4, pc}

08002e38 <free>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <free+0x10>)
 8002e3c:	0001      	movs	r1, r0
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f000 f93e 	bl	80030c0 <_free_r>
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	2000005c 	.word	0x2000005c

08002e4c <sbrk_aligned>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4e0f      	ldr	r6, [pc, #60]	; (8002e8c <sbrk_aligned+0x40>)
 8002e50:	000d      	movs	r5, r1
 8002e52:	6831      	ldr	r1, [r6, #0]
 8002e54:	0004      	movs	r4, r0
 8002e56:	2900      	cmp	r1, #0
 8002e58:	d102      	bne.n	8002e60 <sbrk_aligned+0x14>
 8002e5a:	f000 f8e9 	bl	8003030 <_sbrk_r>
 8002e5e:	6030      	str	r0, [r6, #0]
 8002e60:	0029      	movs	r1, r5
 8002e62:	0020      	movs	r0, r4
 8002e64:	f000 f8e4 	bl	8003030 <_sbrk_r>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d00a      	beq.n	8002e82 <sbrk_aligned+0x36>
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	1cc5      	adds	r5, r0, #3
 8002e70:	439d      	bics	r5, r3
 8002e72:	42a8      	cmp	r0, r5
 8002e74:	d007      	beq.n	8002e86 <sbrk_aligned+0x3a>
 8002e76:	1a29      	subs	r1, r5, r0
 8002e78:	0020      	movs	r0, r4
 8002e7a:	f000 f8d9 	bl	8003030 <_sbrk_r>
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d101      	bne.n	8002e86 <sbrk_aligned+0x3a>
 8002e82:	2501      	movs	r5, #1
 8002e84:	426d      	negs	r5, r5
 8002e86:	0028      	movs	r0, r5
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200016ec 	.word	0x200016ec

08002e90 <_malloc_r>:
 8002e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e92:	2203      	movs	r2, #3
 8002e94:	1ccb      	adds	r3, r1, #3
 8002e96:	4393      	bics	r3, r2
 8002e98:	3308      	adds	r3, #8
 8002e9a:	0006      	movs	r6, r0
 8002e9c:	001f      	movs	r7, r3
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d238      	bcs.n	8002f14 <_malloc_r+0x84>
 8002ea2:	270c      	movs	r7, #12
 8002ea4:	42b9      	cmp	r1, r7
 8002ea6:	d837      	bhi.n	8002f18 <_malloc_r+0x88>
 8002ea8:	0030      	movs	r0, r6
 8002eaa:	f000 f873 	bl	8002f94 <__malloc_lock>
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <_malloc_r+0x100>)
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	001c      	movs	r4, r3
 8002eb6:	2c00      	cmp	r4, #0
 8002eb8:	d133      	bne.n	8002f22 <_malloc_r+0x92>
 8002eba:	0039      	movs	r1, r7
 8002ebc:	0030      	movs	r0, r6
 8002ebe:	f7ff ffc5 	bl	8002e4c <sbrk_aligned>
 8002ec2:	0004      	movs	r4, r0
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d15e      	bne.n	8002f86 <_malloc_r+0xf6>
 8002ec8:	9b00      	ldr	r3, [sp, #0]
 8002eca:	681c      	ldr	r4, [r3, #0]
 8002ecc:	0025      	movs	r5, r4
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	d14e      	bne.n	8002f70 <_malloc_r+0xe0>
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	d051      	beq.n	8002f7a <_malloc_r+0xea>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	0029      	movs	r1, r5
 8002eda:	18e3      	adds	r3, r4, r3
 8002edc:	0030      	movs	r0, r6
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	f000 f8a6 	bl	8003030 <_sbrk_r>
 8002ee4:	9b01      	ldr	r3, [sp, #4]
 8002ee6:	4283      	cmp	r3, r0
 8002ee8:	d147      	bne.n	8002f7a <_malloc_r+0xea>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	0030      	movs	r0, r6
 8002eee:	1aff      	subs	r7, r7, r3
 8002ef0:	0039      	movs	r1, r7
 8002ef2:	f7ff ffab 	bl	8002e4c <sbrk_aligned>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d03f      	beq.n	8002f7a <_malloc_r+0xea>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	9b00      	ldr	r3, [sp, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d040      	beq.n	8002f8a <_malloc_r+0xfa>
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	42a2      	cmp	r2, r4
 8002f0c:	d133      	bne.n	8002f76 <_malloc_r+0xe6>
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e014      	b.n	8002f3e <_malloc_r+0xae>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dac5      	bge.n	8002ea4 <_malloc_r+0x14>
 8002f18:	230c      	movs	r3, #12
 8002f1a:	2500      	movs	r5, #0
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	0028      	movs	r0, r5
 8002f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	1bc9      	subs	r1, r1, r7
 8002f26:	d420      	bmi.n	8002f6a <_malloc_r+0xda>
 8002f28:	290b      	cmp	r1, #11
 8002f2a:	d918      	bls.n	8002f5e <_malloc_r+0xce>
 8002f2c:	19e2      	adds	r2, r4, r7
 8002f2e:	6027      	str	r7, [r4, #0]
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	d112      	bne.n	8002f5a <_malloc_r+0xca>
 8002f34:	9b00      	ldr	r3, [sp, #0]
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	6011      	str	r1, [r2, #0]
 8002f3c:	6053      	str	r3, [r2, #4]
 8002f3e:	0030      	movs	r0, r6
 8002f40:	0025      	movs	r5, r4
 8002f42:	f000 f82f 	bl	8002fa4 <__malloc_unlock>
 8002f46:	2207      	movs	r2, #7
 8002f48:	350b      	adds	r5, #11
 8002f4a:	1d23      	adds	r3, r4, #4
 8002f4c:	4395      	bics	r5, r2
 8002f4e:	1aea      	subs	r2, r5, r3
 8002f50:	429d      	cmp	r5, r3
 8002f52:	d0e4      	beq.n	8002f1e <_malloc_r+0x8e>
 8002f54:	1b5b      	subs	r3, r3, r5
 8002f56:	50a3      	str	r3, [r4, r2]
 8002f58:	e7e1      	b.n	8002f1e <_malloc_r+0x8e>
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	e7ec      	b.n	8002f38 <_malloc_r+0xa8>
 8002f5e:	6862      	ldr	r2, [r4, #4]
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d1d5      	bne.n	8002f10 <_malloc_r+0x80>
 8002f64:	9b00      	ldr	r3, [sp, #0]
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e7e9      	b.n	8002f3e <_malloc_r+0xae>
 8002f6a:	0023      	movs	r3, r4
 8002f6c:	6864      	ldr	r4, [r4, #4]
 8002f6e:	e7a2      	b.n	8002eb6 <_malloc_r+0x26>
 8002f70:	002c      	movs	r4, r5
 8002f72:	686d      	ldr	r5, [r5, #4]
 8002f74:	e7ab      	b.n	8002ece <_malloc_r+0x3e>
 8002f76:	0013      	movs	r3, r2
 8002f78:	e7c4      	b.n	8002f04 <_malloc_r+0x74>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	0030      	movs	r0, r6
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	f000 f810 	bl	8002fa4 <__malloc_unlock>
 8002f84:	e7cb      	b.n	8002f1e <_malloc_r+0x8e>
 8002f86:	6027      	str	r7, [r4, #0]
 8002f88:	e7d9      	b.n	8002f3e <_malloc_r+0xae>
 8002f8a:	605b      	str	r3, [r3, #4]
 8002f8c:	deff      	udf	#255	; 0xff
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	200016e8 	.word	0x200016e8

08002f94 <__malloc_lock>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <__malloc_lock+0xc>)
 8002f98:	f000 f886 	bl	80030a8 <__retarget_lock_acquire_recursive>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	2000182c 	.word	0x2000182c

08002fa4 <__malloc_unlock>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <__malloc_unlock+0xc>)
 8002fa8:	f000 f87f 	bl	80030aa <__retarget_lock_release_recursive>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	2000182c 	.word	0x2000182c

08002fb4 <siprintf>:
 8002fb4:	b40e      	push	{r1, r2, r3}
 8002fb6:	b500      	push	{lr}
 8002fb8:	490b      	ldr	r1, [pc, #44]	; (8002fe8 <siprintf+0x34>)
 8002fba:	b09c      	sub	sp, #112	; 0x70
 8002fbc:	ab1d      	add	r3, sp, #116	; 0x74
 8002fbe:	9002      	str	r0, [sp, #8]
 8002fc0:	9006      	str	r0, [sp, #24]
 8002fc2:	9107      	str	r1, [sp, #28]
 8002fc4:	9104      	str	r1, [sp, #16]
 8002fc6:	4809      	ldr	r0, [pc, #36]	; (8002fec <siprintf+0x38>)
 8002fc8:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <siprintf+0x3c>)
 8002fca:	cb04      	ldmia	r3!, {r2}
 8002fcc:	9105      	str	r1, [sp, #20]
 8002fce:	6800      	ldr	r0, [r0, #0]
 8002fd0:	a902      	add	r1, sp, #8
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	f000 f920 	bl	8003218 <_svfiprintf_r>
 8002fd8:	2200      	movs	r2, #0
 8002fda:	9b02      	ldr	r3, [sp, #8]
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	b01c      	add	sp, #112	; 0x70
 8002fe0:	bc08      	pop	{r3}
 8002fe2:	b003      	add	sp, #12
 8002fe4:	4718      	bx	r3
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	7fffffff 	.word	0x7fffffff
 8002fec:	2000005c 	.word	0x2000005c
 8002ff0:	ffff0208 	.word	0xffff0208

08002ff4 <memset>:
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	1882      	adds	r2, r0, r2
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	7019      	strb	r1, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <strstr>:
 8003004:	780a      	ldrb	r2, [r1, #0]
 8003006:	b530      	push	{r4, r5, lr}
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10c      	bne.n	8003026 <strstr+0x22>
 800300c:	bd30      	pop	{r4, r5, pc}
 800300e:	429a      	cmp	r2, r3
 8003010:	d108      	bne.n	8003024 <strstr+0x20>
 8003012:	2301      	movs	r3, #1
 8003014:	5ccc      	ldrb	r4, [r1, r3]
 8003016:	2c00      	cmp	r4, #0
 8003018:	d0f8      	beq.n	800300c <strstr+0x8>
 800301a:	5cc5      	ldrb	r5, [r0, r3]
 800301c:	42a5      	cmp	r5, r4
 800301e:	d101      	bne.n	8003024 <strstr+0x20>
 8003020:	3301      	adds	r3, #1
 8003022:	e7f7      	b.n	8003014 <strstr+0x10>
 8003024:	3001      	adds	r0, #1
 8003026:	7803      	ldrb	r3, [r0, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <strstr+0xa>
 800302c:	0018      	movs	r0, r3
 800302e:	e7ed      	b.n	800300c <strstr+0x8>

08003030 <_sbrk_r>:
 8003030:	2300      	movs	r3, #0
 8003032:	b570      	push	{r4, r5, r6, lr}
 8003034:	4d06      	ldr	r5, [pc, #24]	; (8003050 <_sbrk_r+0x20>)
 8003036:	0004      	movs	r4, r0
 8003038:	0008      	movs	r0, r1
 800303a:	602b      	str	r3, [r5, #0]
 800303c:	f7fe fad6 	bl	80015ec <_sbrk>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d103      	bne.n	800304c <_sbrk_r+0x1c>
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d000      	beq.n	800304c <_sbrk_r+0x1c>
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20001828 	.word	0x20001828

08003054 <__errno>:
 8003054:	4b01      	ldr	r3, [pc, #4]	; (800305c <__errno+0x8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	2000005c 	.word	0x2000005c

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	2600      	movs	r6, #0
 8003064:	4c0c      	ldr	r4, [pc, #48]	; (8003098 <__libc_init_array+0x38>)
 8003066:	4d0d      	ldr	r5, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	2600      	movs	r6, #0
 8003072:	f000 fba7 	bl	80037c4 <_init>
 8003076:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <__libc_init_array+0x40>)
 8003078:	4d0a      	ldr	r5, [pc, #40]	; (80030a4 <__libc_init_array+0x44>)
 800307a:	1b64      	subs	r4, r4, r5
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	00b3      	lsls	r3, r6, #2
 8003086:	58eb      	ldr	r3, [r5, r3]
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	00b3      	lsls	r3, r6, #2
 8003090:	58eb      	ldr	r3, [r5, r3]
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	08003a28 	.word	0x08003a28
 800309c:	08003a28 	.word	0x08003a28
 80030a0:	08003a2c 	.word	0x08003a2c
 80030a4:	08003a28 	.word	0x08003a28

080030a8 <__retarget_lock_acquire_recursive>:
 80030a8:	4770      	bx	lr

080030aa <__retarget_lock_release_recursive>:
 80030aa:	4770      	bx	lr

080030ac <memcpy>:
 80030ac:	2300      	movs	r3, #0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d100      	bne.n	80030b6 <memcpy+0xa>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	5ccc      	ldrb	r4, [r1, r3]
 80030b8:	54c4      	strb	r4, [r0, r3]
 80030ba:	3301      	adds	r3, #1
 80030bc:	e7f8      	b.n	80030b0 <memcpy+0x4>
	...

080030c0 <_free_r>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	0005      	movs	r5, r0
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d010      	beq.n	80030ea <_free_r+0x2a>
 80030c8:	1f0c      	subs	r4, r1, #4
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da00      	bge.n	80030d2 <_free_r+0x12>
 80030d0:	18e4      	adds	r4, r4, r3
 80030d2:	0028      	movs	r0, r5
 80030d4:	f7ff ff5e 	bl	8002f94 <__malloc_lock>
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <_free_r+0x90>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <_free_r+0x2c>
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	6014      	str	r4, [r2, #0]
 80030e4:	0028      	movs	r0, r5
 80030e6:	f7ff ff5d 	bl	8002fa4 <__malloc_unlock>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	42a3      	cmp	r3, r4
 80030ee:	d908      	bls.n	8003102 <_free_r+0x42>
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	1821      	adds	r1, r4, r0
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d1f3      	bne.n	80030e0 <_free_r+0x20>
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	1809      	adds	r1, r1, r0
 80030fe:	6021      	str	r1, [r4, #0]
 8003100:	e7ee      	b.n	80030e0 <_free_r+0x20>
 8003102:	001a      	movs	r2, r3
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <_free_r+0x4e>
 800310a:	42a3      	cmp	r3, r4
 800310c:	d9f9      	bls.n	8003102 <_free_r+0x42>
 800310e:	6811      	ldr	r1, [r2, #0]
 8003110:	1850      	adds	r0, r2, r1
 8003112:	42a0      	cmp	r0, r4
 8003114:	d10b      	bne.n	800312e <_free_r+0x6e>
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	1809      	adds	r1, r1, r0
 800311a:	1850      	adds	r0, r2, r1
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	4283      	cmp	r3, r0
 8003120:	d1e0      	bne.n	80030e4 <_free_r+0x24>
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	1841      	adds	r1, r0, r1
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e7da      	b.n	80030e4 <_free_r+0x24>
 800312e:	42a0      	cmp	r0, r4
 8003130:	d902      	bls.n	8003138 <_free_r+0x78>
 8003132:	230c      	movs	r3, #12
 8003134:	602b      	str	r3, [r5, #0]
 8003136:	e7d5      	b.n	80030e4 <_free_r+0x24>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	1821      	adds	r1, r4, r0
 800313c:	428b      	cmp	r3, r1
 800313e:	d103      	bne.n	8003148 <_free_r+0x88>
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	1809      	adds	r1, r1, r0
 8003146:	6021      	str	r1, [r4, #0]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	6054      	str	r4, [r2, #4]
 800314c:	e7ca      	b.n	80030e4 <_free_r+0x24>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	200016e8 	.word	0x200016e8

08003154 <__ssputs_r>:
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	688e      	ldr	r6, [r1, #8]
 800315e:	9a01      	ldr	r2, [sp, #4]
 8003160:	0007      	movs	r7, r0
 8003162:	000c      	movs	r4, r1
 8003164:	680b      	ldr	r3, [r1, #0]
 8003166:	4296      	cmp	r6, r2
 8003168:	d831      	bhi.n	80031ce <__ssputs_r+0x7a>
 800316a:	898a      	ldrh	r2, [r1, #12]
 800316c:	2190      	movs	r1, #144	; 0x90
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	420a      	tst	r2, r1
 8003172:	d029      	beq.n	80031c8 <__ssputs_r+0x74>
 8003174:	2003      	movs	r0, #3
 8003176:	6921      	ldr	r1, [r4, #16]
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	6963      	ldr	r3, [r4, #20]
 800317e:	4343      	muls	r3, r0
 8003180:	0fdd      	lsrs	r5, r3, #31
 8003182:	18ed      	adds	r5, r5, r3
 8003184:	9b01      	ldr	r3, [sp, #4]
 8003186:	9802      	ldr	r0, [sp, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	181b      	adds	r3, r3, r0
 800318c:	106d      	asrs	r5, r5, #1
 800318e:	42ab      	cmp	r3, r5
 8003190:	d900      	bls.n	8003194 <__ssputs_r+0x40>
 8003192:	001d      	movs	r5, r3
 8003194:	0552      	lsls	r2, r2, #21
 8003196:	d529      	bpl.n	80031ec <__ssputs_r+0x98>
 8003198:	0029      	movs	r1, r5
 800319a:	0038      	movs	r0, r7
 800319c:	f7ff fe78 	bl	8002e90 <_malloc_r>
 80031a0:	1e06      	subs	r6, r0, #0
 80031a2:	d02d      	beq.n	8003200 <__ssputs_r+0xac>
 80031a4:	9a02      	ldr	r2, [sp, #8]
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	f7ff ff80 	bl	80030ac <memcpy>
 80031ac:	89a2      	ldrh	r2, [r4, #12]
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <__ssputs_r+0xc0>)
 80031b0:	401a      	ands	r2, r3
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	4313      	orrs	r3, r2
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	9b02      	ldr	r3, [sp, #8]
 80031ba:	6126      	str	r6, [r4, #16]
 80031bc:	18f6      	adds	r6, r6, r3
 80031be:	6026      	str	r6, [r4, #0]
 80031c0:	6165      	str	r5, [r4, #20]
 80031c2:	9e01      	ldr	r6, [sp, #4]
 80031c4:	1aed      	subs	r5, r5, r3
 80031c6:	60a5      	str	r5, [r4, #8]
 80031c8:	9b01      	ldr	r3, [sp, #4]
 80031ca:	429e      	cmp	r6, r3
 80031cc:	d900      	bls.n	80031d0 <__ssputs_r+0x7c>
 80031ce:	9e01      	ldr	r6, [sp, #4]
 80031d0:	0032      	movs	r2, r6
 80031d2:	9903      	ldr	r1, [sp, #12]
 80031d4:	6820      	ldr	r0, [r4, #0]
 80031d6:	f000 fa9f 	bl	8003718 <memmove>
 80031da:	2000      	movs	r0, #0
 80031dc:	68a3      	ldr	r3, [r4, #8]
 80031de:	1b9b      	subs	r3, r3, r6
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	199b      	adds	r3, r3, r6
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	b005      	add	sp, #20
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ec:	002a      	movs	r2, r5
 80031ee:	0038      	movs	r0, r7
 80031f0:	f000 fab0 	bl	8003754 <_realloc_r>
 80031f4:	1e06      	subs	r6, r0, #0
 80031f6:	d1df      	bne.n	80031b8 <__ssputs_r+0x64>
 80031f8:	0038      	movs	r0, r7
 80031fa:	6921      	ldr	r1, [r4, #16]
 80031fc:	f7ff ff60 	bl	80030c0 <_free_r>
 8003200:	230c      	movs	r3, #12
 8003202:	2001      	movs	r0, #1
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	89a2      	ldrh	r2, [r4, #12]
 8003208:	3334      	adds	r3, #52	; 0x34
 800320a:	4313      	orrs	r3, r2
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	4240      	negs	r0, r0
 8003210:	e7ea      	b.n	80031e8 <__ssputs_r+0x94>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	fffffb7f 	.word	0xfffffb7f

08003218 <_svfiprintf_r>:
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	b0a1      	sub	sp, #132	; 0x84
 800321c:	9003      	str	r0, [sp, #12]
 800321e:	001d      	movs	r5, r3
 8003220:	898b      	ldrh	r3, [r1, #12]
 8003222:	000f      	movs	r7, r1
 8003224:	0016      	movs	r6, r2
 8003226:	061b      	lsls	r3, r3, #24
 8003228:	d511      	bpl.n	800324e <_svfiprintf_r+0x36>
 800322a:	690b      	ldr	r3, [r1, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10e      	bne.n	800324e <_svfiprintf_r+0x36>
 8003230:	2140      	movs	r1, #64	; 0x40
 8003232:	f7ff fe2d 	bl	8002e90 <_malloc_r>
 8003236:	6038      	str	r0, [r7, #0]
 8003238:	6138      	str	r0, [r7, #16]
 800323a:	2800      	cmp	r0, #0
 800323c:	d105      	bne.n	800324a <_svfiprintf_r+0x32>
 800323e:	230c      	movs	r3, #12
 8003240:	9a03      	ldr	r2, [sp, #12]
 8003242:	3801      	subs	r0, #1
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	b021      	add	sp, #132	; 0x84
 8003248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324a:	2340      	movs	r3, #64	; 0x40
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	2300      	movs	r3, #0
 8003250:	ac08      	add	r4, sp, #32
 8003252:	6163      	str	r3, [r4, #20]
 8003254:	3320      	adds	r3, #32
 8003256:	7663      	strb	r3, [r4, #25]
 8003258:	3310      	adds	r3, #16
 800325a:	76a3      	strb	r3, [r4, #26]
 800325c:	9507      	str	r5, [sp, #28]
 800325e:	0035      	movs	r5, r6
 8003260:	782b      	ldrb	r3, [r5, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <_svfiprintf_r+0x52>
 8003266:	2b25      	cmp	r3, #37	; 0x25
 8003268:	d148      	bne.n	80032fc <_svfiprintf_r+0xe4>
 800326a:	1bab      	subs	r3, r5, r6
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	42b5      	cmp	r5, r6
 8003270:	d00b      	beq.n	800328a <_svfiprintf_r+0x72>
 8003272:	0032      	movs	r2, r6
 8003274:	0039      	movs	r1, r7
 8003276:	9803      	ldr	r0, [sp, #12]
 8003278:	f7ff ff6c 	bl	8003154 <__ssputs_r>
 800327c:	3001      	adds	r0, #1
 800327e:	d100      	bne.n	8003282 <_svfiprintf_r+0x6a>
 8003280:	e0af      	b.n	80033e2 <_svfiprintf_r+0x1ca>
 8003282:	6963      	ldr	r3, [r4, #20]
 8003284:	9a05      	ldr	r2, [sp, #20]
 8003286:	189b      	adds	r3, r3, r2
 8003288:	6163      	str	r3, [r4, #20]
 800328a:	782b      	ldrb	r3, [r5, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d100      	bne.n	8003292 <_svfiprintf_r+0x7a>
 8003290:	e0a7      	b.n	80033e2 <_svfiprintf_r+0x1ca>
 8003292:	2201      	movs	r2, #1
 8003294:	2300      	movs	r3, #0
 8003296:	4252      	negs	r2, r2
 8003298:	6062      	str	r2, [r4, #4]
 800329a:	a904      	add	r1, sp, #16
 800329c:	3254      	adds	r2, #84	; 0x54
 800329e:	1852      	adds	r2, r2, r1
 80032a0:	1c6e      	adds	r6, r5, #1
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	60e3      	str	r3, [r4, #12]
 80032a6:	60a3      	str	r3, [r4, #8]
 80032a8:	7013      	strb	r3, [r2, #0]
 80032aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <_svfiprintf_r+0x1ec>)
 80032ae:	2205      	movs	r2, #5
 80032b0:	0018      	movs	r0, r3
 80032b2:	7831      	ldrb	r1, [r6, #0]
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	f000 fa42 	bl	800373e <memchr>
 80032ba:	1c75      	adds	r5, r6, #1
 80032bc:	2800      	cmp	r0, #0
 80032be:	d11f      	bne.n	8003300 <_svfiprintf_r+0xe8>
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	06d3      	lsls	r3, r2, #27
 80032c4:	d504      	bpl.n	80032d0 <_svfiprintf_r+0xb8>
 80032c6:	2353      	movs	r3, #83	; 0x53
 80032c8:	a904      	add	r1, sp, #16
 80032ca:	185b      	adds	r3, r3, r1
 80032cc:	2120      	movs	r1, #32
 80032ce:	7019      	strb	r1, [r3, #0]
 80032d0:	0713      	lsls	r3, r2, #28
 80032d2:	d504      	bpl.n	80032de <_svfiprintf_r+0xc6>
 80032d4:	2353      	movs	r3, #83	; 0x53
 80032d6:	a904      	add	r1, sp, #16
 80032d8:	185b      	adds	r3, r3, r1
 80032da:	212b      	movs	r1, #43	; 0x2b
 80032dc:	7019      	strb	r1, [r3, #0]
 80032de:	7833      	ldrb	r3, [r6, #0]
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d016      	beq.n	8003312 <_svfiprintf_r+0xfa>
 80032e4:	0035      	movs	r5, r6
 80032e6:	2100      	movs	r1, #0
 80032e8:	200a      	movs	r0, #10
 80032ea:	68e3      	ldr	r3, [r4, #12]
 80032ec:	782a      	ldrb	r2, [r5, #0]
 80032ee:	1c6e      	adds	r6, r5, #1
 80032f0:	3a30      	subs	r2, #48	; 0x30
 80032f2:	2a09      	cmp	r2, #9
 80032f4:	d94e      	bls.n	8003394 <_svfiprintf_r+0x17c>
 80032f6:	2900      	cmp	r1, #0
 80032f8:	d111      	bne.n	800331e <_svfiprintf_r+0x106>
 80032fa:	e017      	b.n	800332c <_svfiprintf_r+0x114>
 80032fc:	3501      	adds	r5, #1
 80032fe:	e7af      	b.n	8003260 <_svfiprintf_r+0x48>
 8003300:	9b05      	ldr	r3, [sp, #20]
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	1ac0      	subs	r0, r0, r3
 8003306:	2301      	movs	r3, #1
 8003308:	4083      	lsls	r3, r0
 800330a:	4313      	orrs	r3, r2
 800330c:	002e      	movs	r6, r5
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	e7cc      	b.n	80032ac <_svfiprintf_r+0x94>
 8003312:	9b07      	ldr	r3, [sp, #28]
 8003314:	1d19      	adds	r1, r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	9107      	str	r1, [sp, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db01      	blt.n	8003322 <_svfiprintf_r+0x10a>
 800331e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003320:	e004      	b.n	800332c <_svfiprintf_r+0x114>
 8003322:	425b      	negs	r3, r3
 8003324:	60e3      	str	r3, [r4, #12]
 8003326:	2302      	movs	r3, #2
 8003328:	4313      	orrs	r3, r2
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	782b      	ldrb	r3, [r5, #0]
 800332e:	2b2e      	cmp	r3, #46	; 0x2e
 8003330:	d10a      	bne.n	8003348 <_svfiprintf_r+0x130>
 8003332:	786b      	ldrb	r3, [r5, #1]
 8003334:	2b2a      	cmp	r3, #42	; 0x2a
 8003336:	d135      	bne.n	80033a4 <_svfiprintf_r+0x18c>
 8003338:	9b07      	ldr	r3, [sp, #28]
 800333a:	3502      	adds	r5, #2
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9207      	str	r2, [sp, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db2b      	blt.n	800339e <_svfiprintf_r+0x186>
 8003346:	9309      	str	r3, [sp, #36]	; 0x24
 8003348:	4e2f      	ldr	r6, [pc, #188]	; (8003408 <_svfiprintf_r+0x1f0>)
 800334a:	2203      	movs	r2, #3
 800334c:	0030      	movs	r0, r6
 800334e:	7829      	ldrb	r1, [r5, #0]
 8003350:	f000 f9f5 	bl	800373e <memchr>
 8003354:	2800      	cmp	r0, #0
 8003356:	d006      	beq.n	8003366 <_svfiprintf_r+0x14e>
 8003358:	2340      	movs	r3, #64	; 0x40
 800335a:	1b80      	subs	r0, r0, r6
 800335c:	4083      	lsls	r3, r0
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	3501      	adds	r5, #1
 8003362:	4313      	orrs	r3, r2
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	7829      	ldrb	r1, [r5, #0]
 8003368:	2206      	movs	r2, #6
 800336a:	4828      	ldr	r0, [pc, #160]	; (800340c <_svfiprintf_r+0x1f4>)
 800336c:	1c6e      	adds	r6, r5, #1
 800336e:	7621      	strb	r1, [r4, #24]
 8003370:	f000 f9e5 	bl	800373e <memchr>
 8003374:	2800      	cmp	r0, #0
 8003376:	d03c      	beq.n	80033f2 <_svfiprintf_r+0x1da>
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <_svfiprintf_r+0x1f8>)
 800337a:	2b00      	cmp	r3, #0
 800337c:	d125      	bne.n	80033ca <_svfiprintf_r+0x1b2>
 800337e:	2207      	movs	r2, #7
 8003380:	9b07      	ldr	r3, [sp, #28]
 8003382:	3307      	adds	r3, #7
 8003384:	4393      	bics	r3, r2
 8003386:	3308      	adds	r3, #8
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	6963      	ldr	r3, [r4, #20]
 800338c:	9a04      	ldr	r2, [sp, #16]
 800338e:	189b      	adds	r3, r3, r2
 8003390:	6163      	str	r3, [r4, #20]
 8003392:	e764      	b.n	800325e <_svfiprintf_r+0x46>
 8003394:	4343      	muls	r3, r0
 8003396:	0035      	movs	r5, r6
 8003398:	2101      	movs	r1, #1
 800339a:	189b      	adds	r3, r3, r2
 800339c:	e7a6      	b.n	80032ec <_svfiprintf_r+0xd4>
 800339e:	2301      	movs	r3, #1
 80033a0:	425b      	negs	r3, r3
 80033a2:	e7d0      	b.n	8003346 <_svfiprintf_r+0x12e>
 80033a4:	2300      	movs	r3, #0
 80033a6:	200a      	movs	r0, #10
 80033a8:	001a      	movs	r2, r3
 80033aa:	3501      	adds	r5, #1
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	7829      	ldrb	r1, [r5, #0]
 80033b0:	1c6e      	adds	r6, r5, #1
 80033b2:	3930      	subs	r1, #48	; 0x30
 80033b4:	2909      	cmp	r1, #9
 80033b6:	d903      	bls.n	80033c0 <_svfiprintf_r+0x1a8>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0c5      	beq.n	8003348 <_svfiprintf_r+0x130>
 80033bc:	9209      	str	r2, [sp, #36]	; 0x24
 80033be:	e7c3      	b.n	8003348 <_svfiprintf_r+0x130>
 80033c0:	4342      	muls	r2, r0
 80033c2:	0035      	movs	r5, r6
 80033c4:	2301      	movs	r3, #1
 80033c6:	1852      	adds	r2, r2, r1
 80033c8:	e7f1      	b.n	80033ae <_svfiprintf_r+0x196>
 80033ca:	aa07      	add	r2, sp, #28
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	0021      	movs	r1, r4
 80033d0:	003a      	movs	r2, r7
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <_svfiprintf_r+0x1fc>)
 80033d4:	9803      	ldr	r0, [sp, #12]
 80033d6:	e000      	b.n	80033da <_svfiprintf_r+0x1c2>
 80033d8:	bf00      	nop
 80033da:	9004      	str	r0, [sp, #16]
 80033dc:	9b04      	ldr	r3, [sp, #16]
 80033de:	3301      	adds	r3, #1
 80033e0:	d1d3      	bne.n	800338a <_svfiprintf_r+0x172>
 80033e2:	89bb      	ldrh	r3, [r7, #12]
 80033e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033e6:	065b      	lsls	r3, r3, #25
 80033e8:	d400      	bmi.n	80033ec <_svfiprintf_r+0x1d4>
 80033ea:	e72c      	b.n	8003246 <_svfiprintf_r+0x2e>
 80033ec:	2001      	movs	r0, #1
 80033ee:	4240      	negs	r0, r0
 80033f0:	e729      	b.n	8003246 <_svfiprintf_r+0x2e>
 80033f2:	aa07      	add	r2, sp, #28
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	0021      	movs	r1, r4
 80033f8:	003a      	movs	r2, r7
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <_svfiprintf_r+0x1fc>)
 80033fc:	9803      	ldr	r0, [sp, #12]
 80033fe:	f000 f87b 	bl	80034f8 <_printf_i>
 8003402:	e7ea      	b.n	80033da <_svfiprintf_r+0x1c2>
 8003404:	080039f3 	.word	0x080039f3
 8003408:	080039f9 	.word	0x080039f9
 800340c:	080039fd 	.word	0x080039fd
 8003410:	00000000 	.word	0x00000000
 8003414:	08003155 	.word	0x08003155

08003418 <_printf_common>:
 8003418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800341a:	0016      	movs	r6, r2
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	688a      	ldr	r2, [r1, #8]
 8003420:	690b      	ldr	r3, [r1, #16]
 8003422:	000c      	movs	r4, r1
 8003424:	9000      	str	r0, [sp, #0]
 8003426:	4293      	cmp	r3, r2
 8003428:	da00      	bge.n	800342c <_printf_common+0x14>
 800342a:	0013      	movs	r3, r2
 800342c:	0022      	movs	r2, r4
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	3243      	adds	r2, #67	; 0x43
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	2a00      	cmp	r2, #0
 8003436:	d001      	beq.n	800343c <_printf_common+0x24>
 8003438:	3301      	adds	r3, #1
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	069b      	lsls	r3, r3, #26
 8003440:	d502      	bpl.n	8003448 <_printf_common+0x30>
 8003442:	6833      	ldr	r3, [r6, #0]
 8003444:	3302      	adds	r3, #2
 8003446:	6033      	str	r3, [r6, #0]
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	2306      	movs	r3, #6
 800344c:	0015      	movs	r5, r2
 800344e:	401d      	ands	r5, r3
 8003450:	421a      	tst	r2, r3
 8003452:	d027      	beq.n	80034a4 <_printf_common+0x8c>
 8003454:	0023      	movs	r3, r4
 8003456:	3343      	adds	r3, #67	; 0x43
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	1e5a      	subs	r2, r3, #1
 800345c:	4193      	sbcs	r3, r2
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	0692      	lsls	r2, r2, #26
 8003462:	d430      	bmi.n	80034c6 <_printf_common+0xae>
 8003464:	0022      	movs	r2, r4
 8003466:	9901      	ldr	r1, [sp, #4]
 8003468:	9800      	ldr	r0, [sp, #0]
 800346a:	9d08      	ldr	r5, [sp, #32]
 800346c:	3243      	adds	r2, #67	; 0x43
 800346e:	47a8      	blx	r5
 8003470:	3001      	adds	r0, #1
 8003472:	d025      	beq.n	80034c0 <_printf_common+0xa8>
 8003474:	2206      	movs	r2, #6
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	2500      	movs	r5, #0
 800347a:	4013      	ands	r3, r2
 800347c:	2b04      	cmp	r3, #4
 800347e:	d105      	bne.n	800348c <_printf_common+0x74>
 8003480:	6833      	ldr	r3, [r6, #0]
 8003482:	68e5      	ldr	r5, [r4, #12]
 8003484:	1aed      	subs	r5, r5, r3
 8003486:	43eb      	mvns	r3, r5
 8003488:	17db      	asrs	r3, r3, #31
 800348a:	401d      	ands	r5, r3
 800348c:	68a3      	ldr	r3, [r4, #8]
 800348e:	6922      	ldr	r2, [r4, #16]
 8003490:	4293      	cmp	r3, r2
 8003492:	dd01      	ble.n	8003498 <_printf_common+0x80>
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	18ed      	adds	r5, r5, r3
 8003498:	2600      	movs	r6, #0
 800349a:	42b5      	cmp	r5, r6
 800349c:	d120      	bne.n	80034e0 <_printf_common+0xc8>
 800349e:	2000      	movs	r0, #0
 80034a0:	e010      	b.n	80034c4 <_printf_common+0xac>
 80034a2:	3501      	adds	r5, #1
 80034a4:	68e3      	ldr	r3, [r4, #12]
 80034a6:	6832      	ldr	r2, [r6, #0]
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	42ab      	cmp	r3, r5
 80034ac:	ddd2      	ble.n	8003454 <_printf_common+0x3c>
 80034ae:	0022      	movs	r2, r4
 80034b0:	2301      	movs	r3, #1
 80034b2:	9901      	ldr	r1, [sp, #4]
 80034b4:	9800      	ldr	r0, [sp, #0]
 80034b6:	9f08      	ldr	r7, [sp, #32]
 80034b8:	3219      	adds	r2, #25
 80034ba:	47b8      	blx	r7
 80034bc:	3001      	adds	r0, #1
 80034be:	d1f0      	bne.n	80034a2 <_printf_common+0x8a>
 80034c0:	2001      	movs	r0, #1
 80034c2:	4240      	negs	r0, r0
 80034c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034c6:	2030      	movs	r0, #48	; 0x30
 80034c8:	18e1      	adds	r1, r4, r3
 80034ca:	3143      	adds	r1, #67	; 0x43
 80034cc:	7008      	strb	r0, [r1, #0]
 80034ce:	0021      	movs	r1, r4
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	3145      	adds	r1, #69	; 0x45
 80034d4:	7809      	ldrb	r1, [r1, #0]
 80034d6:	18a2      	adds	r2, r4, r2
 80034d8:	3243      	adds	r2, #67	; 0x43
 80034da:	3302      	adds	r3, #2
 80034dc:	7011      	strb	r1, [r2, #0]
 80034de:	e7c1      	b.n	8003464 <_printf_common+0x4c>
 80034e0:	0022      	movs	r2, r4
 80034e2:	2301      	movs	r3, #1
 80034e4:	9901      	ldr	r1, [sp, #4]
 80034e6:	9800      	ldr	r0, [sp, #0]
 80034e8:	9f08      	ldr	r7, [sp, #32]
 80034ea:	321a      	adds	r2, #26
 80034ec:	47b8      	blx	r7
 80034ee:	3001      	adds	r0, #1
 80034f0:	d0e6      	beq.n	80034c0 <_printf_common+0xa8>
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7d1      	b.n	800349a <_printf_common+0x82>
	...

080034f8 <_printf_i>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b08b      	sub	sp, #44	; 0x2c
 80034fc:	9206      	str	r2, [sp, #24]
 80034fe:	000a      	movs	r2, r1
 8003500:	3243      	adds	r2, #67	; 0x43
 8003502:	9307      	str	r3, [sp, #28]
 8003504:	9005      	str	r0, [sp, #20]
 8003506:	9204      	str	r2, [sp, #16]
 8003508:	7e0a      	ldrb	r2, [r1, #24]
 800350a:	000c      	movs	r4, r1
 800350c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800350e:	2a78      	cmp	r2, #120	; 0x78
 8003510:	d809      	bhi.n	8003526 <_printf_i+0x2e>
 8003512:	2a62      	cmp	r2, #98	; 0x62
 8003514:	d80b      	bhi.n	800352e <_printf_i+0x36>
 8003516:	2a00      	cmp	r2, #0
 8003518:	d100      	bne.n	800351c <_printf_i+0x24>
 800351a:	e0be      	b.n	800369a <_printf_i+0x1a2>
 800351c:	497c      	ldr	r1, [pc, #496]	; (8003710 <_printf_i+0x218>)
 800351e:	9103      	str	r1, [sp, #12]
 8003520:	2a58      	cmp	r2, #88	; 0x58
 8003522:	d100      	bne.n	8003526 <_printf_i+0x2e>
 8003524:	e093      	b.n	800364e <_printf_i+0x156>
 8003526:	0026      	movs	r6, r4
 8003528:	3642      	adds	r6, #66	; 0x42
 800352a:	7032      	strb	r2, [r6, #0]
 800352c:	e022      	b.n	8003574 <_printf_i+0x7c>
 800352e:	0010      	movs	r0, r2
 8003530:	3863      	subs	r0, #99	; 0x63
 8003532:	2815      	cmp	r0, #21
 8003534:	d8f7      	bhi.n	8003526 <_printf_i+0x2e>
 8003536:	f7fc fde7 	bl	8000108 <__gnu_thumb1_case_shi>
 800353a:	0016      	.short	0x0016
 800353c:	fff6001f 	.word	0xfff6001f
 8003540:	fff6fff6 	.word	0xfff6fff6
 8003544:	001ffff6 	.word	0x001ffff6
 8003548:	fff6fff6 	.word	0xfff6fff6
 800354c:	fff6fff6 	.word	0xfff6fff6
 8003550:	003600a3 	.word	0x003600a3
 8003554:	fff60083 	.word	0xfff60083
 8003558:	00b4fff6 	.word	0x00b4fff6
 800355c:	0036fff6 	.word	0x0036fff6
 8003560:	fff6fff6 	.word	0xfff6fff6
 8003564:	0087      	.short	0x0087
 8003566:	0026      	movs	r6, r4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	3642      	adds	r6, #66	; 0x42
 800356c:	1d11      	adds	r1, r2, #4
 800356e:	6019      	str	r1, [r3, #0]
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	7033      	strb	r3, [r6, #0]
 8003574:	2301      	movs	r3, #1
 8003576:	e0a2      	b.n	80036be <_printf_i+0x1c6>
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	6809      	ldr	r1, [r1, #0]
 800357c:	1d02      	adds	r2, r0, #4
 800357e:	060d      	lsls	r5, r1, #24
 8003580:	d50b      	bpl.n	800359a <_printf_i+0xa2>
 8003582:	6805      	ldr	r5, [r0, #0]
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	2d00      	cmp	r5, #0
 8003588:	da03      	bge.n	8003592 <_printf_i+0x9a>
 800358a:	232d      	movs	r3, #45	; 0x2d
 800358c:	9a04      	ldr	r2, [sp, #16]
 800358e:	426d      	negs	r5, r5
 8003590:	7013      	strb	r3, [r2, #0]
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <_printf_i+0x218>)
 8003594:	270a      	movs	r7, #10
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	e01b      	b.n	80035d2 <_printf_i+0xda>
 800359a:	6805      	ldr	r5, [r0, #0]
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	0649      	lsls	r1, r1, #25
 80035a0:	d5f1      	bpl.n	8003586 <_printf_i+0x8e>
 80035a2:	b22d      	sxth	r5, r5
 80035a4:	e7ef      	b.n	8003586 <_printf_i+0x8e>
 80035a6:	680d      	ldr	r5, [r1, #0]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	1d08      	adds	r0, r1, #4
 80035ac:	6018      	str	r0, [r3, #0]
 80035ae:	062e      	lsls	r6, r5, #24
 80035b0:	d501      	bpl.n	80035b6 <_printf_i+0xbe>
 80035b2:	680d      	ldr	r5, [r1, #0]
 80035b4:	e003      	b.n	80035be <_printf_i+0xc6>
 80035b6:	066d      	lsls	r5, r5, #25
 80035b8:	d5fb      	bpl.n	80035b2 <_printf_i+0xba>
 80035ba:	680d      	ldr	r5, [r1, #0]
 80035bc:	b2ad      	uxth	r5, r5
 80035be:	4b54      	ldr	r3, [pc, #336]	; (8003710 <_printf_i+0x218>)
 80035c0:	2708      	movs	r7, #8
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	2a6f      	cmp	r2, #111	; 0x6f
 80035c6:	d000      	beq.n	80035ca <_printf_i+0xd2>
 80035c8:	3702      	adds	r7, #2
 80035ca:	0023      	movs	r3, r4
 80035cc:	2200      	movs	r2, #0
 80035ce:	3343      	adds	r3, #67	; 0x43
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	60a3      	str	r3, [r4, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db03      	blt.n	80035e2 <_printf_i+0xea>
 80035da:	2104      	movs	r1, #4
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	438a      	bics	r2, r1
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	d102      	bne.n	80035ec <_printf_i+0xf4>
 80035e6:	9e04      	ldr	r6, [sp, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <_printf_i+0x10e>
 80035ec:	9e04      	ldr	r6, [sp, #16]
 80035ee:	0028      	movs	r0, r5
 80035f0:	0039      	movs	r1, r7
 80035f2:	f7fc fe19 	bl	8000228 <__aeabi_uidivmod>
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	3e01      	subs	r6, #1
 80035fa:	5c5b      	ldrb	r3, [r3, r1]
 80035fc:	7033      	strb	r3, [r6, #0]
 80035fe:	002b      	movs	r3, r5
 8003600:	0005      	movs	r5, r0
 8003602:	429f      	cmp	r7, r3
 8003604:	d9f3      	bls.n	80035ee <_printf_i+0xf6>
 8003606:	2f08      	cmp	r7, #8
 8003608:	d109      	bne.n	800361e <_printf_i+0x126>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	07db      	lsls	r3, r3, #31
 800360e:	d506      	bpl.n	800361e <_printf_i+0x126>
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	6923      	ldr	r3, [r4, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	dc02      	bgt.n	800361e <_printf_i+0x126>
 8003618:	2330      	movs	r3, #48	; 0x30
 800361a:	3e01      	subs	r6, #1
 800361c:	7033      	strb	r3, [r6, #0]
 800361e:	9b04      	ldr	r3, [sp, #16]
 8003620:	1b9b      	subs	r3, r3, r6
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	9b07      	ldr	r3, [sp, #28]
 8003626:	0021      	movs	r1, r4
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	9805      	ldr	r0, [sp, #20]
 800362c:	9b06      	ldr	r3, [sp, #24]
 800362e:	aa09      	add	r2, sp, #36	; 0x24
 8003630:	f7ff fef2 	bl	8003418 <_printf_common>
 8003634:	3001      	adds	r0, #1
 8003636:	d147      	bne.n	80036c8 <_printf_i+0x1d0>
 8003638:	2001      	movs	r0, #1
 800363a:	4240      	negs	r0, r0
 800363c:	b00b      	add	sp, #44	; 0x2c
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003640:	2220      	movs	r2, #32
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	6022      	str	r2, [r4, #0]
 8003648:	2278      	movs	r2, #120	; 0x78
 800364a:	4932      	ldr	r1, [pc, #200]	; (8003714 <_printf_i+0x21c>)
 800364c:	9103      	str	r1, [sp, #12]
 800364e:	0021      	movs	r1, r4
 8003650:	3145      	adds	r1, #69	; 0x45
 8003652:	700a      	strb	r2, [r1, #0]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	c920      	ldmia	r1!, {r5}
 800365a:	0610      	lsls	r0, r2, #24
 800365c:	d402      	bmi.n	8003664 <_printf_i+0x16c>
 800365e:	0650      	lsls	r0, r2, #25
 8003660:	d500      	bpl.n	8003664 <_printf_i+0x16c>
 8003662:	b2ad      	uxth	r5, r5
 8003664:	6019      	str	r1, [r3, #0]
 8003666:	07d3      	lsls	r3, r2, #31
 8003668:	d502      	bpl.n	8003670 <_printf_i+0x178>
 800366a:	2320      	movs	r3, #32
 800366c:	4313      	orrs	r3, r2
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	2710      	movs	r7, #16
 8003672:	2d00      	cmp	r5, #0
 8003674:	d1a9      	bne.n	80035ca <_printf_i+0xd2>
 8003676:	2220      	movs	r2, #32
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	4393      	bics	r3, r2
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	e7a4      	b.n	80035ca <_printf_i+0xd2>
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	680d      	ldr	r5, [r1, #0]
 8003684:	1d10      	adds	r0, r2, #4
 8003686:	6949      	ldr	r1, [r1, #20]
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	062e      	lsls	r6, r5, #24
 800368e:	d501      	bpl.n	8003694 <_printf_i+0x19c>
 8003690:	6019      	str	r1, [r3, #0]
 8003692:	e002      	b.n	800369a <_printf_i+0x1a2>
 8003694:	066d      	lsls	r5, r5, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0x198>
 8003698:	8019      	strh	r1, [r3, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	9e04      	ldr	r6, [sp, #16]
 800369e:	6123      	str	r3, [r4, #16]
 80036a0:	e7c0      	b.n	8003624 <_printf_i+0x12c>
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	1d11      	adds	r1, r2, #4
 80036a6:	6019      	str	r1, [r3, #0]
 80036a8:	6816      	ldr	r6, [r2, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	0030      	movs	r0, r6
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	f000 f845 	bl	800373e <memchr>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d001      	beq.n	80036bc <_printf_i+0x1c4>
 80036b8:	1b80      	subs	r0, r0, r6
 80036ba:	6060      	str	r0, [r4, #4]
 80036bc:	6863      	ldr	r3, [r4, #4]
 80036be:	6123      	str	r3, [r4, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9a04      	ldr	r2, [sp, #16]
 80036c4:	7013      	strb	r3, [r2, #0]
 80036c6:	e7ad      	b.n	8003624 <_printf_i+0x12c>
 80036c8:	0032      	movs	r2, r6
 80036ca:	6923      	ldr	r3, [r4, #16]
 80036cc:	9906      	ldr	r1, [sp, #24]
 80036ce:	9805      	ldr	r0, [sp, #20]
 80036d0:	9d07      	ldr	r5, [sp, #28]
 80036d2:	47a8      	blx	r5
 80036d4:	3001      	adds	r0, #1
 80036d6:	d0af      	beq.n	8003638 <_printf_i+0x140>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	079b      	lsls	r3, r3, #30
 80036dc:	d415      	bmi.n	800370a <_printf_i+0x212>
 80036de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e0:	68e0      	ldr	r0, [r4, #12]
 80036e2:	4298      	cmp	r0, r3
 80036e4:	daaa      	bge.n	800363c <_printf_i+0x144>
 80036e6:	0018      	movs	r0, r3
 80036e8:	e7a8      	b.n	800363c <_printf_i+0x144>
 80036ea:	0022      	movs	r2, r4
 80036ec:	2301      	movs	r3, #1
 80036ee:	9906      	ldr	r1, [sp, #24]
 80036f0:	9805      	ldr	r0, [sp, #20]
 80036f2:	9e07      	ldr	r6, [sp, #28]
 80036f4:	3219      	adds	r2, #25
 80036f6:	47b0      	blx	r6
 80036f8:	3001      	adds	r0, #1
 80036fa:	d09d      	beq.n	8003638 <_printf_i+0x140>
 80036fc:	3501      	adds	r5, #1
 80036fe:	68e3      	ldr	r3, [r4, #12]
 8003700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	42ab      	cmp	r3, r5
 8003706:	dcf0      	bgt.n	80036ea <_printf_i+0x1f2>
 8003708:	e7e9      	b.n	80036de <_printf_i+0x1e6>
 800370a:	2500      	movs	r5, #0
 800370c:	e7f7      	b.n	80036fe <_printf_i+0x206>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	08003a04 	.word	0x08003a04
 8003714:	08003a15 	.word	0x08003a15

08003718 <memmove>:
 8003718:	b510      	push	{r4, lr}
 800371a:	4288      	cmp	r0, r1
 800371c:	d902      	bls.n	8003724 <memmove+0xc>
 800371e:	188b      	adds	r3, r1, r2
 8003720:	4298      	cmp	r0, r3
 8003722:	d303      	bcc.n	800372c <memmove+0x14>
 8003724:	2300      	movs	r3, #0
 8003726:	e007      	b.n	8003738 <memmove+0x20>
 8003728:	5c8b      	ldrb	r3, [r1, r2]
 800372a:	5483      	strb	r3, [r0, r2]
 800372c:	3a01      	subs	r2, #1
 800372e:	d2fb      	bcs.n	8003728 <memmove+0x10>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	5ccc      	ldrb	r4, [r1, r3]
 8003734:	54c4      	strb	r4, [r0, r3]
 8003736:	3301      	adds	r3, #1
 8003738:	429a      	cmp	r2, r3
 800373a:	d1fa      	bne.n	8003732 <memmove+0x1a>
 800373c:	e7f8      	b.n	8003730 <memmove+0x18>

0800373e <memchr>:
 800373e:	b2c9      	uxtb	r1, r1
 8003740:	1882      	adds	r2, r0, r2
 8003742:	4290      	cmp	r0, r2
 8003744:	d101      	bne.n	800374a <memchr+0xc>
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr
 800374a:	7803      	ldrb	r3, [r0, #0]
 800374c:	428b      	cmp	r3, r1
 800374e:	d0fb      	beq.n	8003748 <memchr+0xa>
 8003750:	3001      	adds	r0, #1
 8003752:	e7f6      	b.n	8003742 <memchr+0x4>

08003754 <_realloc_r>:
 8003754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003756:	0007      	movs	r7, r0
 8003758:	000e      	movs	r6, r1
 800375a:	0014      	movs	r4, r2
 800375c:	2900      	cmp	r1, #0
 800375e:	d105      	bne.n	800376c <_realloc_r+0x18>
 8003760:	0011      	movs	r1, r2
 8003762:	f7ff fb95 	bl	8002e90 <_malloc_r>
 8003766:	0005      	movs	r5, r0
 8003768:	0028      	movs	r0, r5
 800376a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376c:	2a00      	cmp	r2, #0
 800376e:	d103      	bne.n	8003778 <_realloc_r+0x24>
 8003770:	f7ff fca6 	bl	80030c0 <_free_r>
 8003774:	0025      	movs	r5, r4
 8003776:	e7f7      	b.n	8003768 <_realloc_r+0x14>
 8003778:	f000 f81b 	bl	80037b2 <_malloc_usable_size_r>
 800377c:	9001      	str	r0, [sp, #4]
 800377e:	4284      	cmp	r4, r0
 8003780:	d803      	bhi.n	800378a <_realloc_r+0x36>
 8003782:	0035      	movs	r5, r6
 8003784:	0843      	lsrs	r3, r0, #1
 8003786:	42a3      	cmp	r3, r4
 8003788:	d3ee      	bcc.n	8003768 <_realloc_r+0x14>
 800378a:	0021      	movs	r1, r4
 800378c:	0038      	movs	r0, r7
 800378e:	f7ff fb7f 	bl	8002e90 <_malloc_r>
 8003792:	1e05      	subs	r5, r0, #0
 8003794:	d0e8      	beq.n	8003768 <_realloc_r+0x14>
 8003796:	9b01      	ldr	r3, [sp, #4]
 8003798:	0022      	movs	r2, r4
 800379a:	429c      	cmp	r4, r3
 800379c:	d900      	bls.n	80037a0 <_realloc_r+0x4c>
 800379e:	001a      	movs	r2, r3
 80037a0:	0031      	movs	r1, r6
 80037a2:	0028      	movs	r0, r5
 80037a4:	f7ff fc82 	bl	80030ac <memcpy>
 80037a8:	0031      	movs	r1, r6
 80037aa:	0038      	movs	r0, r7
 80037ac:	f7ff fc88 	bl	80030c0 <_free_r>
 80037b0:	e7da      	b.n	8003768 <_realloc_r+0x14>

080037b2 <_malloc_usable_size_r>:
 80037b2:	1f0b      	subs	r3, r1, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	1f18      	subs	r0, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da01      	bge.n	80037c0 <_malloc_usable_size_r+0xe>
 80037bc:	580b      	ldr	r3, [r1, r0]
 80037be:	18c0      	adds	r0, r0, r3
 80037c0:	4770      	bx	lr
	...

080037c4 <_init>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr

080037d0 <_fini>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr
