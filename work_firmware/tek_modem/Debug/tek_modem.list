
tek_modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800391c  0800391c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800391c  0800391c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c2c  20000060  08003984  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  08003984  00020c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001525e  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c7  00000000  00000000  00035329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00002f6a  00000000  00000000  00037af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000658  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000688  00000000  00000000  0003b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000eeea  00000000  00000000  0003b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cc39  00000000  00000000  0004a62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00052177  00000000  00000000  00057263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001508  00000000  00000000  000a93dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000aa8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003644 	.word	0x08003644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003644 	.word	0x08003644

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_UART_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	// передана половина данных
}
 8000234:	4770      	bx	lr

08000236 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	// завершена передача всех данных
}
 8000236:	4770      	bx	lr

08000238 <_Z10modem_workv>:
int error_count=0;
uint32_t timer;
void modem_work()
{
 8000238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023a:	46de      	mov	lr, fp
 800023c:	4657      	mov	r7, sl
 800023e:	464e      	mov	r6, r9
 8000240:	4645      	mov	r5, r8
 8000242:	b5e0      	push	{r5, r6, r7, lr}
 8000244:	4c5a      	ldr	r4, [pc, #360]	; (80003b0 <_Z10modem_workv+0x178>)
 8000246:	44a5      	add	sp, r4
#else
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }

	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8000248:	ab03      	add	r3, sp, #12
 800024a:	aa05      	add	r2, sp, #20
 800024c:	9203      	str	r2, [sp, #12]
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 800024e:	2200      	movs	r2, #0
 8000250:	9204      	str	r2, [sp, #16]
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 8000252:	721a      	strb	r2, [r3, #8]
 8000254:	240a      	movs	r4, #10
	char buffer[500];
	bool ok_flag=false;
 8000256:	2300      	movs	r3, #0
 8000258:	9301      	str	r3, [sp, #4]

		uint32_t sim_start_Delay = 0;
		//	HAL_UART_Transmit(&huart1, (uint8_t*)"ATE1\r\n",6,100);
		//	HAL_Delay(100);
		//	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) buffer, 100);
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT\r\n", 4,100);
 800025a:	4b56      	ldr	r3, [pc, #344]	; (80003b4 <_Z10modem_workv+0x17c>)
 800025c:	469a      	mov	sl, r3
 800025e:	4e56      	ldr	r6, [pc, #344]	; (80003b8 <_Z10modem_workv+0x180>)
		if(strstr(buffer,"SIM not inserted"))
		{
			//UARTPrint("MODEM ERROR\r\n");
			//glcd_int_puts(modem_error, 0, 0);
			//auth_flag=0;
			init_flag=0;
 8000260:	4b56      	ldr	r3, [pc, #344]	; (80003bc <_Z10modem_workv+0x184>)
 8000262:	469b      	mov	fp, r3
 8000264:	e033      	b.n	80002ce <_Z10modem_workv+0x96>
		for(int i=0;i<499;i++)
 8000266:	3301      	adds	r3, #1
 8000268:	428b      	cmp	r3, r1
 800026a:	d049      	beq.n	8000300 <_Z10modem_workv+0xc8>
			if(buffer[i]=='O'&&buffer[i+1]=='K')
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	2a4f      	cmp	r2, #79	; 0x4f
 8000270:	d1f9      	bne.n	8000266 <_Z10modem_workv+0x2e>
 8000272:	785a      	ldrb	r2, [r3, #1]
 8000274:	2a4b      	cmp	r2, #75	; 0x4b
 8000276:	d1f6      	bne.n	8000266 <_Z10modem_workv+0x2e>
		if(strstr(buffer,"SIM not inserted"))
 8000278:	4951      	ldr	r1, [pc, #324]	; (80003c0 <_Z10modem_workv+0x188>)
 800027a:	a809      	add	r0, sp, #36	; 0x24
 800027c:	f002 fe02 	bl	8002e84 <strstr>
 8000280:	2800      	cmp	r0, #0
 8000282:	d073      	beq.n	800036c <_Z10modem_workv+0x134>
				ok_flag=true;
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
			init_flag=0;
 8000288:	2500      	movs	r5, #0
 800028a:	465b      	mov	r3, fp
 800028c:	601d      	str	r5, [r3, #0]
			sub=false;
 800028e:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <_Z10modem_workv+0x18c>)
 8000290:	701d      	strb	r5, [r3, #0]
			memset(buffer,9,500);
 8000292:	23fa      	movs	r3, #250	; 0xfa
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4699      	mov	r9, r3
 8000298:	001a      	movs	r2, r3
 800029a:	2109      	movs	r1, #9
 800029c:	a809      	add	r0, sp, #36	; 0x24
 800029e:	f002 fde9 	bl	8002e74 <memset>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	01db      	lsls	r3, r3, #7
 80002a6:	4698      	mov	r8, r3
 80002a8:	4f47      	ldr	r7, [pc, #284]	; (80003c8 <_Z10modem_workv+0x190>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	0019      	movs	r1, r3
 80002ae:	0038      	movs	r0, r7
 80002b0:	f001 fc58 	bl	8001b64 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80002b4:	4648      	mov	r0, r9
 80002b6:	f001 f9fd 	bl	80016b4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	4641      	mov	r1, r8
 80002be:	0038      	movs	r0, r7
 80002c0:	f001 fc50 	bl	8001b64 <HAL_GPIO_WritePin>
			modem_flag = 0;
 80002c4:	4b41      	ldr	r3, [pc, #260]	; (80003cc <_Z10modem_workv+0x194>)
 80002c6:	701d      	strb	r5, [r3, #0]
	for(int i=0;i<10;i++)
 80002c8:	3c01      	subs	r4, #1
 80002ca:	2c00      	cmp	r4, #0
 80002cc:	d05f      	beq.n	800038e <_Z10modem_workv+0x156>
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT\r\n", 4,100);
 80002ce:	2364      	movs	r3, #100	; 0x64
 80002d0:	2204      	movs	r2, #4
 80002d2:	4651      	mov	r1, sl
 80002d4:	0030      	movs	r0, r6
 80002d6:	f002 fbf9 	bl	8002acc <HAL_UART_Transmit>
		HAL_Delay(300);
 80002da:	2096      	movs	r0, #150	; 0x96
 80002dc:	0040      	lsls	r0, r0, #1
 80002de:	f001 f9e9 	bl	80016b4 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*) buffer, 100);
 80002e2:	2264      	movs	r2, #100	; 0x64
 80002e4:	a909      	add	r1, sp, #36	; 0x24
 80002e6:	0030      	movs	r0, r6
 80002e8:	f002 f8a2 	bl	8002430 <HAL_UART_Receive_DMA>
		HAL_Delay(1000);
 80002ec:	20fa      	movs	r0, #250	; 0xfa
 80002ee:	0080      	lsls	r0, r0, #2
 80002f0:	f001 f9e0 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<499;i++)
 80002f4:	ab09      	add	r3, sp, #36	; 0x24
 80002f6:	4936      	ldr	r1, [pc, #216]	; (80003d0 <_Z10modem_workv+0x198>)
 80002f8:	aa02      	add	r2, sp, #8
 80002fa:	4694      	mov	ip, r2
 80002fc:	4461      	add	r1, ip
 80002fe:	e7b5      	b.n	800026c <_Z10modem_workv+0x34>
		if(strstr(buffer,"SIM not inserted"))
 8000300:	492f      	ldr	r1, [pc, #188]	; (80003c0 <_Z10modem_workv+0x188>)
 8000302:	a809      	add	r0, sp, #36	; 0x24
 8000304:	f002 fdbe 	bl	8002e84 <strstr>
 8000308:	2800      	cmp	r0, #0
 800030a:	d1bd      	bne.n	8000288 <_Z10modem_workv+0x50>
		}
		else if(ok_flag)
 800030c:	9b01      	ldr	r3, [sp, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12c      	bne.n	800036c <_Z10modem_workv+0x134>
		{
			//UARTPrint("MODEM ERROR\r\n");
			//glcd_int_puts(modem_error, 0, 0);
			//auth_flag=0;

			error_count++;
 8000312:	4d30      	ldr	r5, [pc, #192]	; (80003d4 <_Z10modem_workv+0x19c>)
 8000314:	682b      	ldr	r3, [r5, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	602b      	str	r3, [r5, #0]
			HAL_Delay(1000);
 800031a:	20fa      	movs	r0, #250	; 0xfa
 800031c:	0080      	lsls	r0, r0, #2
 800031e:	f001 f9c9 	bl	80016b4 <HAL_Delay>
			if(error_count>5)
 8000322:	682b      	ldr	r3, [r5, #0]
 8000324:	2b05      	cmp	r3, #5
 8000326:	ddcf      	ble.n	80002c8 <_Z10modem_workv+0x90>
			{
				sub=false;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <_Z10modem_workv+0x18c>)
 800032a:	2500      	movs	r5, #0
 800032c:	701d      	strb	r5, [r3, #0]
				memset(buffer,9,500);
 800032e:	27fa      	movs	r7, #250	; 0xfa
 8000330:	007f      	lsls	r7, r7, #1
 8000332:	003a      	movs	r2, r7
 8000334:	2109      	movs	r1, #9
 8000336:	a809      	add	r0, sp, #36	; 0x24
 8000338:	f002 fd9c 	bl	8002e74 <memset>
				init_flag=0;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <_Z10modem_workv+0x184>)
 800033e:	601d      	str	r5, [r3, #0]
				error_count=0;
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <_Z10modem_workv+0x19c>)
 8000342:	601d      	str	r5, [r3, #0]
				modem_flag = 0;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <_Z10modem_workv+0x194>)
 8000346:	701d      	strb	r5, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	01db      	lsls	r3, r3, #7
 800034c:	4698      	mov	r8, r3
 800034e:	4d1e      	ldr	r5, [pc, #120]	; (80003c8 <_Z10modem_workv+0x190>)
 8000350:	2201      	movs	r2, #1
 8000352:	0019      	movs	r1, r3
 8000354:	0028      	movs	r0, r5
 8000356:	f001 fc05 	bl	8001b64 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800035a:	0038      	movs	r0, r7
 800035c:	f001 f9aa 	bl	80016b4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	4641      	mov	r1, r8
 8000364:	0028      	movs	r0, r5
 8000366:	f001 fbfd 	bl	8001b64 <HAL_GPIO_WritePin>
 800036a:	e7ad      	b.n	80002c8 <_Z10modem_workv+0x90>
			memset(buffer,9,500);
 800036c:	22fa      	movs	r2, #250	; 0xfa
 800036e:	0052      	lsls	r2, r2, #1
 8000370:	2109      	movs	r1, #9
 8000372:	a809      	add	r0, sp, #36	; 0x24
 8000374:	f002 fd7e 	bl	8002e74 <memset>
			error_count=0;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <_Z10modem_workv+0x19c>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"OK\n\r", 4);
 800037e:	4916      	ldr	r1, [pc, #88]	; (80003d8 <_Z10modem_workv+0x1a0>)
 8000380:	4816      	ldr	r0, [pc, #88]	; (80003dc <_Z10modem_workv+0x1a4>)
 8000382:	3204      	adds	r2, #4
 8000384:	f001 fff4 	bl	8002370 <HAL_UART_Transmit_DMA>
			modem_flag=true;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <_Z10modem_workv+0x194>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 800038e:	9803      	ldr	r0, [sp, #12]
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
 8000390:	ab05      	add	r3, sp, #20
 8000392:	4298      	cmp	r0, r3
 8000394:	d003      	beq.n	800039e <_Z10modem_workv+0x166>
	  _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8000396:	9905      	ldr	r1, [sp, #20]
 8000398:	3101      	adds	r1, #1
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800039a:	f002 fc85 	bl	8002ca8 <_ZdlPvj>


		}
	}

}
 800039e:	2387      	movs	r3, #135	; 0x87
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	449d      	add	sp, r3
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	fffffde4 	.word	0xfffffde4
 80003b4:	0800365c 	.word	0x0800365c
 80003b8:	20000198 	.word	0x20000198
 80003bc:	2000029c 	.word	0x2000029c
 80003c0:	08003664 	.word	0x08003664
 80003c4:	20000b38 	.word	0x20000b38
 80003c8:	48000800 	.word	0x48000800
 80003cc:	200002a0 	.word	0x200002a0
 80003d0:	0000020f 	.word	0x0000020f
 80003d4:	20000084 	.word	0x20000084
 80003d8:	08003678 	.word	0x08003678
 80003dc:	20000218 	.word	0x20000218

080003e0 <_Z10modem_waitv>:
char recive_packet_init[256];
char recive_packet_send[256];
char recive_packet_sub[256];
uint32_t OK_Delay=0;
void modem_wait()
{
 80003e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003e2:	46de      	mov	lr, fp
 80003e4:	4657      	mov	r7, sl
 80003e6:	464e      	mov	r6, r9
 80003e8:	4645      	mov	r5, r8
 80003ea:	b5e0      	push	{r5, r6, r7, lr}
 80003ec:	b08d      	sub	sp, #52	; 0x34
	int test=0;
	char ch[20];
	//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_data, 200);
	bool corect_rec=false;
	for(i=0;i<20;i++)
 80003ee:	4b77      	ldr	r3, [pc, #476]	; (80005cc <_Z10modem_waitv+0x1ec>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
	{
		if(init_flag==1)
 80003f4:	4b76      	ldr	r3, [pc, #472]	; (80005d0 <_Z10modem_waitv+0x1f0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d021      	beq.n	8000440 <_Z10modem_waitv+0x60>
		{
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"INIT\n\r", 6);
		}
		else
		{
			if(HAL_GetTick()-OK_Delay>100)
 80003fc:	f001 f954 	bl	80016a8 <HAL_GetTick>
 8000400:	4b74      	ldr	r3, [pc, #464]	; (80005d4 <_Z10modem_waitv+0x1f4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	2864      	cmp	r0, #100	; 0x64
 8000408:	d820      	bhi.n	800044c <_Z10modem_waitv+0x6c>
			OK_Delay=HAL_GetTick();
			sprintf(ch,"OK\n\r");
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ch, 4);
			}
		}
		HAL_Delay(50);
 800040a:	2032      	movs	r0, #50	; 0x32
 800040c:	f001 f952 	bl	80016b4 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart2, rx_data, 400);
 8000410:	22c8      	movs	r2, #200	; 0xc8
 8000412:	4971      	ldr	r1, [pc, #452]	; (80005d8 <_Z10modem_waitv+0x1f8>)
 8000414:	4871      	ldr	r0, [pc, #452]	; (80005dc <_Z10modem_waitv+0x1fc>)
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	000c      	movs	r4, r1
 800041a:	f002 f809 	bl	8002430 <HAL_UART_Receive_DMA>
		for(int r=0;r<350;r++)
 800041e:	0021      	movs	r1, r4
 8000420:	486f      	ldr	r0, [pc, #444]	; (80005e0 <_Z10modem_waitv+0x200>)
 8000422:	4a70      	ldr	r2, [pc, #448]	; (80005e4 <_Z10modem_waitv+0x204>)
		HAL_UART_Receive_DMA(&huart2, rx_data, 400);
 8000424:	2305      	movs	r3, #5
 8000426:	2400      	movs	r4, #0
 8000428:	9400      	str	r4, [sp, #0]
 800042a:	9401      	str	r4, [sp, #4]
 800042c:	9402      	str	r4, [sp, #8]
					}
				}
			}
			if(rx_data[r]=='p'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
			{
				for(int ii=5+r;ii<400;ii++)
 800042e:	26c8      	movs	r6, #200	; 0xc8
 8000430:	0076      	lsls	r6, r6, #1
				{
					if(rx_data[ii]=='\n')
 8000432:	4c69      	ldr	r4, [pc, #420]	; (80005d8 <_Z10modem_waitv+0x1f8>)
 8000434:	46a1      	mov	r9, r4
					if(rx_data[ii]=='\n')
 8000436:	46a0      	mov	r8, r4
					if(rx_data[ii]=='\n')
 8000438:	46a4      	mov	ip, r4
						recive_packet_sub[ii-5-r]=rx_data[ii];
 800043a:	4c6b      	ldr	r4, [pc, #428]	; (80005e8 <_Z10modem_waitv+0x208>)
 800043c:	46a3      	mov	fp, r4
 800043e:	e01f      	b.n	8000480 <_Z10modem_waitv+0xa0>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"INIT\n\r", 6);
 8000440:	496a      	ldr	r1, [pc, #424]	; (80005ec <_Z10modem_waitv+0x20c>)
 8000442:	4866      	ldr	r0, [pc, #408]	; (80005dc <_Z10modem_waitv+0x1fc>)
 8000444:	3206      	adds	r2, #6
 8000446:	f001 ff93 	bl	8002370 <HAL_UART_Transmit_DMA>
 800044a:	e7de      	b.n	800040a <_Z10modem_waitv+0x2a>
			OK_Delay=HAL_GetTick();
 800044c:	f001 f92c 	bl	80016a8 <HAL_GetTick>
 8000450:	4b60      	ldr	r3, [pc, #384]	; (80005d4 <_Z10modem_waitv+0x1f4>)
 8000452:	6018      	str	r0, [r3, #0]
			sprintf(ch,"OK\n\r");
 8000454:	a907      	add	r1, sp, #28
 8000456:	4b66      	ldr	r3, [pc, #408]	; (80005f0 <_Z10modem_waitv+0x210>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	9207      	str	r2, [sp, #28]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	710b      	strb	r3, [r1, #4]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ch, 4);
 8000460:	485e      	ldr	r0, [pc, #376]	; (80005dc <_Z10modem_waitv+0x1fc>)
 8000462:	2204      	movs	r2, #4
 8000464:	f001 ff84 	bl	8002370 <HAL_UART_Transmit_DMA>
 8000468:	e7cf      	b.n	800040a <_Z10modem_waitv+0x2a>
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 800046a:	784c      	ldrb	r4, [r1, #1]
 800046c:	2c75      	cmp	r4, #117	; 0x75
 800046e:	d025      	beq.n	80004bc <_Z10modem_waitv+0xdc>
		for(int r=0;r<350;r++)
 8000470:	3101      	adds	r1, #1
 8000472:	3801      	subs	r0, #1
 8000474:	3301      	adds	r3, #1
 8000476:	3a01      	subs	r2, #1
 8000478:	2464      	movs	r4, #100	; 0x64
 800047a:	34ff      	adds	r4, #255	; 0xff
 800047c:	42a3      	cmp	r3, r4
 800047e:	d06d      	beq.n	800055c <_Z10modem_waitv+0x17c>
 8000480:	1f5f      	subs	r7, r3, #5
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 8000482:	780c      	ldrb	r4, [r1, #0]
 8000484:	2c73      	cmp	r4, #115	; 0x73
 8000486:	d0f0      	beq.n	800046a <_Z10modem_waitv+0x8a>
			if(rx_data[r]=='i'&&rx_data[r+1]=='n'&&rx_data[r+2]=='i'&&rx_data[r+3]==':')
 8000488:	2c69      	cmp	r4, #105	; 0x69
 800048a:	d144      	bne.n	8000516 <_Z10modem_waitv+0x136>
 800048c:	784c      	ldrb	r4, [r1, #1]
 800048e:	2c6e      	cmp	r4, #110	; 0x6e
 8000490:	d1ee      	bne.n	8000470 <_Z10modem_waitv+0x90>
 8000492:	788c      	ldrb	r4, [r1, #2]
 8000494:	2c69      	cmp	r4, #105	; 0x69
 8000496:	d1eb      	bne.n	8000470 <_Z10modem_waitv+0x90>
 8000498:	78cc      	ldrb	r4, [r1, #3]
 800049a:	2c3a      	cmp	r4, #58	; 0x3a
 800049c:	d1e8      	bne.n	8000470 <_Z10modem_waitv+0x90>
				for(int ii=5+r;ii<400;ii++)
 800049e:	001c      	movs	r4, r3
 80004a0:	42b3      	cmp	r3, r6
 80004a2:	dae5      	bge.n	8000470 <_Z10modem_waitv+0x90>
 80004a4:	4645      	mov	r5, r8
 80004a6:	46b8      	mov	r8, r7
 80004a8:	002f      	movs	r7, r5
					if(rx_data[ii]=='\n')
 80004aa:	5d3d      	ldrb	r5, [r7, r4]
 80004ac:	2d0a      	cmp	r5, #10
 80004ae:	d029      	beq.n	8000504 <_Z10modem_waitv+0x124>
						recive_packet_init[ii-r-5]=rx_data[ii];
 80004b0:	5515      	strb	r5, [r2, r4]
				for(int ii=5+r;ii<400;ii++)
 80004b2:	3401      	adds	r4, #1
 80004b4:	42b4      	cmp	r4, r6
 80004b6:	d1f8      	bne.n	80004aa <_Z10modem_waitv+0xca>
 80004b8:	46b8      	mov	r8, r7
 80004ba:	e7d9      	b.n	8000470 <_Z10modem_waitv+0x90>
			if(rx_data[r]=='s'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 80004bc:	788c      	ldrb	r4, [r1, #2]
 80004be:	2c62      	cmp	r4, #98	; 0x62
 80004c0:	d1d6      	bne.n	8000470 <_Z10modem_waitv+0x90>
 80004c2:	78cc      	ldrb	r4, [r1, #3]
 80004c4:	2c3a      	cmp	r4, #58	; 0x3a
 80004c6:	d1d3      	bne.n	8000470 <_Z10modem_waitv+0x90>
				for(int ii=5+r;ii<400;ii++)
 80004c8:	001c      	movs	r4, r3
 80004ca:	42b3      	cmp	r3, r6
 80004cc:	dad0      	bge.n	8000470 <_Z10modem_waitv+0x90>
						recive_packet_sub[ii-5-r]=rx_data[ii];
 80004ce:	465d      	mov	r5, fp
 80004d0:	1aed      	subs	r5, r5, r3
 80004d2:	46aa      	mov	sl, r5
 80004d4:	4665      	mov	r5, ip
 80004d6:	469c      	mov	ip, r3
 80004d8:	4653      	mov	r3, sl
 80004da:	46ba      	mov	sl, r7
 80004dc:	002f      	movs	r7, r5
					if(rx_data[ii]=='\n')
 80004de:	5d3d      	ldrb	r5, [r7, r4]
 80004e0:	2d0a      	cmp	r5, #10
 80004e2:	d006      	beq.n	80004f2 <_Z10modem_waitv+0x112>
						recive_packet_sub[ii-5-r]=rx_data[ii];
 80004e4:	551d      	strb	r5, [r3, r4]
				for(int ii=5+r;ii<400;ii++)
 80004e6:	3401      	adds	r4, #1
 80004e8:	42b4      	cmp	r4, r6
 80004ea:	d1f8      	bne.n	80004de <_Z10modem_waitv+0xfe>
 80004ec:	4663      	mov	r3, ip
 80004ee:	46bc      	mov	ip, r7
 80004f0:	e7be      	b.n	8000470 <_Z10modem_waitv+0x90>
						sub_len=ii-5-r;
 80004f2:	4663      	mov	r3, ip
 80004f4:	46bc      	mov	ip, r7
 80004f6:	4657      	mov	r7, sl
 80004f8:	3c05      	subs	r4, #5
 80004fa:	1be4      	subs	r4, r4, r7
 80004fc:	9405      	str	r4, [sp, #20]
						break;
 80004fe:	2401      	movs	r4, #1
 8000500:	9402      	str	r4, [sp, #8]
 8000502:	e7b5      	b.n	8000470 <_Z10modem_waitv+0x90>
						con_len=ii-r-5;
 8000504:	003d      	movs	r5, r7
 8000506:	4647      	mov	r7, r8
 8000508:	46a8      	mov	r8, r5
 800050a:	1be4      	subs	r4, r4, r7
 800050c:	3c05      	subs	r4, #5
 800050e:	9404      	str	r4, [sp, #16]
						break;
 8000510:	2401      	movs	r4, #1
 8000512:	9401      	str	r4, [sp, #4]
 8000514:	e7ac      	b.n	8000470 <_Z10modem_waitv+0x90>
			if(rx_data[r]=='p'&&rx_data[r+1]=='u'&&rx_data[r+2]=='b'&&rx_data[r+3]==':')
 8000516:	2c70      	cmp	r4, #112	; 0x70
 8000518:	d1aa      	bne.n	8000470 <_Z10modem_waitv+0x90>
 800051a:	784c      	ldrb	r4, [r1, #1]
 800051c:	2c75      	cmp	r4, #117	; 0x75
 800051e:	d1a7      	bne.n	8000470 <_Z10modem_waitv+0x90>
 8000520:	788c      	ldrb	r4, [r1, #2]
 8000522:	2c62      	cmp	r4, #98	; 0x62
 8000524:	d1a4      	bne.n	8000470 <_Z10modem_waitv+0x90>
 8000526:	78cc      	ldrb	r4, [r1, #3]
 8000528:	2c3a      	cmp	r4, #58	; 0x3a
 800052a:	d1a1      	bne.n	8000470 <_Z10modem_waitv+0x90>
				for(int ii=5+r;ii<400;ii++)
 800052c:	001c      	movs	r4, r3
 800052e:	42b3      	cmp	r3, r6
 8000530:	da9e      	bge.n	8000470 <_Z10modem_waitv+0x90>
 8000532:	464d      	mov	r5, r9
 8000534:	46b9      	mov	r9, r7
 8000536:	002f      	movs	r7, r5
					if(rx_data[ii]=='\n')
 8000538:	5d3d      	ldrb	r5, [r7, r4]
 800053a:	2d0a      	cmp	r5, #10
 800053c:	d005      	beq.n	800054a <_Z10modem_waitv+0x16a>
						pub_len=ii-r-5;
						break;
					}
					else
					{
						recive_packet_send[ii-r-5]=rx_data[ii];
 800053e:	5505      	strb	r5, [r0, r4]
				for(int ii=5+r;ii<400;ii++)
 8000540:	3401      	adds	r4, #1
 8000542:	42b4      	cmp	r4, r6
 8000544:	d1f8      	bne.n	8000538 <_Z10modem_waitv+0x158>
 8000546:	46b9      	mov	r9, r7
 8000548:	e792      	b.n	8000470 <_Z10modem_waitv+0x90>
						pub_len=ii-r-5;
 800054a:	003d      	movs	r5, r7
 800054c:	464f      	mov	r7, r9
 800054e:	46a9      	mov	r9, r5
 8000550:	1be4      	subs	r4, r4, r7
 8000552:	3c05      	subs	r4, #5
 8000554:	9403      	str	r4, [sp, #12]
						break;
 8000556:	2401      	movs	r4, #1
 8000558:	9400      	str	r4, [sp, #0]
 800055a:	e789      	b.n	8000470 <_Z10modem_waitv+0x90>
 800055c:	9b00      	ldr	r3, [sp, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d127      	bne.n	80005b2 <_Z10modem_waitv+0x1d2>
 8000562:	9b01      	ldr	r3, [sp, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d128      	bne.n	80005ba <_Z10modem_waitv+0x1da>
 8000568:	9b02      	ldr	r3, [sp, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d129      	bne.n	80005c2 <_Z10modem_waitv+0x1e2>
		//			//memset(rx_data, 9, 400);
		//		}

		break;
	}
	if(pub_len>100)
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <_Z10modem_waitv+0x214>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b64      	cmp	r3, #100	; 0x64
 8000574:	dd02      	ble.n	800057c <_Z10modem_waitv+0x19c>
	{
		pub_len=0;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <_Z10modem_waitv+0x214>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
	}
	if(sub_len>100)
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <_Z10modem_waitv+0x218>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b64      	cmp	r3, #100	; 0x64
 8000582:	dd02      	ble.n	800058a <_Z10modem_waitv+0x1aa>
	{
		sub_len=0;
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <_Z10modem_waitv+0x218>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
	}
	if(con_len>70)
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <_Z10modem_waitv+0x21c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b46      	cmp	r3, #70	; 0x46
 8000590:	dd02      	ble.n	8000598 <_Z10modem_waitv+0x1b8>
	{
		con_len=0;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <_Z10modem_waitv+0x21c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
	}

	memset(rx_data, 9, 400);
 8000598:	22c8      	movs	r2, #200	; 0xc8
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <_Z10modem_waitv+0x1f8>)
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	2109      	movs	r1, #9
 80005a0:	f002 fc68 	bl	8002e74 <memset>
	//	if(HAL_GetTick()%10000==0)
	//	{
	//		mqtt_message=Mqtt_Recive();
	//	}
}
 80005a4:	b00d      	add	sp, #52	; 0x34
 80005a6:	bcf0      	pop	{r4, r5, r6, r7}
 80005a8:	46bb      	mov	fp, r7
 80005aa:	46b2      	mov	sl, r6
 80005ac:	46a9      	mov	r9, r5
 80005ae:	46a0      	mov	r8, r4
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_Z10modem_waitv+0x214>)
 80005b4:	9a03      	ldr	r2, [sp, #12]
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	e7d3      	b.n	8000562 <_Z10modem_waitv+0x182>
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <_Z10modem_waitv+0x21c>)
 80005bc:	9a04      	ldr	r2, [sp, #16]
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e7d2      	b.n	8000568 <_Z10modem_waitv+0x188>
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <_Z10modem_waitv+0x218>)
 80005c4:	9a05      	ldr	r2, [sp, #20]
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e7d1      	b.n	800056e <_Z10modem_waitv+0x18e>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000298 	.word	0x20000298
 80005d0:	2000029c 	.word	0x2000029c
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	200005a8 	.word	0x200005a8
 80005dc:	20000218 	.word	0x20000218
 80005e0:	200003a3 	.word	0x200003a3
 80005e4:	200002a3 	.word	0x200002a3
 80005e8:	200004a8 	.word	0x200004a8
 80005ec:	08003680 	.word	0x08003680
 80005f0:	08003678 	.word	0x08003678
 80005f4:	200002a4 	.word	0x200002a4
 80005f8:	20000738 	.word	0x20000738
 80005fc:	20000080 	.word	0x20000080

08000600 <log_uart>:
void log_uart(char* data)
{
//	HAL_UART_Transmit(&huart2, (uint8_t*)"LOG:", 4,50);
//	HAL_UART_Transmit(&huart2, (uint8_t*)data, 50,200);
//	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2,50);
}
 8000600:	4770      	bx	lr

08000602 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000602:	b500      	push	{lr}
 8000604:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	222c      	movs	r2, #44	; 0x2c
 8000608:	2100      	movs	r1, #0
 800060a:	a809      	add	r0, sp, #36	; 0x24
 800060c:	f002 fc32 	bl	8002e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	2210      	movs	r2, #16
 8000612:	2100      	movs	r1, #0
 8000614:	a804      	add	r0, sp, #16
 8000616:	f002 fc2d 	bl	8002e74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061a:	2210      	movs	r2, #16
 800061c:	2100      	movs	r1, #0
 800061e:	4668      	mov	r0, sp
 8000620:	f002 fc28 	bl	8002e74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2201      	movs	r2, #1
 800062a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	320f      	adds	r2, #15
 800062e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	039b      	lsls	r3, r3, #14
 8000636:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	a808      	add	r0, sp, #32
 800063a:	f001 faa1 	bl	8001b80 <HAL_RCC_OscConfig>
 800063e:	2800      	cmp	r0, #0
 8000640:	d117      	bne.n	8000672 <_Z18SystemClock_Configv+0x70>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	2307      	movs	r3, #7
 8000644:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	3b05      	subs	r3, #5
 8000648:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000650:	2101      	movs	r1, #1
 8000652:	a804      	add	r0, sp, #16
 8000654:	f001 fd34 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000658:	2800      	cmp	r0, #0
 800065a:	d10c      	bne.n	8000676 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800065c:	2301      	movs	r3, #1
 800065e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000660:	2300      	movs	r3, #0
 8000662:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000664:	4668      	mov	r0, sp
 8000666:	f001 fdd7 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	2800      	cmp	r0, #0
 800066c:	d105      	bne.n	800067a <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
  }
}
 800066e:	b015      	add	sp, #84	; 0x54
 8000670:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000672:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000674:	e7fe      	b.n	8000674 <_Z18SystemClock_Configv+0x72>
 8000676:	b672      	cpsid	i
 8000678:	e7fe      	b.n	8000678 <_Z18SystemClock_Configv+0x76>
 800067a:	b672      	cpsid	i
 800067c:	e7fe      	b.n	800067c <_Z18SystemClock_Configv+0x7a>
	...

08000680 <main>:
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	46ce      	mov	lr, r9
 8000684:	4647      	mov	r7, r8
 8000686:	b580      	push	{r7, lr}
 8000688:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800068a:	f000 fff1 	bl	8001670 <HAL_Init>
  SystemClock_Config();
 800068e:	f7ff ffb8 	bl	8000602 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	2214      	movs	r2, #20
 8000694:	2100      	movs	r1, #0
 8000696:	a805      	add	r0, sp, #20
 8000698:	f002 fbec 	bl	8002e74 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	4c67      	ldr	r4, [pc, #412]	; (800083c <main+0x1bc>)
 800069e:	6963      	ldr	r3, [r4, #20]
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0312      	lsls	r2, r2, #12
 80006a4:	4313      	orrs	r3, r2
 80006a6:	6163      	str	r3, [r4, #20]
 80006a8:	6963      	ldr	r3, [r4, #20]
 80006aa:	4013      	ands	r3, r2
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	6963      	ldr	r3, [r4, #20]
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	03d2      	lsls	r2, r2, #15
 80006b6:	4313      	orrs	r3, r2
 80006b8:	6163      	str	r3, [r4, #20]
 80006ba:	6963      	ldr	r3, [r4, #20]
 80006bc:	4013      	ands	r3, r2
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	6963      	ldr	r3, [r4, #20]
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0292      	lsls	r2, r2, #10
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6163      	str	r3, [r4, #20]
 80006cc:	6963      	ldr	r3, [r4, #20]
 80006ce:	4013      	ands	r3, r2
 80006d0:	9303      	str	r3, [sp, #12]
 80006d2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	6963      	ldr	r3, [r4, #20]
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	02d2      	lsls	r2, r2, #11
 80006da:	4313      	orrs	r3, r2
 80006dc:	6163      	str	r3, [r4, #20]
 80006de:	6963      	ldr	r3, [r4, #20]
 80006e0:	4013      	ands	r3, r2
 80006e2:	9304      	str	r3, [sp, #16]
 80006e4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80006e6:	2580      	movs	r5, #128	; 0x80
 80006e8:	01ed      	lsls	r5, r5, #7
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <main+0x1c0>)
 80006ec:	4698      	mov	r8, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	0029      	movs	r1, r5
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 fa36 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006f8:	4f52      	ldr	r7, [pc, #328]	; (8000844 <main+0x1c4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	2107      	movs	r1, #7
 80006fe:	0038      	movs	r0, r7
 8000700:	f001 fa30 	bl	8001b64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000704:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2601      	movs	r6, #1
 8000708:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2500      	movs	r5, #0
 800070c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	a905      	add	r1, sp, #20
 8000712:	4640      	mov	r0, r8
 8000714:	f001 f940 	bl	8001998 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000718:	2307      	movs	r3, #7
 800071a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	a905      	add	r1, sp, #20
 8000724:	0038      	movs	r0, r7
 8000726:	f001 f937 	bl	8001998 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	6963      	ldr	r3, [r4, #20]
 800072c:	4333      	orrs	r3, r6
 800072e:	6163      	str	r3, [r4, #20]
 8000730:	6963      	ldr	r3, [r4, #20]
 8000732:	401e      	ands	r6, r3
 8000734:	9605      	str	r6, [sp, #20]
 8000736:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	200a      	movs	r0, #10
 800073e:	f000 ffcb 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000742:	200a      	movs	r0, #10
 8000744:	f000 fffa 	bl	800173c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	200b      	movs	r0, #11
 800074e:	f000 ffc3 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000752:	200b      	movs	r0, #11
 8000754:	f000 fff2 	bl	800173c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000758:	483b      	ldr	r0, [pc, #236]	; (8000848 <main+0x1c8>)
 800075a:	4b3c      	ldr	r3, [pc, #240]	; (800084c <main+0x1cc>)
 800075c:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	23e1      	movs	r3, #225	; 0xe1
 8000760:	025b      	lsls	r3, r3, #9
 8000762:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000764:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000766:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000768:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076a:	230c      	movs	r3, #12
 800076c:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800076e:	23c0      	movs	r3, #192	; 0xc0
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077a:	f002 fa5f 	bl	8002c3c <HAL_UART_Init>
 800077e:	2800      	cmp	r0, #0
 8000780:	d11c      	bne.n	80007bc <main+0x13c>
  huart2.Instance = USART2;
 8000782:	4833      	ldr	r0, [pc, #204]	; (8000850 <main+0x1d0>)
 8000784:	4b33      	ldr	r3, [pc, #204]	; (8000854 <main+0x1d4>)
 8000786:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000788:	23e1      	movs	r3, #225	; 0xe1
 800078a:	025b      	lsls	r3, r3, #9
 800078c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	2300      	movs	r3, #0
 8000790:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000792:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000794:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000796:	220c      	movs	r2, #12
 8000798:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	f002 fa4b 	bl	8002c3c <HAL_UART_Init>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d10a      	bne.n	80007c0 <main+0x140>
	HAL_Delay(7000);
 80007aa:	482b      	ldr	r0, [pc, #172]	; (8000858 <main+0x1d8>)
 80007ac:	f000 ff82 	bl	80016b4 <HAL_Delay>
	uint32_t last=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	4698      	mov	r8, r3
		if(!modem_flag&&HAL_GetTick()-last>=5000)
 80007b4:	4d29      	ldr	r5, [pc, #164]	; (800085c <main+0x1dc>)
		if(modem_flag)
 80007b6:	002c      	movs	r4, r5
			if(init_flag==0)
 80007b8:	4e29      	ldr	r6, [pc, #164]	; (8000860 <main+0x1e0>)
 80007ba:	e01a      	b.n	80007f2 <main+0x172>
 80007bc:	b672      	cpsid	i
	while (1)
 80007be:	e7fe      	b.n	80007be <main+0x13e>
 80007c0:	b672      	cpsid	i
 80007c2:	e7fe      	b.n	80007c2 <main+0x142>
		if(!modem_flag&&HAL_GetTick()-last>=5000)
 80007c4:	f000 ff70 	bl	80016a8 <HAL_GetTick>
 80007c8:	4643      	mov	r3, r8
 80007ca:	1ac0      	subs	r0, r0, r3
 80007cc:	4a25      	ldr	r2, [pc, #148]	; (8000864 <main+0x1e4>)
 80007ce:	4290      	cmp	r0, r2
 80007d0:	d912      	bls.n	80007f8 <main+0x178>
			modem_work();
 80007d2:	f7ff fd31 	bl	8000238 <_Z10modem_workv>
			last=HAL_GetTick();
 80007d6:	f000 ff67 	bl	80016a8 <HAL_GetTick>
 80007da:	4680      	mov	r8, r0
 80007dc:	e00c      	b.n	80007f8 <main+0x178>
				if(pub)
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0x1e8>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d11d      	bne.n	8000822 <main+0x1a2>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80007e6:	2104      	movs	r1, #4
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <main+0x1c4>)
 80007ea:	f001 f9c1 	bl	8001b70 <HAL_GPIO_TogglePin>
		modem_wait();
 80007ee:	f7ff fdf7 	bl	80003e0 <_Z10modem_waitv>
		if(!modem_flag&&HAL_GetTick()-last>=5000)
 80007f2:	782b      	ldrb	r3, [r5, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0e5      	beq.n	80007c4 <main+0x144>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80007f8:	2102      	movs	r1, #2
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <main+0x1c4>)
 80007fc:	f001 f9b8 	bl	8001b70 <HAL_GPIO_TogglePin>
		if(modem_flag)
 8000800:	7823      	ldrb	r3, [r4, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f3      	beq.n	80007ee <main+0x16e>
			if(init_flag==0)
 8000806:	6833      	ldr	r3, [r6, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1ec      	bne.n	80007e6 <main+0x166>
				if(con_len>0&&pub_len>0)
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <main+0x1ec>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dde4      	ble.n	80007de <main+0x15e>
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <main+0x1f0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dde0      	ble.n	80007de <main+0x15e>
					Mqtt_Init();
 800081c:	f000 f82c 	bl	8000878 <_Z9Mqtt_Initv>
 8000820:	e7dd      	b.n	80007de <main+0x15e>
 8000822:	2705      	movs	r7, #5
						if(!pub)
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <main+0x1e8>)
 8000826:	4699      	mov	r9, r3
						Mqtt_Recive();
 8000828:	f000 fc96 	bl	8001158 <_Z11Mqtt_Recivev>
						if(!pub)
 800082c:	464b      	mov	r3, r9
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0d8      	beq.n	80007e6 <main+0x166>
					for(int i=0;i<5;i++)
 8000834:	3f01      	subs	r7, #1
 8000836:	2f00      	cmp	r7, #0
 8000838:	d1f6      	bne.n	8000828 <main+0x1a8>
 800083a:	e7d4      	b.n	80007e6 <main+0x166>
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800
 8000844:	48000400 	.word	0x48000400
 8000848:	20000198 	.word	0x20000198
 800084c:	40013800 	.word	0x40013800
 8000850:	20000218 	.word	0x20000218
 8000854:	40004400 	.word	0x40004400
 8000858:	00001b58 	.word	0x00001b58
 800085c:	200002a0 	.word	0x200002a0
 8000860:	2000029c 	.word	0x2000029c
 8000864:	00001387 	.word	0x00001387
 8000868:	2000093c 	.word	0x2000093c
 800086c:	20000080 	.word	0x20000080
 8000870:	200002a4 	.word	0x200002a4

08000874 <Error_Handler>:
 8000874:	b672      	cpsid	i
	while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x2>

08000878 <_Z9Mqtt_Initv>:
bool pub=false;
/*Инициализация модема и mqtt необходимо передать apn, адрес сервера и имя пользователя
 * если модем уже запущен, а контролер перезагрузился то это тоже работает*/
char buffer3[512];
int Mqtt_Init()
{
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	46de      	mov	lr, fp
 800087c:	4657      	mov	r7, sl
 800087e:	464e      	mov	r6, r9
 8000880:	4645      	mov	r5, r8
 8000882:	b5e0      	push	{r5, r6, r7, lr}
 8000884:	b083      	sub	sp, #12
	//		return 0;
	//	}
	//	sendMQTTConnect(user,pass);
	//	publishMessage(topic,mess);

	if(err_flag==1)
 8000886:	4bc3      	ldr	r3, [pc, #780]	; (8000b94 <_Z9Mqtt_Initv+0x31c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d001      	beq.n	8000892 <_Z9Mqtt_Initv+0x1a>
 800088e:	f000 fbf6 	bl	800107e <_Z9Mqtt_Initv+0x806>
 8000892:	2505      	movs	r5, #5
	{
		bool net_flag=false;

		for(int i=0;i<5;i++)
		{
			memset(buffer3, 9, sizeof(buffer3));
 8000894:	4cc0      	ldr	r4, [pc, #768]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"\r\n",41,100);
 8000896:	4fc1      	ldr	r7, [pc, #772]	; (8000b9c <_Z9Mqtt_Initv+0x324>)
 8000898:	4ec1      	ldr	r6, [pc, #772]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 9, sizeof(buffer3));
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	2109      	movs	r1, #9
 80008a0:	0020      	movs	r0, r4
 80008a2:	f002 fae7 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"\r\n",41,100);
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	2229      	movs	r2, #41	; 0x29
 80008aa:	0039      	movs	r1, r7
 80008ac:	0030      	movs	r0, r6
 80008ae:	f002 f90d 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"");
 80008b2:	48bc      	ldr	r0, [pc, #752]	; (8000ba4 <_Z9Mqtt_Initv+0x32c>)
 80008b4:	f7ff fea4 	bl	8000600 <log_uart>
			//timer=HAL_GetTick();
			//log_buffer.append("LOG: STM32F0: ").append("AT+CGDCONT=1,\"IP\",\"internet.tele2.ru\"\r\n");
			//			HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
			HAL_Delay(1500);
 80008b8:	48bb      	ldr	r0, [pc, #748]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 80008ba:	f000 fefb 	bl	80016b4 <HAL_Delay>
			//			log_buffer.clear();
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3,150);
 80008be:	2296      	movs	r2, #150	; 0x96
 80008c0:	0021      	movs	r1, r4
 80008c2:	0030      	movs	r0, r6
 80008c4:	f001 fdb4 	bl	8002430 <HAL_UART_Receive_DMA>
			//			timer=HAL_GetTick();
			//			log_buffer.append("LOG: MODEM: ").append(buffer).append("\r\n");
			//			HAL_UART_Transmit(&huart2, (uint8_t*)log_buffer.c_str(), log_buffer.size(), log_buffer.size()*3);
			//HAL_Delay(1000);
			//			log_buffer.clear();
			log_uart(buffer3);
 80008c8:	0020      	movs	r0, r4
 80008ca:	f7ff fe99 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 80008ce:	49b7      	ldr	r1, [pc, #732]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 80008d0:	0020      	movs	r0, r4
 80008d2:	f002 fad7 	bl	8002e84 <strstr>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d110      	bne.n	80008fc <_Z9Mqtt_Initv+0x84>
				break;
			}
			else
			{
				net_flag=false;
				HAL_Delay(10000);
 80008da:	48b5      	ldr	r0, [pc, #724]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 80008dc:	f000 feea 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 80008e0:	3d01      	subs	r5, #1
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d1d9      	bne.n	800089a <_Z9Mqtt_Initv+0x22>
			}
		}
		if(!net_flag)
		{
			modem_flag=false;
 80008e6:	4bb3      	ldr	r3, [pc, #716]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]


	return 0;


}
 80008ec:	2000      	movs	r0, #0
 80008ee:	b003      	add	sp, #12
 80008f0:	bcf0      	pop	{r4, r5, r6, r7}
 80008f2:	46bb      	mov	fp, r7
 80008f4:	46b2      	mov	sl, r6
 80008f6:	46a9      	mov	r9, r5
 80008f8:	46a0      	mov	r8, r4
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 80008fe:	4ca6      	ldr	r4, [pc, #664]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGSOCKCONT=1,\"IP\",\"internet.tele2.ru\"\r\n",44,100);
 8000900:	4fad      	ldr	r7, [pc, #692]	; (8000bb8 <_Z9Mqtt_Initv+0x340>)
 8000902:	4ea7      	ldr	r6, [pc, #668]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	210a      	movs	r1, #10
 800090a:	0020      	movs	r0, r4
 800090c:	f002 fab2 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CGSOCKCONT=1,\"IP\",\"internet.tele2.ru\"\r\n",44,100);
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	222c      	movs	r2, #44	; 0x2c
 8000914:	0039      	movs	r1, r7
 8000916:	0030      	movs	r0, r6
 8000918:	f002 f8d8 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CGSOCKCONT=1,\"IP\",\"internet.tele2.ru\"");
 800091c:	48a7      	ldr	r0, [pc, #668]	; (8000bbc <_Z9Mqtt_Initv+0x344>)
 800091e:	f7ff fe6f 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 8000922:	48a1      	ldr	r0, [pc, #644]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 8000924:	f000 fec6 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000928:	2297      	movs	r2, #151	; 0x97
 800092a:	0021      	movs	r1, r4
 800092c:	0030      	movs	r0, r6
 800092e:	f001 fd7f 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff fe64 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000938:	499c      	ldr	r1, [pc, #624]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 800093a:	0020      	movs	r0, r4
 800093c:	f002 faa2 	bl	8002e84 <strstr>
 8000940:	2800      	cmp	r0, #0
 8000942:	d109      	bne.n	8000958 <_Z9Mqtt_Initv+0xe0>
				HAL_Delay(10000);
 8000944:	489a      	ldr	r0, [pc, #616]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 8000946:	f000 feb5 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 800094a:	3d01      	subs	r5, #1
 800094c:	2d00      	cmp	r5, #0
 800094e:	d1d9      	bne.n	8000904 <_Z9Mqtt_Initv+0x8c>
			modem_flag=false;
 8000950:	4b98      	ldr	r3, [pc, #608]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
			return 0;
 8000956:	e7c9      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000958:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 800095a:	4c8f      	ldr	r4, [pc, #572]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CSOCKSETPN=1\r\n",19,100);
 800095c:	4f98      	ldr	r7, [pc, #608]	; (8000bc0 <_Z9Mqtt_Initv+0x348>)
 800095e:	4e90      	ldr	r6, [pc, #576]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	210a      	movs	r1, #10
 8000966:	0020      	movs	r0, r4
 8000968:	f002 fa84 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CSOCKSETPN=1\r\n",19,100);
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	2213      	movs	r2, #19
 8000970:	0039      	movs	r1, r7
 8000972:	0030      	movs	r0, r6
 8000974:	f002 f8aa 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CSOCKSETPN=1");
 8000978:	4892      	ldr	r0, [pc, #584]	; (8000bc4 <_Z9Mqtt_Initv+0x34c>)
 800097a:	f7ff fe41 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 800097e:	488a      	ldr	r0, [pc, #552]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 8000980:	f000 fe98 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000984:	2297      	movs	r2, #151	; 0x97
 8000986:	0021      	movs	r1, r4
 8000988:	0030      	movs	r0, r6
 800098a:	f001 fd51 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 800098e:	0020      	movs	r0, r4
 8000990:	f7ff fe36 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000994:	4985      	ldr	r1, [pc, #532]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 8000996:	0020      	movs	r0, r4
 8000998:	f002 fa74 	bl	8002e84 <strstr>
 800099c:	2800      	cmp	r0, #0
 800099e:	d109      	bne.n	80009b4 <_Z9Mqtt_Initv+0x13c>
				HAL_Delay(10000);
 80009a0:	4883      	ldr	r0, [pc, #524]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 80009a2:	f000 fe87 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 80009a6:	3d01      	subs	r5, #1
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d1d9      	bne.n	8000960 <_Z9Mqtt_Initv+0xe8>
			modem_flag=false;
 80009ac:	4b81      	ldr	r3, [pc, #516]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			return 0;
 80009b2:	e79b      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 80009b4:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 80009b6:	4c78      	ldr	r4, [pc, #480]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMODE=0\r\n",16,100);
 80009b8:	4f83      	ldr	r7, [pc, #524]	; (8000bc8 <_Z9Mqtt_Initv+0x350>)
 80009ba:	4e79      	ldr	r6, [pc, #484]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	210a      	movs	r1, #10
 80009c2:	0020      	movs	r0, r4
 80009c4:	f002 fa56 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMODE=0\r\n",16,100);
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	2210      	movs	r2, #16
 80009cc:	0039      	movs	r1, r7
 80009ce:	0030      	movs	r0, r6
 80009d0:	f002 f87c 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CIPMODE=0");
 80009d4:	487d      	ldr	r0, [pc, #500]	; (8000bcc <_Z9Mqtt_Initv+0x354>)
 80009d6:	f7ff fe13 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 80009da:	4873      	ldr	r0, [pc, #460]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 80009dc:	f000 fe6a 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 80009e0:	2297      	movs	r2, #151	; 0x97
 80009e2:	0021      	movs	r1, r4
 80009e4:	0030      	movs	r0, r6
 80009e6:	f001 fd23 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 80009ea:	0020      	movs	r0, r4
 80009ec:	f7ff fe08 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 80009f0:	496e      	ldr	r1, [pc, #440]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 80009f2:	0020      	movs	r0, r4
 80009f4:	f002 fa46 	bl	8002e84 <strstr>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d106      	bne.n	8000a0a <_Z9Mqtt_Initv+0x192>
				HAL_Delay(1000);
 80009fc:	30fa      	adds	r0, #250	; 0xfa
 80009fe:	0080      	lsls	r0, r0, #2
 8000a00:	f000 fe58 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000a04:	3d01      	subs	r5, #1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d1d8      	bne.n	80009bc <_Z9Mqtt_Initv+0x144>
		for(int i=0;i<5;i++)
 8000a0a:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 8000a0c:	4c62      	ldr	r4, [pc, #392]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPRXGET=1\r\n",17,100);
 8000a0e:	4f70      	ldr	r7, [pc, #448]	; (8000bd0 <_Z9Mqtt_Initv+0x358>)
 8000a10:	4e63      	ldr	r6, [pc, #396]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	210a      	movs	r1, #10
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f002 fa2b 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPRXGET=1\r\n",17,100);
 8000a1e:	2364      	movs	r3, #100	; 0x64
 8000a20:	2211      	movs	r2, #17
 8000a22:	0039      	movs	r1, r7
 8000a24:	0030      	movs	r0, r6
 8000a26:	f002 f851 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CIPRXGET=1");
 8000a2a:	486a      	ldr	r0, [pc, #424]	; (8000bd4 <_Z9Mqtt_Initv+0x35c>)
 8000a2c:	f7ff fde8 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 8000a30:	485d      	ldr	r0, [pc, #372]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 8000a32:	f000 fe3f 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000a36:	2297      	movs	r2, #151	; 0x97
 8000a38:	0021      	movs	r1, r4
 8000a3a:	0030      	movs	r0, r6
 8000a3c:	f001 fcf8 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000a40:	0020      	movs	r0, r4
 8000a42:	f7ff fddd 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000a46:	4959      	ldr	r1, [pc, #356]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f002 fa1b 	bl	8002e84 <strstr>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d105      	bne.n	8000a5e <_Z9Mqtt_Initv+0x1e6>
				HAL_Delay(10000);
 8000a52:	4857      	ldr	r0, [pc, #348]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 8000a54:	f000 fe2e 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000a58:	3d01      	subs	r5, #1
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d1d9      	bne.n	8000a12 <_Z9Mqtt_Initv+0x19a>
		for(int i=0;i<5;i++)
 8000a5e:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 8000a60:	4c4d      	ldr	r4, [pc, #308]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+NETOPEN\r\n",14,100);
 8000a62:	4f5d      	ldr	r7, [pc, #372]	; (8000bd8 <_Z9Mqtt_Initv+0x360>)
 8000a64:	4e4e      	ldr	r6, [pc, #312]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	210a      	movs	r1, #10
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f002 fa01 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+NETOPEN\r\n",14,100);
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	220e      	movs	r2, #14
 8000a76:	0039      	movs	r1, r7
 8000a78:	0030      	movs	r0, r6
 8000a7a:	f002 f827 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+NETOPEN");
 8000a7e:	4857      	ldr	r0, [pc, #348]	; (8000bdc <_Z9Mqtt_Initv+0x364>)
 8000a80:	f7ff fdbe 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 8000a84:	4848      	ldr	r0, [pc, #288]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 8000a86:	f000 fe15 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000a8a:	2297      	movs	r2, #151	; 0x97
 8000a8c:	0021      	movs	r1, r4
 8000a8e:	0030      	movs	r0, r6
 8000a90:	f001 fcce 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000a94:	0020      	movs	r0, r4
 8000a96:	f7ff fdb3 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000a9a:	4944      	ldr	r1, [pc, #272]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	f002 f9f1 	bl	8002e84 <strstr>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d10f      	bne.n	8000ac6 <_Z9Mqtt_Initv+0x24e>
			else if(strstr(buffer3,"opened"))
 8000aa6:	494e      	ldr	r1, [pc, #312]	; (8000be0 <_Z9Mqtt_Initv+0x368>)
 8000aa8:	483b      	ldr	r0, [pc, #236]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
 8000aaa:	f002 f9eb 	bl	8002e84 <strstr>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d137      	bne.n	8000b22 <_Z9Mqtt_Initv+0x2aa>
				HAL_Delay(10000);
 8000ab2:	483f      	ldr	r0, [pc, #252]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 8000ab4:	f000 fdfe 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000ab8:	3d01      	subs	r5, #1
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d1d3      	bne.n	8000a66 <_Z9Mqtt_Initv+0x1ee>
			modem_flag=false;
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			return 0;
 8000ac4:	e712      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000ac6:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 8000ac8:	4c33      	ldr	r4, [pc, #204]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+IPADDR\r\n",13,100);
 8000aca:	4f46      	ldr	r7, [pc, #280]	; (8000be4 <_Z9Mqtt_Initv+0x36c>)
 8000acc:	4e34      	ldr	r6, [pc, #208]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	0020      	movs	r0, r4
 8000ad6:	f002 f9cd 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+IPADDR\r\n",13,100);
 8000ada:	2364      	movs	r3, #100	; 0x64
 8000adc:	220d      	movs	r2, #13
 8000ade:	0039      	movs	r1, r7
 8000ae0:	0030      	movs	r0, r6
 8000ae2:	f001 fff3 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+IPADDR");
 8000ae6:	4840      	ldr	r0, [pc, #256]	; (8000be8 <_Z9Mqtt_Initv+0x370>)
 8000ae8:	f7ff fd8a 	bl	8000600 <log_uart>
			HAL_Delay(1500);
 8000aec:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <_Z9Mqtt_Initv+0x330>)
 8000aee:	f000 fde1 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000af2:	2297      	movs	r2, #151	; 0x97
 8000af4:	0021      	movs	r1, r4
 8000af6:	0030      	movs	r0, r6
 8000af8:	f001 fc9a 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000afc:	0020      	movs	r0, r4
 8000afe:	f7ff fd7f 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000b02:	492a      	ldr	r1, [pc, #168]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 8000b04:	0020      	movs	r0, r4
 8000b06:	f002 f9bd 	bl	8002e84 <strstr>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d10b      	bne.n	8000b26 <_Z9Mqtt_Initv+0x2ae>
				HAL_Delay(10000);
 8000b0e:	4828      	ldr	r0, [pc, #160]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 8000b10:	f000 fdd0 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000b14:	3d01      	subs	r5, #1
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d1d9      	bne.n	8000ace <_Z9Mqtt_Initv+0x256>
			modem_flag=false;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			return 0;
 8000b20:	e6e4      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000b22:	2505      	movs	r5, #5
 8000b24:	e7d0      	b.n	8000ac8 <_Z9Mqtt_Initv+0x250>
 8000b26:	2505      	movs	r5, #5
			memset(buffer3, 10, sizeof(buffer3));
 8000b28:	4c1b      	ldr	r4, [pc, #108]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000b2a:	4f30      	ldr	r7, [pc, #192]	; (8000bec <_Z9Mqtt_Initv+0x374>)
 8000b2c:	4e1c      	ldr	r6, [pc, #112]	; (8000ba0 <_Z9Mqtt_Initv+0x328>)
			memset(buffer3, 10, sizeof(buffer3));
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	210a      	movs	r1, #10
 8000b34:	0020      	movs	r0, r4
 8000b36:	f002 f99d 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	222e      	movs	r2, #46	; 0x2e
 8000b3e:	0039      	movs	r1, r7
 8000b40:	0030      	movs	r0, r6
 8000b42:	f001 ffc3 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883");
 8000b46:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <_Z9Mqtt_Initv+0x378>)
 8000b48:	f7ff fd5a 	bl	8000600 <log_uart>
			HAL_Delay(3500);
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <_Z9Mqtt_Initv+0x37c>)
 8000b4e:	f000 fdb1 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000b52:	2297      	movs	r2, #151	; 0x97
 8000b54:	0021      	movs	r1, r4
 8000b56:	0030      	movs	r0, r6
 8000b58:	f001 fc6a 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart(buffer3);
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f7ff fd4f 	bl	8000600 <log_uart>
			if(strstr(buffer3,"OK"))
 8000b62:	4912      	ldr	r1, [pc, #72]	; (8000bac <_Z9Mqtt_Initv+0x334>)
 8000b64:	0020      	movs	r0, r4
 8000b66:	f002 f98d 	bl	8002e84 <strstr>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d000      	beq.n	8000b70 <_Z9Mqtt_Initv+0x2f8>
 8000b6e:	e209      	b.n	8000f84 <_Z9Mqtt_Initv+0x70c>
			else if(strstr(buffer3,"CIPOPEN: 0,4"))
 8000b70:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <_Z9Mqtt_Initv+0x380>)
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <_Z9Mqtt_Initv+0x320>)
 8000b74:	f002 f986 	bl	8002e84 <strstr>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d000      	beq.n	8000b7e <_Z9Mqtt_Initv+0x306>
 8000b7c:	e202      	b.n	8000f84 <_Z9Mqtt_Initv+0x70c>
				HAL_Delay(10000);
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <_Z9Mqtt_Initv+0x338>)
 8000b80:	f000 fd98 	bl	80016b4 <HAL_Delay>
		for(int i=0;i<5;i++)
 8000b84:	3d01      	subs	r5, #1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d1d1      	bne.n	8000b2e <_Z9Mqtt_Initv+0x2b6>
			modem_flag=false;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <_Z9Mqtt_Initv+0x33c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
			return 0;
 8000b90:	e6ac      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000000 	.word	0x20000000
 8000b98:	2000073c 	.word	0x2000073c
 8000b9c:	08003688 	.word	0x08003688
 8000ba0:	20000198 	.word	0x20000198
 8000ba4:	080036b0 	.word	0x080036b0
 8000ba8:	000005dc 	.word	0x000005dc
 8000bac:	080036d8 	.word	0x080036d8
 8000bb0:	00002710 	.word	0x00002710
 8000bb4:	200002a0 	.word	0x200002a0
 8000bb8:	080036dc 	.word	0x080036dc
 8000bbc:	08003708 	.word	0x08003708
 8000bc0:	08003734 	.word	0x08003734
 8000bc4:	08003748 	.word	0x08003748
 8000bc8:	08003758 	.word	0x08003758
 8000bcc:	08003768 	.word	0x08003768
 8000bd0:	08003778 	.word	0x08003778
 8000bd4:	08003788 	.word	0x08003788
 8000bd8:	08003798 	.word	0x08003798
 8000bdc:	080037a8 	.word	0x080037a8
 8000be0:	080037b4 	.word	0x080037b4
 8000be4:	080037bc 	.word	0x080037bc
 8000be8:	080037c8 	.word	0x080037c8
 8000bec:	080037d4 	.word	0x080037d4
 8000bf0:	08003800 	.word	0x08003800
 8000bf4:	00000dac 	.word	0x00000dac
 8000bf8:	08003828 	.word	0x08003828
		if(buffer3[i]=='I'&&buffer3[i+1]=='P'&&buffer3[i+2]=='C'&&buffer3[i+3]=='L'&&buffer3[i+4]=='O'&&buffer3[i+5]=='S'&&buffer3[i+6]=='E')
 8000bfc:	7863      	ldrb	r3, [r4, #1]
 8000bfe:	2b50      	cmp	r3, #80	; 0x50
 8000c00:	d000      	beq.n	8000c04 <_Z9Mqtt_Initv+0x38c>
 8000c02:	e0aa      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000c04:	78a3      	ldrb	r3, [r4, #2]
 8000c06:	2b43      	cmp	r3, #67	; 0x43
 8000c08:	d000      	beq.n	8000c0c <_Z9Mqtt_Initv+0x394>
 8000c0a:	e0a6      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000c0c:	78e3      	ldrb	r3, [r4, #3]
 8000c0e:	2b4c      	cmp	r3, #76	; 0x4c
 8000c10:	d000      	beq.n	8000c14 <_Z9Mqtt_Initv+0x39c>
 8000c12:	e0a2      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000c14:	7923      	ldrb	r3, [r4, #4]
 8000c16:	2b4f      	cmp	r3, #79	; 0x4f
 8000c18:	d000      	beq.n	8000c1c <_Z9Mqtt_Initv+0x3a4>
 8000c1a:	e09e      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000c1c:	7963      	ldrb	r3, [r4, #5]
 8000c1e:	2b53      	cmp	r3, #83	; 0x53
 8000c20:	d000      	beq.n	8000c24 <_Z9Mqtt_Initv+0x3ac>
 8000c22:	e09a      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000c24:	79a3      	ldrb	r3, [r4, #6]
 8000c26:	2b45      	cmp	r3, #69	; 0x45
 8000c28:	d000      	beq.n	8000c2c <_Z9Mqtt_Initv+0x3b4>
 8000c2a:	e096      	b.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
				HAL_Delay(30);
 8000c2c:	201e      	movs	r0, #30
 8000c2e:	f000 fd41 	bl	80016b4 <HAL_Delay>
 8000c32:	201e      	movs	r0, #30
 8000c34:	f000 fd3e 	bl	80016b4 <HAL_Delay>
 8000c38:	201e      	movs	r0, #30
 8000c3a:	f000 fd3b 	bl	80016b4 <HAL_Delay>
 8000c3e:	201e      	movs	r0, #30
 8000c40:	f000 fd38 	bl	80016b4 <HAL_Delay>
 8000c44:	201e      	movs	r0, #30
 8000c46:	f000 fd35 	bl	80016b4 <HAL_Delay>
			sub=false;
 8000c4a:	4bbc      	ldr	r3, [pc, #752]	; (8000f3c <_Z9Mqtt_Initv+0x6c4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			pub_len=0;
 8000c50:	4bbb      	ldr	r3, [pc, #748]	; (8000f40 <_Z9Mqtt_Initv+0x6c8>)
 8000c52:	601a      	str	r2, [r3, #0]
			memset(buffer3, 10, sizeof(buffer3));\
 8000c54:	4bbb      	ldr	r3, [pc, #748]	; (8000f44 <_Z9Mqtt_Initv+0x6cc>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	210a      	movs	r1, #10
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f002 f908 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000c64:	49b8      	ldr	r1, [pc, #736]	; (8000f48 <_Z9Mqtt_Initv+0x6d0>)
 8000c66:	48b9      	ldr	r0, [pc, #740]	; (8000f4c <_Z9Mqtt_Initv+0x6d4>)
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	222e      	movs	r2, #46	; 0x2e
 8000c6c:	4681      	mov	r9, r0
 8000c6e:	f001 ff2d 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(3500);
 8000c72:	48b7      	ldr	r0, [pc, #732]	; (8000f50 <_Z9Mqtt_Initv+0x6d8>)
 8000c74:	f000 fd1e 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000c78:	2297      	movs	r2, #151	; 0x97
 8000c7a:	4651      	mov	r1, sl
 8000c7c:	4648      	mov	r0, r9
 8000c7e:	f001 fbd7 	bl	8002430 <HAL_UART_Receive_DMA>
			HAL_Delay(1000);
 8000c82:	20fa      	movs	r0, #250	; 0xfa
 8000c84:	0080      	lsls	r0, r0, #2
 8000c86:	f000 fd15 	bl	80016b4 <HAL_Delay>
			memset(buffer3, 10, sizeof(buffer3));
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	210a      	movs	r1, #10
 8000c90:	4650      	mov	r0, sl
 8000c92:	f002 f8ef 	bl	8002e74 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000c96:	4baf      	ldr	r3, [pc, #700]	; (8000f54 <_Z9Mqtt_Initv+0x6dc>)
 8000c98:	469b      	mov	fp, r3
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4bae      	ldr	r3, [pc, #696]	; (8000f58 <_Z9Mqtt_Initv+0x6e0>)
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	f002 f8c6 	bl	8002e34 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	221e      	movs	r2, #30
 8000cac:	4651      	mov	r1, sl
 8000cae:	4648      	mov	r0, r9
 8000cb0:	f001 ff0c 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f000 fcfd 	bl	80016b4 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init ,con_len+3,150);
 8000cba:	465b      	mov	r3, fp
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	3203      	adds	r2, #3
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	49a6      	ldr	r1, [pc, #664]	; (8000f5c <_Z9Mqtt_Initv+0x6e4>)
 8000cc4:	2396      	movs	r3, #150	; 0x96
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	f001 ff00 	bl	8002acc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000ccc:	49a4      	ldr	r1, [pc, #656]	; (8000f60 <_Z9Mqtt_Initv+0x6e8>)
 8000cce:	2332      	movs	r3, #50	; 0x32
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	9101      	str	r1, [sp, #4]
 8000cd4:	4648      	mov	r0, r9
 8000cd6:	f001 fef9 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(300);
 8000cda:	2096      	movs	r0, #150	; 0x96
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	f000 fce9 	bl	80016b4 <HAL_Delay>
			memset(buffer3, 9, 400);
 8000ce2:	22c8      	movs	r2, #200	; 0xc8
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	2109      	movs	r1, #9
 8000ce8:	4650      	mov	r0, sl
 8000cea:	f002 f8c3 	bl	8002e74 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 8000cee:	4b9d      	ldr	r3, [pc, #628]	; (8000f64 <_Z9Mqtt_Initv+0x6ec>)
 8000cf0:	469b      	mov	fp, r3
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	9900      	ldr	r1, [sp, #0]
 8000cf6:	4650      	mov	r0, sl
 8000cf8:	f002 f89c 	bl	8002e34 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	2216      	movs	r2, #22
 8000d00:	4651      	mov	r1, sl
 8000d02:	4648      	mov	r0, r9
 8000d04:	f001 fee2 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(200);
 8000d08:	20c8      	movs	r0, #200	; 0xc8
 8000d0a:	f000 fcd3 	bl	80016b4 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 8000d0e:	465b      	mov	r3, fp
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	0053      	lsls	r3, r2, #1
 8000d14:	189b      	adds	r3, r3, r2
 8000d16:	b292      	uxth	r2, r2
 8000d18:	4993      	ldr	r1, [pc, #588]	; (8000f68 <_Z9Mqtt_Initv+0x6f0>)
 8000d1a:	4648      	mov	r0, r9
 8000d1c:	f001 fed6 	bl	8002acc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000d20:	2332      	movs	r3, #50	; 0x32
 8000d22:	2202      	movs	r2, #2
 8000d24:	9901      	ldr	r1, [sp, #4]
 8000d26:	4648      	mov	r0, r9
 8000d28:	f001 fed0 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(500);
 8000d2c:	20fa      	movs	r0, #250	; 0xfa
 8000d2e:	0040      	lsls	r0, r0, #1
 8000d30:	f000 fcc0 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 512);
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4651      	mov	r1, sl
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	f001 fb78 	bl	8002430 <HAL_UART_Receive_DMA>
			HAL_Delay(100);
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f000 fcb7 	bl	80016b4 <HAL_Delay>
			pub=false;
 8000d46:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <_Z9Mqtt_Initv+0x6f4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
		}
 8000d4c:	e00a      	b.n	8000d64 <_Z9Mqtt_Initv+0x4ec>
		else if(buffer3[i]=='O'&&buffer3[i+1]=='K')
 8000d4e:	2b4f      	cmp	r3, #79	; 0x4f
 8000d50:	d103      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000d52:	7863      	ldrb	r3, [r4, #1]
 8000d54:	2b4b      	cmp	r3, #75	; 0x4b
 8000d56:	d100      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000d58:	e09a      	b.n	8000e90 <_Z9Mqtt_Initv+0x618>
			sub=false;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	7033      	strb	r3, [r6, #0]
			pub_len=0;
 8000d5e:	603b      	str	r3, [r7, #0]
			pub=false;
 8000d60:	4642      	mov	r2, r8
 8000d62:	7013      	strb	r3, [r2, #0]
	for(int i=0;i<450;i++)
 8000d64:	3401      	adds	r4, #1
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	d100      	bne.n	8000d6c <_Z9Mqtt_Initv+0x4f4>
 8000d6a:	e0af      	b.n	8000ecc <_Z9Mqtt_Initv+0x654>
		if(buffer3[i]=='I'&&buffer3[i+1]=='P'&&buffer3[i+2]=='C'&&buffer3[i+3]=='L'&&buffer3[i+4]=='O'&&buffer3[i+5]=='S'&&buffer3[i+6]=='E')
 8000d6c:	7823      	ldrb	r3, [r4, #0]
 8000d6e:	2b49      	cmp	r3, #73	; 0x49
 8000d70:	d100      	bne.n	8000d74 <_Z9Mqtt_Initv+0x4fc>
 8000d72:	e743      	b.n	8000bfc <_Z9Mqtt_Initv+0x384>
		else if(buffer3[i]=='E'&&buffer3[i+1]=='R'&&buffer3[i+2]=='R'&&buffer3[i+3]=='O'&&buffer3[i+4]=='R')
 8000d74:	2b45      	cmp	r3, #69	; 0x45
 8000d76:	d1ea      	bne.n	8000d4e <_Z9Mqtt_Initv+0x4d6>
 8000d78:	7863      	ldrb	r3, [r4, #1]
 8000d7a:	2b52      	cmp	r3, #82	; 0x52
 8000d7c:	d1ed      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000d7e:	78a3      	ldrb	r3, [r4, #2]
 8000d80:	2b52      	cmp	r3, #82	; 0x52
 8000d82:	d1ea      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000d84:	78e3      	ldrb	r3, [r4, #3]
 8000d86:	2b4f      	cmp	r3, #79	; 0x4f
 8000d88:	d1e7      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
 8000d8a:	7923      	ldrb	r3, [r4, #4]
 8000d8c:	2b52      	cmp	r3, #82	; 0x52
 8000d8e:	d1e4      	bne.n	8000d5a <_Z9Mqtt_Initv+0x4e2>
			pub_len=0;
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <_Z9Mqtt_Initv+0x6c8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
			pub=false;
 8000d96:	4b75      	ldr	r3, [pc, #468]	; (8000f6c <_Z9Mqtt_Initv+0x6f4>)
 8000d98:	701a      	strb	r2, [r3, #0]
			memset(buffer3, 10, sizeof(buffer3));
 8000d9a:	4b6a      	ldr	r3, [pc, #424]	; (8000f44 <_Z9Mqtt_Initv+0x6cc>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	210a      	movs	r1, #10
 8000da2:	469a      	mov	sl, r3
 8000da4:	0018      	movs	r0, r3
 8000da6:	f002 f865 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1,(uint8_t*)"AT+CIPOPEN=0,\"TCP\",\"unitek.irz.ru\",1883\r\n" , 46,100);
 8000daa:	4967      	ldr	r1, [pc, #412]	; (8000f48 <_Z9Mqtt_Initv+0x6d0>)
 8000dac:	4867      	ldr	r0, [pc, #412]	; (8000f4c <_Z9Mqtt_Initv+0x6d4>)
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	222e      	movs	r2, #46	; 0x2e
 8000db2:	4681      	mov	r9, r0
 8000db4:	f001 fe8a 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(3500);
 8000db8:	4865      	ldr	r0, [pc, #404]	; (8000f50 <_Z9Mqtt_Initv+0x6d8>)
 8000dba:	f000 fc7b 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000dbe:	2297      	movs	r2, #151	; 0x97
 8000dc0:	4651      	mov	r1, sl
 8000dc2:	4648      	mov	r0, r9
 8000dc4:	f001 fb34 	bl	8002430 <HAL_UART_Receive_DMA>
			HAL_Delay(1000);
 8000dc8:	20fa      	movs	r0, #250	; 0xfa
 8000dca:	0080      	lsls	r0, r0, #2
 8000dcc:	f000 fc72 	bl	80016b4 <HAL_Delay>
			memset(buffer3, 10, sizeof(buffer3));
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	210a      	movs	r1, #10
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	f002 f84c 	bl	8002e74 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <_Z9Mqtt_Initv+0x6dc>)
 8000dde:	469b      	mov	fp, r3
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <_Z9Mqtt_Initv+0x6e0>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	0019      	movs	r1, r3
 8000de8:	4650      	mov	r0, sl
 8000dea:	f002 f823 	bl	8002e34 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	221e      	movs	r2, #30
 8000df2:	4651      	mov	r1, sl
 8000df4:	4648      	mov	r0, r9
 8000df6:	f001 fe69 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 fc5a 	bl	80016b4 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init , con_len,100);
 8000e00:	465b      	mov	r3, fp
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	4955      	ldr	r1, [pc, #340]	; (8000f5c <_Z9Mqtt_Initv+0x6e4>)
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	4648      	mov	r0, r9
 8000e0a:	f001 fe5f 	bl	8002acc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000e0e:	4954      	ldr	r1, [pc, #336]	; (8000f60 <_Z9Mqtt_Initv+0x6e8>)
 8000e10:	2332      	movs	r3, #50	; 0x32
 8000e12:	2202      	movs	r2, #2
 8000e14:	9101      	str	r1, [sp, #4]
 8000e16:	4648      	mov	r0, r9
 8000e18:	f001 fe58 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(300);
 8000e1c:	2096      	movs	r0, #150	; 0x96
 8000e1e:	0040      	lsls	r0, r0, #1
 8000e20:	f000 fc48 	bl	80016b4 <HAL_Delay>
			memset(buffer3, 9, 400);
 8000e24:	22c8      	movs	r2, #200	; 0xc8
 8000e26:	0052      	lsls	r2, r2, #1
 8000e28:	2109      	movs	r1, #9
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	f002 f822 	bl	8002e74 <memset>
			sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 8000e30:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <_Z9Mqtt_Initv+0x6ec>)
 8000e32:	469b      	mov	fp, r3
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	9900      	ldr	r1, [sp, #0]
 8000e38:	4650      	mov	r0, sl
 8000e3a:	f001 fffb 	bl	8002e34 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	2216      	movs	r2, #22
 8000e42:	4651      	mov	r1, sl
 8000e44:	4648      	mov	r0, r9
 8000e46:	f001 fe41 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(200);
 8000e4a:	20c8      	movs	r0, #200	; 0xc8
 8000e4c:	f000 fc32 	bl	80016b4 <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 8000e50:	465b      	mov	r3, fp
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	0053      	lsls	r3, r2, #1
 8000e56:	189b      	adds	r3, r3, r2
 8000e58:	b292      	uxth	r2, r2
 8000e5a:	4943      	ldr	r1, [pc, #268]	; (8000f68 <_Z9Mqtt_Initv+0x6f0>)
 8000e5c:	4648      	mov	r0, r9
 8000e5e:	f001 fe35 	bl	8002acc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000e62:	2332      	movs	r3, #50	; 0x32
 8000e64:	2202      	movs	r2, #2
 8000e66:	9901      	ldr	r1, [sp, #4]
 8000e68:	4648      	mov	r0, r9
 8000e6a:	f001 fe2f 	bl	8002acc <HAL_UART_Transmit>
			HAL_Delay(500);
 8000e6e:	20fa      	movs	r0, #250	; 0xfa
 8000e70:	0040      	lsls	r0, r0, #1
 8000e72:	f000 fc1f 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 512);
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4651      	mov	r1, sl
 8000e7c:	4648      	mov	r0, r9
 8000e7e:	f001 fad7 	bl	8002430 <HAL_UART_Receive_DMA>
			HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f000 fc16 	bl	80016b4 <HAL_Delay>
			sub=false;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <_Z9Mqtt_Initv+0x6c4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e769      	b.n	8000d64 <_Z9Mqtt_Initv+0x4ec>
			pub_len=0;
 8000e90:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <_Z9Mqtt_Initv+0x6c8>)
 8000e92:	2400      	movs	r4, #0
 8000e94:	601c      	str	r4, [r3, #0]
			memset(buffer3, 9, sizeof(buffer3));
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	482a      	ldr	r0, [pc, #168]	; (8000f44 <_Z9Mqtt_Initv+0x6cc>)
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	2109      	movs	r1, #9
 8000e9e:	f001 ffe9 	bl	8002e74 <memset>
				HAL_Delay(30);
 8000ea2:	201e      	movs	r0, #30
 8000ea4:	f000 fc06 	bl	80016b4 <HAL_Delay>
 8000ea8:	201e      	movs	r0, #30
 8000eaa:	f000 fc03 	bl	80016b4 <HAL_Delay>
 8000eae:	201e      	movs	r0, #30
 8000eb0:	f000 fc00 	bl	80016b4 <HAL_Delay>
 8000eb4:	201e      	movs	r0, #30
 8000eb6:	f000 fbfd 	bl	80016b4 <HAL_Delay>
 8000eba:	201e      	movs	r0, #30
 8000ebc:	f000 fbfa 	bl	80016b4 <HAL_Delay>
			pub=true;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <_Z9Mqtt_Initv+0x6f4>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
			pub_err_count=0;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <_Z9Mqtt_Initv+0x6f8>)
 8000ec8:	601c      	str	r4, [r3, #0]
	if(!pub)
 8000eca:	e50f      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <_Z9Mqtt_Initv+0x6f4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d000      	beq.n	8000ed6 <_Z9Mqtt_Initv+0x65e>
 8000ed4:	e50a      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
		pub_err_count+=1;
 8000ed6:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <_Z9Mqtt_Initv+0x6f8>)
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	6013      	str	r3, [r2, #0]
		if(pub_err_count>7)
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	dc00      	bgt.n	8000ee4 <_Z9Mqtt_Initv+0x66c>
 8000ee2:	e503      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000ee4:	2605      	movs	r6, #5
				sub=false;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_Z9Mqtt_Initv+0x6c4>)
 8000ee8:	469a      	mov	sl, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	4698      	mov	r8, r3
 8000eee:	1c1f      	adds	r7, r3, #0
				modem_flag=false;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <_Z9Mqtt_Initv+0x6fc>)
 8000ef2:	4699      	mov	r9, r3
				sub=false;
 8000ef4:	4653      	mov	r3, sl
 8000ef6:	701f      	strb	r7, [r3, #0]
				modem_flag=false;
 8000ef8:	464b      	mov	r3, r9
 8000efa:	701f      	strb	r7, [r3, #0]
				memset(buffer3, 9, sizeof(buffer3));
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	4d11      	ldr	r5, [pc, #68]	; (8000f44 <_Z9Mqtt_Initv+0x6cc>)
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	2109      	movs	r1, #9
 8000f04:	0028      	movs	r0, r5
 8000f06:	f001 ffb5 	bl	8002e74 <memset>
				HAL_UART_Transmit(&huart1, (uint8_t*)"AT+NETCLOSE\r\n",15,100);
 8000f0a:	491b      	ldr	r1, [pc, #108]	; (8000f78 <_Z9Mqtt_Initv+0x700>)
 8000f0c:	4c0f      	ldr	r4, [pc, #60]	; (8000f4c <_Z9Mqtt_Initv+0x6d4>)
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	220f      	movs	r2, #15
 8000f12:	0020      	movs	r0, r4
 8000f14:	f001 fdda 	bl	8002acc <HAL_UART_Transmit>
				HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 151);
 8000f18:	2297      	movs	r2, #151	; 0x97
 8000f1a:	0029      	movs	r1, r5
 8000f1c:	0020      	movs	r0, r4
 8000f1e:	f001 fa87 	bl	8002430 <HAL_UART_Receive_DMA>
				HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	f000 fbc6 	bl	80016b4 <HAL_Delay>
				init_flag=0;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <_Z9Mqtt_Initv+0x704>)
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	601a      	str	r2, [r3, #0]
			for(int i=0;i<5;i++)
 8000f2e:	3e01      	subs	r6, #1
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d1df      	bne.n	8000ef4 <_Z9Mqtt_Initv+0x67c>
			err_flag=1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <_Z9Mqtt_Initv+0x708>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e4d7      	b.n	80008ec <_Z9Mqtt_Initv+0x74>
 8000f3c:	20000b38 	.word	0x20000b38
 8000f40:	200002a4 	.word	0x200002a4
 8000f44:	2000073c 	.word	0x2000073c
 8000f48:	080037d4 	.word	0x080037d4
 8000f4c:	20000198 	.word	0x20000198
 8000f50:	00000dac 	.word	0x00000dac
 8000f54:	20000080 	.word	0x20000080
 8000f58:	08003838 	.word	0x08003838
 8000f5c:	200002a8 	.word	0x200002a8
 8000f60:	08003704 	.word	0x08003704
 8000f64:	20000738 	.word	0x20000738
 8000f68:	200004a8 	.word	0x200004a8
 8000f6c:	2000093c 	.word	0x2000093c
 8000f70:	20000940 	.word	0x20000940
 8000f74:	200002a0 	.word	0x200002a0
 8000f78:	08003854 	.word	0x08003854
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	20000000 	.word	0x20000000
		memset(buffer3, 10, sizeof(buffer3));
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4698      	mov	r8, r3
 8000f8a:	4c63      	ldr	r4, [pc, #396]	; (8001118 <_Z9Mqtt_Initv+0x8a0>)
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	210a      	movs	r1, #10
 8000f90:	0020      	movs	r0, r4
 8000f92:	f001 ff6f 	bl	8002e74 <memset>
		sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",con_len);
 8000f96:	4e61      	ldr	r6, [pc, #388]	; (800111c <_Z9Mqtt_Initv+0x8a4>)
 8000f98:	6832      	ldr	r2, [r6, #0]
 8000f9a:	4f61      	ldr	r7, [pc, #388]	; (8001120 <_Z9Mqtt_Initv+0x8a8>)
 8000f9c:	0039      	movs	r1, r7
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 ff48 	bl	8002e34 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 30,100);
 8000fa4:	4d5f      	ldr	r5, [pc, #380]	; (8001124 <_Z9Mqtt_Initv+0x8ac>)
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	221e      	movs	r2, #30
 8000faa:	0021      	movs	r1, r4
 8000fac:	0028      	movs	r0, r5
 8000fae:	f001 fd8d 	bl	8002acc <HAL_UART_Transmit>
		log_uart(buffer3);
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff fb24 	bl	8000600 <log_uart>
		HAL_Delay(100);
 8000fb8:	2064      	movs	r0, #100	; 0x64
 8000fba:	f000 fb7b 	bl	80016b4 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_init ,con_len,100);
 8000fbe:	8832      	ldrh	r2, [r6, #0]
 8000fc0:	4e59      	ldr	r6, [pc, #356]	; (8001128 <_Z9Mqtt_Initv+0x8b0>)
 8000fc2:	2364      	movs	r3, #100	; 0x64
 8000fc4:	0031      	movs	r1, r6
 8000fc6:	0028      	movs	r0, r5
 8000fc8:	f001 fd80 	bl	8002acc <HAL_UART_Transmit>
		log_uart(recive_packet_init);
 8000fcc:	0030      	movs	r0, r6
 8000fce:	f7ff fb17 	bl	8000600 <log_uart>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 8000fd2:	4e56      	ldr	r6, [pc, #344]	; (800112c <_Z9Mqtt_Initv+0x8b4>)
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	0031      	movs	r1, r6
 8000fda:	0028      	movs	r0, r5
 8000fdc:	f001 fd76 	bl	8002acc <HAL_UART_Transmit>
		HAL_Delay(1500);
 8000fe0:	4853      	ldr	r0, [pc, #332]	; (8001130 <_Z9Mqtt_Initv+0x8b8>)
 8000fe2:	f000 fb67 	bl	80016b4 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 400);
 8000fe6:	23c8      	movs	r3, #200	; 0xc8
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4699      	mov	r9, r3
 8000fec:	001a      	movs	r2, r3
 8000fee:	0021      	movs	r1, r4
 8000ff0:	0028      	movs	r0, r5
 8000ff2:	f001 fa1d 	bl	8002430 <HAL_UART_Receive_DMA>
		HAL_Delay(1000);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	0080      	lsls	r0, r0, #2
 8000ffa:	f000 fb5b 	bl	80016b4 <HAL_Delay>
		log_uart(buffer3);
 8000ffe:	0020      	movs	r0, r4
 8001000:	f7ff fafe 	bl	8000600 <log_uart>
		memset(buffer3, 9, 400);
 8001004:	464a      	mov	r2, r9
 8001006:	2109      	movs	r1, #9
 8001008:	0020      	movs	r0, r4
 800100a:	f001 ff33 	bl	8002e74 <memset>
		sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",sub_len);
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <_Z9Mqtt_Initv+0x8bc>)
 8001010:	4699      	mov	r9, r3
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	0039      	movs	r1, r7
 8001016:	0020      	movs	r0, r4
 8001018:	f001 ff0c 	bl	8002e34 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	2216      	movs	r2, #22
 8001020:	0021      	movs	r1, r4
 8001022:	0028      	movs	r0, r5
 8001024:	f001 fd52 	bl	8002acc <HAL_UART_Transmit>
		log_uart(buffer3);
 8001028:	0020      	movs	r0, r4
 800102a:	f7ff fae9 	bl	8000600 <log_uart>
		HAL_Delay(200);
 800102e:	20c8      	movs	r0, #200	; 0xc8
 8001030:	f000 fb40 	bl	80016b4 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_sub , sub_len,sub_len*3);
 8001034:	464b      	mov	r3, r9
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	0053      	lsls	r3, r2, #1
 800103a:	189b      	adds	r3, r3, r2
 800103c:	b292      	uxth	r2, r2
 800103e:	4f3e      	ldr	r7, [pc, #248]	; (8001138 <_Z9Mqtt_Initv+0x8c0>)
 8001040:	0039      	movs	r1, r7
 8001042:	0028      	movs	r0, r5
 8001044:	f001 fd42 	bl	8002acc <HAL_UART_Transmit>
		log_uart(recive_packet_sub);
 8001048:	0038      	movs	r0, r7
 800104a:	f7ff fad9 	bl	8000600 <log_uart>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 800104e:	2332      	movs	r3, #50	; 0x32
 8001050:	2202      	movs	r2, #2
 8001052:	0031      	movs	r1, r6
 8001054:	0028      	movs	r0, r5
 8001056:	f001 fd39 	bl	8002acc <HAL_UART_Transmit>
		HAL_Delay(500);
 800105a:	20fa      	movs	r0, #250	; 0xfa
 800105c:	0040      	lsls	r0, r0, #1
 800105e:	f000 fb29 	bl	80016b4 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 512);
 8001062:	4642      	mov	r2, r8
 8001064:	0021      	movs	r1, r4
 8001066:	0028      	movs	r0, r5
 8001068:	f001 f9e2 	bl	8002430 <HAL_UART_Receive_DMA>
		log_uart(buffer3);
 800106c:	0020      	movs	r0, r4
 800106e:	f7ff fac7 	bl	8000600 <log_uart>
		HAL_Delay(100);
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f000 fb1e 	bl	80016b4 <HAL_Delay>
		err_flag=0;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <_Z9Mqtt_Initv+0x8c4>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
	memset(buffer3, 9, sizeof(buffer3));
 800107e:	2780      	movs	r7, #128	; 0x80
 8001080:	00bf      	lsls	r7, r7, #2
 8001082:	4d25      	ldr	r5, [pc, #148]	; (8001118 <_Z9Mqtt_Initv+0x8a0>)
 8001084:	003a      	movs	r2, r7
 8001086:	2109      	movs	r1, #9
 8001088:	0028      	movs	r0, r5
 800108a:	f001 fef3 	bl	8002e74 <memset>
	sprintf(buffer3,"AT+CIPSEND=0,%d\r\n",pub_len);
 800108e:	4e2c      	ldr	r6, [pc, #176]	; (8001140 <_Z9Mqtt_Initv+0x8c8>)
 8001090:	6832      	ldr	r2, [r6, #0]
 8001092:	4923      	ldr	r1, [pc, #140]	; (8001120 <_Z9Mqtt_Initv+0x8a8>)
 8001094:	0028      	movs	r0, r5
 8001096:	f001 fecd 	bl	8002e34 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer3 , 22,100);
 800109a:	4c22      	ldr	r4, [pc, #136]	; (8001124 <_Z9Mqtt_Initv+0x8ac>)
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	2216      	movs	r2, #22
 80010a0:	0029      	movs	r1, r5
 80010a2:	0020      	movs	r0, r4
 80010a4:	f001 fd12 	bl	8002acc <HAL_UART_Transmit>
	log_uart(buffer3);
 80010a8:	0028      	movs	r0, r5
 80010aa:	f7ff faa9 	bl	8000600 <log_uart>
	HAL_Delay(200);
 80010ae:	20c8      	movs	r0, #200	; 0xc8
 80010b0:	f000 fb00 	bl	80016b4 <HAL_Delay>
	HAL_UART_Transmit(&huart1,(uint8_t*)recive_packet_send , pub_len,pub_len*3);
 80010b4:	6832      	ldr	r2, [r6, #0]
 80010b6:	0053      	lsls	r3, r2, #1
 80010b8:	189b      	adds	r3, r3, r2
 80010ba:	b292      	uxth	r2, r2
 80010bc:	4e21      	ldr	r6, [pc, #132]	; (8001144 <_Z9Mqtt_Initv+0x8cc>)
 80010be:	0031      	movs	r1, r6
 80010c0:	0020      	movs	r0, r4
 80010c2:	f001 fd03 	bl	8002acc <HAL_UART_Transmit>
	log_uart(recive_packet_send);
 80010c6:	0030      	movs	r0, r6
 80010c8:	f7ff fa9a 	bl	8000600 <log_uart>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n" , 2,50);
 80010cc:	4917      	ldr	r1, [pc, #92]	; (800112c <_Z9Mqtt_Initv+0x8b4>)
 80010ce:	2332      	movs	r3, #50	; 0x32
 80010d0:	2202      	movs	r2, #2
 80010d2:	0020      	movs	r0, r4
 80010d4:	f001 fcfa 	bl	8002acc <HAL_UART_Transmit>
	HAL_Delay(500);
 80010d8:	20fa      	movs	r0, #250	; 0xfa
 80010da:	0040      	lsls	r0, r0, #1
 80010dc:	f000 faea 	bl	80016b4 <HAL_Delay>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer3, 512);
 80010e0:	003a      	movs	r2, r7
 80010e2:	0029      	movs	r1, r5
 80010e4:	0020      	movs	r0, r4
 80010e6:	f001 f9a3 	bl	8002430 <HAL_UART_Receive_DMA>
	log_uart(buffer3);
 80010ea:	0028      	movs	r0, r5
 80010ec:	f7ff fa88 	bl	8000600 <log_uart>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"*****\r\n", 7);
 80010f0:	4915      	ldr	r1, [pc, #84]	; (8001148 <_Z9Mqtt_Initv+0x8d0>)
 80010f2:	4816      	ldr	r0, [pc, #88]	; (800114c <_Z9Mqtt_Initv+0x8d4>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	f001 f93b 	bl	8002370 <HAL_UART_Transmit_DMA>
		HAL_Delay(30);
 80010fa:	201e      	movs	r0, #30
 80010fc:	f000 fada 	bl	80016b4 <HAL_Delay>
	for(int i=0;i<1;i++)
 8001100:	002c      	movs	r4, r5
 8001102:	35c3      	adds	r5, #195	; 0xc3
 8001104:	35ff      	adds	r5, #255	; 0xff
			sub=false;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <_Z9Mqtt_Initv+0x8d8>)
 8001108:	4698      	mov	r8, r3
			pub_len=0;
 800110a:	4f0d      	ldr	r7, [pc, #52]	; (8001140 <_Z9Mqtt_Initv+0x8c8>)
			pub=false;
 800110c:	4e11      	ldr	r6, [pc, #68]	; (8001154 <_Z9Mqtt_Initv+0x8dc>)
 800110e:	0033      	movs	r3, r6
 8001110:	4646      	mov	r6, r8
 8001112:	4698      	mov	r8, r3
 8001114:	e62a      	b.n	8000d6c <_Z9Mqtt_Initv+0x4f4>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	2000073c 	.word	0x2000073c
 800111c:	20000080 	.word	0x20000080
 8001120:	08003838 	.word	0x08003838
 8001124:	20000198 	.word	0x20000198
 8001128:	200002a8 	.word	0x200002a8
 800112c:	08003704 	.word	0x08003704
 8001130:	000005dc 	.word	0x000005dc
 8001134:	20000738 	.word	0x20000738
 8001138:	200004a8 	.word	0x200004a8
 800113c:	20000000 	.word	0x20000000
 8001140:	200002a4 	.word	0x200002a4
 8001144:	200003a8 	.word	0x200003a8
 8001148:	0800384c 	.word	0x0800384c
 800114c:	20000218 	.word	0x20000218
 8001150:	20000b38 	.word	0x20000b38
 8001154:	2000093c 	.word	0x2000093c

08001158 <_Z11Mqtt_Recivev>:
 * Читаем входящий поток по uart ищем слово +CMQTTRXEND: 0 после
 * этого отбрасываем служебную информаци и записываем название топика и текст сообщения в структуру message_mqtt_recive */
uint8_t rxmessage1[500];
//uint8_t test[100];
void Mqtt_Recive()
{
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	46d6      	mov	lr, sl
 800115c:	464f      	mov	r7, r9
 800115e:	4646      	mov	r6, r8
 8001160:	b5c0      	push	{r6, r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38

	if(err_flag!=1)
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <_Z11Mqtt_Recivev+0x1c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <_Z11Mqtt_Recivev+0x20>
				}
			}

		}

}
 800116c:	b00e      	add	sp, #56	; 0x38
 800116e:	bce0      	pop	{r5, r6, r7}
 8001170:	46ba      	mov	sl, r7
 8001172:	46b1      	mov	r9, r6
 8001174:	46a8      	mov	r8, r5
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memset(rxmessage1, 9, 500);
 8001178:	26fa      	movs	r6, #250	; 0xfa
 800117a:	0076      	lsls	r6, r6, #1
 800117c:	4d69      	ldr	r5, [pc, #420]	; (8001324 <_Z11Mqtt_Recivev+0x1cc>)
 800117e:	0032      	movs	r2, r6
 8001180:	2109      	movs	r1, #9
 8001182:	0028      	movs	r0, r5
 8001184:	f001 fe76 	bl	8002e74 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPRXGET=4,0\r\n", 24, 50);
 8001188:	4967      	ldr	r1, [pc, #412]	; (8001328 <_Z11Mqtt_Recivev+0x1d0>)
 800118a:	4c68      	ldr	r4, [pc, #416]	; (800132c <_Z11Mqtt_Recivev+0x1d4>)
 800118c:	2332      	movs	r3, #50	; 0x32
 800118e:	2218      	movs	r2, #24
 8001190:	0020      	movs	r0, r4
 8001192:	f001 fc9b 	bl	8002acc <HAL_UART_Transmit>
			log_uart("AT+CIPRXGET=4,0");
 8001196:	4866      	ldr	r0, [pc, #408]	; (8001330 <_Z11Mqtt_Recivev+0x1d8>)
 8001198:	f7ff fa32 	bl	8000600 <log_uart>
			HAL_Delay(200);
 800119c:	20c8      	movs	r0, #200	; 0xc8
 800119e:	f000 fa89 	bl	80016b4 <HAL_Delay>
			HAL_UART_Receive_DMA(&huart1,rxmessage1, 500);
 80011a2:	0032      	movs	r2, r6
 80011a4:	0029      	movs	r1, r5
 80011a6:	0020      	movs	r0, r4
 80011a8:	f001 f942 	bl	8002430 <HAL_UART_Receive_DMA>
			log_uart((char*)rxmessage1);
 80011ac:	0028      	movs	r0, r5
 80011ae:	f7ff fa27 	bl	8000600 <log_uart>
			for(int i=0;i<450;i++)
 80011b2:	002c      	movs	r4, r5
 80011b4:	0028      	movs	r0, r5
 80011b6:	30c3      	adds	r0, #195	; 0xc3
 80011b8:	30ff      	adds	r0, #255	; 0xff
			log_uart((char*)rxmessage1);
 80011ba:	002b      	movs	r3, r5
 80011bc:	e002      	b.n	80011c4 <_Z11Mqtt_Recivev+0x6c>
			for(int i=0;i<450;i++)
 80011be:	3301      	adds	r3, #1
 80011c0:	4283      	cmp	r3, r0
 80011c2:	d0d3      	beq.n	800116c <_Z11Mqtt_Recivev+0x14>
				if(rxmessage1[i]=='+'&&rxmessage1[i+1]=='C'&&rxmessage1[i+2]=='I'&&rxmessage1[i+3]=='P'&&rxmessage1[i+4]=='R'&&rxmessage1[i+5]=='X'&&rxmessage1[i+6]=='G'&&rxmessage1[i+7]=='E'&&rxmessage1[i+8]=='T'&&rxmessage1[i+9]==':')
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	2a2b      	cmp	r2, #43	; 0x2b
 80011c8:	d1f9      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011ca:	785a      	ldrb	r2, [r3, #1]
 80011cc:	2a43      	cmp	r2, #67	; 0x43
 80011ce:	d1f6      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011d0:	789a      	ldrb	r2, [r3, #2]
 80011d2:	2a49      	cmp	r2, #73	; 0x49
 80011d4:	d1f3      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011d6:	78da      	ldrb	r2, [r3, #3]
 80011d8:	2a50      	cmp	r2, #80	; 0x50
 80011da:	d1f0      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011dc:	791a      	ldrb	r2, [r3, #4]
 80011de:	2a52      	cmp	r2, #82	; 0x52
 80011e0:	d1ed      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011e2:	795a      	ldrb	r2, [r3, #5]
 80011e4:	2a58      	cmp	r2, #88	; 0x58
 80011e6:	d1ea      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011e8:	799a      	ldrb	r2, [r3, #6]
 80011ea:	2a47      	cmp	r2, #71	; 0x47
 80011ec:	d1e7      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011ee:	79da      	ldrb	r2, [r3, #7]
 80011f0:	2a45      	cmp	r2, #69	; 0x45
 80011f2:	d1e4      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011f4:	7a1a      	ldrb	r2, [r3, #8]
 80011f6:	2a54      	cmp	r2, #84	; 0x54
 80011f8:	d1e1      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
 80011fa:	7a5a      	ldrb	r2, [r3, #9]
 80011fc:	2a3a      	cmp	r2, #58	; 0x3a
 80011fe:	d1de      	bne.n	80011be <_Z11Mqtt_Recivev+0x66>
					memcpy(rxmessage1,strstr((char*)rxmessage1,"+CIPRXGET:"),500);
 8001200:	494c      	ldr	r1, [pc, #304]	; (8001334 <_Z11Mqtt_Recivev+0x1dc>)
 8001202:	4e48      	ldr	r6, [pc, #288]	; (8001324 <_Z11Mqtt_Recivev+0x1cc>)
 8001204:	0030      	movs	r0, r6
 8001206:	f001 fe3d 	bl	8002e84 <strstr>
 800120a:	0001      	movs	r1, r0
 800120c:	22fa      	movs	r2, #250	; 0xfa
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	0030      	movs	r0, r6
 8001212:	f001 fe8b 	bl	8002f2c <memcpy>
					len1=rxmessage1[15]-'0';
 8001216:	7bf7      	ldrb	r7, [r6, #15]
 8001218:	3f30      	subs	r7, #48	; 0x30
					if(rxmessage1[16]!='\n'&&rxmessage1[16]!='\r')
 800121a:	7c32      	ldrb	r2, [r6, #16]
 800121c:	2a0a      	cmp	r2, #10
 800121e:	d006      	beq.n	800122e <_Z11Mqtt_Recivev+0xd6>
 8001220:	2a0d      	cmp	r2, #13
 8001222:	d004      	beq.n	800122e <_Z11Mqtt_Recivev+0xd6>
						len1=len1*10+rxmessage1[16]-'0';
 8001224:	230a      	movs	r3, #10
 8001226:	437b      	muls	r3, r7
 8001228:	189b      	adds	r3, r3, r2
 800122a:	3b30      	subs	r3, #48	; 0x30
 800122c:	001f      	movs	r7, r3
					if(rxmessage1[17]!='\n'&&rxmessage1[17]!='\r')
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <_Z11Mqtt_Recivev+0x1cc>)
 8001230:	7c5a      	ldrb	r2, [r3, #17]
 8001232:	2a0a      	cmp	r2, #10
 8001234:	d006      	beq.n	8001244 <_Z11Mqtt_Recivev+0xec>
 8001236:	2a0d      	cmp	r2, #13
 8001238:	d004      	beq.n	8001244 <_Z11Mqtt_Recivev+0xec>
						len1=len1*10+rxmessage1[17]-'0';
 800123a:	230a      	movs	r3, #10
 800123c:	437b      	muls	r3, r7
 800123e:	189b      	adds	r3, r3, r2
 8001240:	3b30      	subs	r3, #48	; 0x30
 8001242:	001f      	movs	r7, r3
			if(len1>10)
 8001244:	2f0a      	cmp	r7, #10
 8001246:	dd91      	ble.n	800116c <_Z11Mqtt_Recivev+0x14>
				memset(rxmessage1, 10, sizeof(rxmessage1));
 8001248:	22fa      	movs	r2, #250	; 0xfa
 800124a:	4e36      	ldr	r6, [pc, #216]	; (8001324 <_Z11Mqtt_Recivev+0x1cc>)
 800124c:	0052      	lsls	r2, r2, #1
 800124e:	210a      	movs	r1, #10
 8001250:	0030      	movs	r0, r6
 8001252:	f001 fe0f 	bl	8002e74 <memset>
				sprintf(ui,"AT+CIPRXGET=2,0,%d\r\n",len1);
 8001256:	4938      	ldr	r1, [pc, #224]	; (8001338 <_Z11Mqtt_Recivev+0x1e0>)
 8001258:	003a      	movs	r2, r7
 800125a:	a801      	add	r0, sp, #4
 800125c:	f001 fdea 	bl	8002e34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)ui, 22, 100);
 8001260:	4f32      	ldr	r7, [pc, #200]	; (800132c <_Z11Mqtt_Recivev+0x1d4>)
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	2216      	movs	r2, #22
 8001266:	a901      	add	r1, sp, #4
 8001268:	0038      	movs	r0, r7
 800126a:	f001 fc2f 	bl	8002acc <HAL_UART_Transmit>
				log_uart(ui);
 800126e:	a801      	add	r0, sp, #4
 8001270:	f7ff f9c6 	bl	8000600 <log_uart>
				HAL_Delay(350);
 8001274:	20af      	movs	r0, #175	; 0xaf
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	f000 fa1c 	bl	80016b4 <HAL_Delay>
				HAL_UART_Receive_DMA(&huart1, rxmessage1, 300);
 800127c:	2296      	movs	r2, #150	; 0x96
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	0031      	movs	r1, r6
 8001282:	0038      	movs	r0, r7
 8001284:	f001 f8d4 	bl	8002430 <HAL_UART_Receive_DMA>
				log_uart((char*)rxmessage1);
 8001288:	0030      	movs	r0, r6
 800128a:	f7ff f9b9 	bl	8000600 <log_uart>
				for(int i=0;i<250;i++)
 800128e:	35fa      	adds	r5, #250	; 0xfa
						pub=false;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <_Z11Mqtt_Recivev+0x1e4>)
 8001292:	4698      	mov	r8, r3
						memcpy(rxmessage1,strstr((char*)rxmessage1,"+CIPRXGET:"),500);
 8001294:	27fa      	movs	r7, #250	; 0xfa
 8001296:	007f      	lsls	r7, r7, #1
						HAL_UART_Transmit(&huart2, rxmessage1, 300,300);
 8001298:	2696      	movs	r6, #150	; 0x96
 800129a:	0076      	lsls	r6, r6, #1
 800129c:	e003      	b.n	80012a6 <_Z11Mqtt_Recivev+0x14e>
				for(int i=0;i<250;i++)
 800129e:	3401      	adds	r4, #1
 80012a0:	42ac      	cmp	r4, r5
 80012a2:	d100      	bne.n	80012a6 <_Z11Mqtt_Recivev+0x14e>
 80012a4:	e762      	b.n	800116c <_Z11Mqtt_Recivev+0x14>
					if(rxmessage1[i]=='+'&&rxmessage1[i+1]=='C'&&rxmessage1[i+2]=='I'&&rxmessage1[i+3]=='P'&&rxmessage1[i+4]=='R'&&rxmessage1[i+5]=='X'&&rxmessage1[i+6]=='G'&&rxmessage1[i+7]=='E'&&rxmessage1[i+8]=='T'&&rxmessage1[i+9]==':')
 80012a6:	7823      	ldrb	r3, [r4, #0]
 80012a8:	2b2b      	cmp	r3, #43	; 0x2b
 80012aa:	d1f8      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012ac:	7863      	ldrb	r3, [r4, #1]
 80012ae:	2b43      	cmp	r3, #67	; 0x43
 80012b0:	d1f5      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012b2:	78a3      	ldrb	r3, [r4, #2]
 80012b4:	2b49      	cmp	r3, #73	; 0x49
 80012b6:	d1f2      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012b8:	78e3      	ldrb	r3, [r4, #3]
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	d1ef      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012be:	7923      	ldrb	r3, [r4, #4]
 80012c0:	2b52      	cmp	r3, #82	; 0x52
 80012c2:	d1ec      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012c4:	7963      	ldrb	r3, [r4, #5]
 80012c6:	2b58      	cmp	r3, #88	; 0x58
 80012c8:	d1e9      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012ca:	79a3      	ldrb	r3, [r4, #6]
 80012cc:	2b47      	cmp	r3, #71	; 0x47
 80012ce:	d1e6      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012d0:	79e3      	ldrb	r3, [r4, #7]
 80012d2:	2b45      	cmp	r3, #69	; 0x45
 80012d4:	d1e3      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012d6:	7a23      	ldrb	r3, [r4, #8]
 80012d8:	2b54      	cmp	r3, #84	; 0x54
 80012da:	d1e0      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
 80012dc:	7a63      	ldrb	r3, [r4, #9]
 80012de:	2b3a      	cmp	r3, #58	; 0x3a
 80012e0:	d1dd      	bne.n	800129e <_Z11Mqtt_Recivev+0x146>
						pub=false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	4642      	mov	r2, r8
 80012e6:	7013      	strb	r3, [r2, #0]
						memcpy(rxmessage1,strstr((char*)rxmessage1,"+CIPRXGET:"),500);
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_Z11Mqtt_Recivev+0x1dc>)
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <_Z11Mqtt_Recivev+0x1cc>)
 80012ec:	4691      	mov	r9, r2
 80012ee:	0011      	movs	r1, r2
 80012f0:	469a      	mov	sl, r3
 80012f2:	0018      	movs	r0, r3
 80012f4:	f001 fdc6 	bl	8002e84 <strstr>
 80012f8:	0001      	movs	r1, r0
 80012fa:	003a      	movs	r2, r7
 80012fc:	4650      	mov	r0, sl
 80012fe:	f001 fe15 	bl	8002f2c <memcpy>
						HAL_UART_Transmit(&huart2, (uint8_t*)"+CIPRXGET:", 12,100);
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <_Z11Mqtt_Recivev+0x1e8>)
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	220c      	movs	r2, #12
 8001308:	4649      	mov	r1, r9
 800130a:	4681      	mov	r9, r0
 800130c:	f001 fbde 	bl	8002acc <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, rxmessage1, 300,300);
 8001310:	0033      	movs	r3, r6
 8001312:	0032      	movs	r2, r6
 8001314:	4651      	mov	r1, sl
 8001316:	4648      	mov	r0, r9
 8001318:	f001 fbd8 	bl	8002acc <HAL_UART_Transmit>
 800131c:	e7bf      	b.n	800129e <_Z11Mqtt_Recivev+0x146>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000000 	.word	0x20000000
 8001324:	20000944 	.word	0x20000944
 8001328:	08003864 	.word	0x08003864
 800132c:	20000198 	.word	0x20000198
 8001330:	08003878 	.word	0x08003878
 8001334:	08003888 	.word	0x08003888
 8001338:	08003894 	.word	0x08003894
 800133c:	2000093c 	.word	0x2000093c
 8001340:	20000218 	.word	0x20000218

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x2c>)
 8001348:	6999      	ldr	r1, [r3, #24]
 800134a:	2201      	movs	r2, #1
 800134c:	4311      	orrs	r1, r2
 800134e:	6199      	str	r1, [r3, #24]
 8001350:	6999      	ldr	r1, [r3, #24]
 8001352:	400a      	ands	r2, r1
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	69da      	ldr	r2, [r3, #28]
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0549      	lsls	r1, r1, #21
 800135e:	430a      	orrs	r2, r1
 8001360:	61da      	str	r2, [r3, #28]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	400b      	ands	r3, r1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	b002      	add	sp, #8
 800136c:	4770      	bx	lr
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b510      	push	{r4, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	2214      	movs	r2, #20
 800137c:	2100      	movs	r1, #0
 800137e:	a805      	add	r0, sp, #20
 8001380:	f001 fd78 	bl	8002e74 <memset>
  if(huart->Instance==USART1)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	4a5a      	ldr	r2, [pc, #360]	; (80014f0 <HAL_UART_MspInit+0x17c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d004      	beq.n	8001396 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800138c:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <HAL_UART_MspInit+0x180>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d058      	beq.n	8001444 <HAL_UART_MspInit+0xd0>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	b00a      	add	sp, #40	; 0x28
 8001394:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_UART_MspInit+0x184>)
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	01c9      	lsls	r1, r1, #7
 800139e:	430a      	orrs	r2, r1
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	400a      	ands	r2, r1
 80013a6:	9201      	str	r2, [sp, #4]
 80013a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0289      	lsls	r1, r1, #10
 80013b0:	430a      	orrs	r2, r1
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	400b      	ands	r3, r1
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013bc:	23f0      	movs	r3, #240	; 0xf0
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	3301      	adds	r3, #1
 80013c8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013ca:	3b02      	subs	r3, #2
 80013cc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	2090      	movs	r0, #144	; 0x90
 80013d0:	a905      	add	r1, sp, #20
 80013d2:	05c0      	lsls	r0, r0, #23
 80013d4:	f000 fae0 	bl	8001998 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80013d8:	4848      	ldr	r0, [pc, #288]	; (80014fc <HAL_UART_MspInit+0x188>)
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_UART_MspInit+0x18c>)
 80013dc:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013de:	2300      	movs	r3, #0
 80013e0:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ea:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013ec:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ee:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013f0:	f000 f9da 	bl	80017a8 <HAL_DMA_Init>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d11f      	bne.n	8001438 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013f8:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_UART_MspInit+0x188>)
 80013fa:	66e3      	str	r3, [r4, #108]	; 0x6c
 80013fc:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80013fe:	4841      	ldr	r0, [pc, #260]	; (8001504 <HAL_UART_MspInit+0x190>)
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_UART_MspInit+0x194>)
 8001402:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001404:	2310      	movs	r3, #16
 8001406:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001410:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001414:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001418:	f000 f9c6 	bl	80017a8 <HAL_DMA_Init>
 800141c:	2800      	cmp	r0, #0
 800141e:	d10e      	bne.n	800143e <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_UART_MspInit+0x190>)
 8001422:	66a3      	str	r3, [r4, #104]	; 0x68
 8001424:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201b      	movs	r0, #27
 800142c:	f000 f954 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001430:	201b      	movs	r0, #27
 8001432:	f000 f983 	bl	800173c <HAL_NVIC_EnableIRQ>
 8001436:	e7ac      	b.n	8001392 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8001438:	f7ff fa1c 	bl	8000874 <Error_Handler>
 800143c:	e7dc      	b.n	80013f8 <HAL_UART_MspInit+0x84>
      Error_Handler();
 800143e:	f7ff fa19 	bl	8000874 <Error_Handler>
 8001442:	e7ed      	b.n	8001420 <HAL_UART_MspInit+0xac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_UART_MspInit+0x184>)
 8001446:	69d9      	ldr	r1, [r3, #28]
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0292      	lsls	r2, r2, #10
 800144c:	4311      	orrs	r1, r2
 800144e:	61d9      	str	r1, [r3, #28]
 8001450:	69d9      	ldr	r1, [r3, #28]
 8001452:	4011      	ands	r1, r2
 8001454:	9103      	str	r1, [sp, #12]
 8001456:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	6959      	ldr	r1, [r3, #20]
 800145a:	4311      	orrs	r1, r2
 800145c:	6159      	str	r1, [r3, #20]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	9304      	str	r3, [sp, #16]
 8001464:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001466:	230c      	movs	r3, #12
 8001468:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	3b0a      	subs	r3, #10
 800146c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146e:	3301      	adds	r3, #1
 8001470:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001472:	3b02      	subs	r3, #2
 8001474:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	2090      	movs	r0, #144	; 0x90
 8001478:	a905      	add	r1, sp, #20
 800147a:	05c0      	lsls	r0, r0, #23
 800147c:	f000 fa8c 	bl	8001998 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001480:	4822      	ldr	r0, [pc, #136]	; (800150c <HAL_UART_MspInit+0x198>)
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_UART_MspInit+0x19c>)
 8001484:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	2300      	movs	r3, #0
 8001488:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	60c2      	str	r2, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001490:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001492:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001494:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	019b      	lsls	r3, r3, #6
 800149a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800149c:	f000 f984 	bl	80017a8 <HAL_DMA_Init>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d11f      	bne.n	80014e4 <HAL_UART_MspInit+0x170>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_UART_MspInit+0x198>)
 80014a6:	66e3      	str	r3, [r4, #108]	; 0x6c
 80014a8:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x1a0>)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_UART_MspInit+0x1a4>)
 80014ae:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	2310      	movs	r3, #16
 80014b2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	60c2      	str	r2, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014be:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014c0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014c4:	f000 f970 	bl	80017a8 <HAL_DMA_Init>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d10e      	bne.n	80014ea <HAL_UART_MspInit+0x176>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_UART_MspInit+0x1a0>)
 80014ce:	66a3      	str	r3, [r4, #104]	; 0x68
 80014d0:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201c      	movs	r0, #28
 80014d8:	f000 f8fe 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014dc:	201c      	movs	r0, #28
 80014de:	f000 f92d 	bl	800173c <HAL_NVIC_EnableIRQ>
}
 80014e2:	e756      	b.n	8001392 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80014e4:	f7ff f9c6 	bl	8000874 <Error_Handler>
 80014e8:	e7dc      	b.n	80014a4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80014ea:	f7ff f9c3 	bl	8000874 <Error_Handler>
 80014ee:	e7ed      	b.n	80014cc <HAL_UART_MspInit+0x158>
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	20000088 	.word	0x20000088
 8001500:	40020030 	.word	0x40020030
 8001504:	200000cc 	.word	0x200000cc
 8001508:	4002001c 	.word	0x4002001c
 800150c:	20000110 	.word	0x20000110
 8001510:	40020058 	.word	0x40020058
 8001514:	20000154 	.word	0x20000154
 8001518:	40020044 	.word	0x40020044

0800151c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b510      	push	{r4, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 8001520:	f000 f918 	bl	8001754 <HAL_NVIC_SystemReset>
  while (1)
 8001524:	e7fc      	b.n	8001520 <HardFault_Handler+0x2>

08001526 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f8b0 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bd10      	pop	{r4, pc}
	...

08001534 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001534:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <DMA1_Channel2_3_IRQHandler+0x10>)
 8001538:	f000 f9d8 	bl	80018ec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel2_3_IRQHandler+0x14>)
 800153e:	f000 f9d5 	bl	80018ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001542:	bd10      	pop	{r4, pc}
 8001544:	200000cc 	.word	0x200000cc
 8001548:	20000088 	.word	0x20000088

0800154c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800154c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <DMA1_Channel4_5_IRQHandler+0x10>)
 8001550:	f000 f9cc 	bl	80018ec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001556:	f000 f9c9 	bl	80018ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800155a:	bd10      	pop	{r4, pc}
 800155c:	20000154 	.word	0x20000154
 8001560:	20000110 	.word	0x20000110

08001564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001564:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
//	Uart_isr(&huart1);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <USART1_IRQHandler+0xc>)
 8001568:	f001 f836 	bl	80025d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156c:	bd10      	pop	{r4, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	20000198 	.word	0x20000198

08001574 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001574:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <USART2_IRQHandler+0xc>)
 8001578:	f001 f82e 	bl	80025d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157c:	bd10      	pop	{r4, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	20000218 	.word	0x20000218

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b510      	push	{r4, lr}
 8001586:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <_sbrk+0x38>)
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <_sbrk+0x3c>)
 800158c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <_sbrk+0x40>)
 8001590:	6809      	ldr	r1, [r1, #0]
 8001592:	2900      	cmp	r1, #0
 8001594:	d007      	beq.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	490b      	ldr	r1, [pc, #44]	; (80015c4 <_sbrk+0x40>)
 8001598:	6808      	ldr	r0, [r1, #0]
 800159a:	18c3      	adds	r3, r0, r3
 800159c:	4293      	cmp	r3, r2
 800159e:	d806      	bhi.n	80015ae <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <_sbrk+0x40>)
 80015a2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80015a4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015a6:	4907      	ldr	r1, [pc, #28]	; (80015c4 <_sbrk+0x40>)
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <_sbrk+0x44>)
 80015aa:	6008      	str	r0, [r1, #0]
 80015ac:	e7f3      	b.n	8001596 <_sbrk+0x12>
    errno = ENOMEM;
 80015ae:	f001 fc91 	bl	8002ed4 <__errno>
 80015b2:	230c      	movs	r3, #12
 80015b4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015b6:	2001      	movs	r0, #1
 80015b8:	4240      	negs	r0, r0
 80015ba:	e7f3      	b.n	80015a4 <_sbrk+0x20>
 80015bc:	20002000 	.word	0x20002000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	20000b3c 	.word	0x20000b3c
 80015c8:	20000c90 	.word	0x20000c90

080015cc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015cc:	4770      	bx	lr
	...

080015d0 <Reset_Handler>:
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopForever+0x2>)
 80015d2:	4685      	mov	sp, r0
 80015d4:	f7ff fffa 	bl	80015cc <SystemInit>
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
 80015de:	2300      	movs	r3, #0
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:
 80015e2:	58d4      	ldr	r4, [r2, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:
 80015e8:	18c4      	adds	r4, r0, r3
 80015ea:	428c      	cmp	r4, r1
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:
 80015fa:	42a2      	cmp	r2, r4
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>
 80015fe:	f001 fc6f 	bl	8002ee0 <__libc_init_array>
 8001602:	f7ff f83d 	bl	8000680 <main>

08001606 <LoopForever>:
 8001606:	e7fe      	b.n	8001606 <LoopForever>
 8001608:	20002000 	.word	0x20002000
 800160c:	20000000 	.word	0x20000000
 8001610:	20000060 	.word	0x20000060
 8001614:	08003924 	.word	0x08003924
 8001618:	20000060 	.word	0x20000060
 800161c:	20000c8c 	.word	0x20000c8c

08001620 <ADC1_IRQHandler>:
 8001620:	e7fe      	b.n	8001620 <ADC1_IRQHandler>
	...

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4d0e      	ldr	r5, [pc, #56]	; (8001664 <HAL_InitTick+0x40>)
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_InitTick+0x44>)
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	20fa      	movs	r0, #250	; 0xfa
 8001630:	0080      	lsls	r0, r0, #2
 8001632:	f7fe fd73 	bl	800011c <__udivsi3>
 8001636:	0001      	movs	r1, r0
 8001638:	6828      	ldr	r0, [r5, #0]
 800163a:	f7fe fd6f 	bl	800011c <__udivsi3>
 800163e:	f000 f897 	bl	8001770 <HAL_SYSTICK_Config>
 8001642:	2800      	cmp	r0, #0
 8001644:	d10b      	bne.n	800165e <HAL_InitTick+0x3a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001646:	3001      	adds	r0, #1
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001648:	2c03      	cmp	r4, #3
 800164a:	d809      	bhi.n	8001660 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	0021      	movs	r1, r4
 8001650:	4240      	negs	r0, r0
 8001652:	f000 f841 	bl	80016d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_InitTick+0x48>)
 8001658:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 800165a:	2000      	movs	r0, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
}
 8001660:	bd70      	pop	{r4, r5, r6, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000004 	.word	0x20000004
 8001668:	20000008 	.word	0x20000008
 800166c:	2000000c 	.word	0x2000000c

08001670 <HAL_Init>:
{
 8001670:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_Init+0x1c>)
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	2110      	movs	r1, #16
 8001678:	430b      	orrs	r3, r1
 800167a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff ffd1 	bl	8001624 <HAL_InitTick>
  HAL_MspInit();
 8001682:	f7ff fe5f 	bl	8001344 <HAL_MspInit>
}
 8001686:	2000      	movs	r0, #0
 8001688:	bd10      	pop	{r4, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40022000 	.word	0x40022000

08001690 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_IncTick+0x10>)
 8001692:	6811      	ldr	r1, [r2, #0]
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_IncTick+0x14>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	185b      	adds	r3, r3, r1
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	4770      	bx	lr
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000b40 	.word	0x20000b40
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <HAL_GetTick+0x8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
}
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000b40 	.word	0x20000b40

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff fff6 	bl	80016a8 <HAL_GetTick>
 80016bc:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	1c63      	adds	r3, r4, #1
 80016c0:	d002      	beq.n	80016c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_Delay+0x20>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	1b40      	subs	r0, r0, r5
 80016ce:	42a0      	cmp	r0, r4
 80016d0:	d3fa      	bcc.n	80016c8 <HAL_Delay+0x14>
  {
  }
}
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80016da:	2800      	cmp	r0, #0
 80016dc:	db14      	blt.n	8001708 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016de:	0884      	lsrs	r4, r0, #2
 80016e0:	00a4      	lsls	r4, r4, #2
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_NVIC_SetPriority+0x5c>)
 80016e4:	469c      	mov	ip, r3
 80016e6:	4464      	add	r4, ip
 80016e8:	26c0      	movs	r6, #192	; 0xc0
 80016ea:	00b6      	lsls	r6, r6, #2
 80016ec:	59a5      	ldr	r5, [r4, r6]
 80016ee:	2203      	movs	r2, #3
 80016f0:	4002      	ands	r2, r0
 80016f2:	00d2      	lsls	r2, r2, #3
 80016f4:	23ff      	movs	r3, #255	; 0xff
 80016f6:	0018      	movs	r0, r3
 80016f8:	4090      	lsls	r0, r2
 80016fa:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016fc:	0189      	lsls	r1, r1, #6
 80016fe:	400b      	ands	r3, r1
 8001700:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001702:	432b      	orrs	r3, r5
 8001704:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001706:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	230f      	movs	r3, #15
 800170a:	4003      	ands	r3, r0
 800170c:	3b08      	subs	r3, #8
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_NVIC_SetPriority+0x60>)
 8001714:	4694      	mov	ip, r2
 8001716:	4463      	add	r3, ip
 8001718:	69dc      	ldr	r4, [r3, #28]
 800171a:	2203      	movs	r2, #3
 800171c:	4010      	ands	r0, r2
 800171e:	00c0      	lsls	r0, r0, #3
 8001720:	32fc      	adds	r2, #252	; 0xfc
 8001722:	0015      	movs	r5, r2
 8001724:	4085      	lsls	r5, r0
 8001726:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001728:	0189      	lsls	r1, r1, #6
 800172a:	400a      	ands	r2, r1
 800172c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172e:	4322      	orrs	r2, r4
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	e7e8      	b.n	8001706 <HAL_NVIC_SetPriority+0x2e>
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800173c:	2800      	cmp	r0, #0
 800173e:	db05      	blt.n	800174c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001740:	221f      	movs	r2, #31
 8001742:	4002      	ands	r2, r0
 8001744:	2301      	movs	r3, #1
 8001746:	4093      	lsls	r3, r2
 8001748:	4a01      	ldr	r2, [pc, #4]	; (8001750 <HAL_NVIC_EnableIRQ+0x14>)
 800174a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800174c:	4770      	bx	lr
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	e000e100 	.word	0xe000e100

08001754 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_NVIC_SystemReset+0x14>)
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_NVIC_SystemReset+0x18>)
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001762:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8001764:	e7fd      	b.n	8001762 <HAL_NVIC_SystemReset+0xe>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	05fa0004 	.word	0x05fa0004

08001770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	3801      	subs	r0, #1
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	045b      	lsls	r3, r3, #17
 8001776:	4298      	cmp	r0, r3
 8001778:	d20f      	bcs.n	800179a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_SYSTICK_Config+0x30>)
 800177c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_SYSTICK_Config+0x34>)
 8001780:	6a03      	ldr	r3, [r0, #32]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	21c0      	movs	r1, #192	; 0xc0
 8001788:	0609      	lsls	r1, r1, #24
 800178a:	430b      	orrs	r3, r1
 800178c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178e:	2300      	movs	r3, #0
 8001790:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	3307      	adds	r3, #7
 8001794:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001796:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001798:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800179c:	e7fc      	b.n	8001798 <HAL_SYSTICK_Config+0x28>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	e000e010 	.word	0xe000e010
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017ac:	d028      	beq.n	8001800 <HAL_DMA_Init+0x58>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ae:	2521      	movs	r5, #33	; 0x21
 80017b0:	2302      	movs	r3, #2
 80017b2:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017b4:	6801      	ldr	r1, [r0, #0]
 80017b6:	680a      	ldr	r2, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_DMA_Init+0x5c>)
 80017ba:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017bc:	6843      	ldr	r3, [r0, #4]
 80017be:	6880      	ldr	r0, [r0, #8]
 80017c0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c2:	68e0      	ldr	r0, [r4, #12]
 80017c4:	4303      	orrs	r3, r0
 80017c6:	6920      	ldr	r0, [r4, #16]
 80017c8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	6960      	ldr	r0, [r4, #20]
 80017cc:	4303      	orrs	r3, r0
 80017ce:	69a0      	ldr	r0, [r4, #24]
 80017d0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	69e0      	ldr	r0, [r4, #28]
 80017d4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80017d6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017d8:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017da:	6820      	ldr	r0, [r4, #0]
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_DMA_Init+0x60>)
 80017de:	469c      	mov	ip, r3
 80017e0:	4460      	add	r0, ip
 80017e2:	2114      	movs	r1, #20
 80017e4:	f7fe fc9a 	bl	800011c <__udivsi3>
 80017e8:	0080      	lsls	r0, r0, #2
 80017ea:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_DMA_Init+0x64>)
 80017ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80017f4:	2201      	movs	r2, #1
 80017f6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80017f8:	321f      	adds	r2, #31
 80017fa:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80017fc:	2000      	movs	r0, #0
}  
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
 8001802:	e7fc      	b.n	80017fe <HAL_DMA_Init+0x56>
 8001804:	ffffc00f 	.word	0xffffc00f
 8001808:	bffdfff8 	.word	0xbffdfff8
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_DMA_Start_IT>:
{
 8001810:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001812:	2420      	movs	r4, #32
 8001814:	5d04      	ldrb	r4, [r0, r4]
 8001816:	2c01      	cmp	r4, #1
 8001818:	d041      	beq.n	800189e <HAL_DMA_Start_IT+0x8e>
 800181a:	2420      	movs	r4, #32
 800181c:	2501      	movs	r5, #1
 800181e:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001820:	3401      	adds	r4, #1
 8001822:	5d04      	ldrb	r4, [r0, r4]
 8001824:	2c01      	cmp	r4, #1
 8001826:	d004      	beq.n	8001832 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001828:	2320      	movs	r3, #32
 800182a:	2200      	movs	r2, #0
 800182c:	54c2      	strb	r2, [r0, r3]
    status = HAL_BUSY;
 800182e:	2002      	movs	r0, #2
} 
 8001830:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001832:	3420      	adds	r4, #32
 8001834:	3501      	adds	r5, #1
 8001836:	5505      	strb	r5, [r0, r4]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001838:	2400      	movs	r4, #0
 800183a:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800183c:	6806      	ldr	r6, [r0, #0]
 800183e:	6835      	ldr	r5, [r6, #0]
 8001840:	3401      	adds	r4, #1
 8001842:	43a5      	bics	r5, r4
 8001844:	6035      	str	r5, [r6, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001846:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001848:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800184a:	40b4      	lsls	r4, r6
 800184c:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 800184e:	6804      	ldr	r4, [r0, #0]
 8001850:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001852:	6843      	ldr	r3, [r0, #4]
 8001854:	2b10      	cmp	r3, #16
 8001856:	d012      	beq.n	800187e <HAL_DMA_Start_IT+0x6e>
    hdma->Instance->CPAR = SrcAddress;
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001860:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <HAL_DMA_Start_IT+0x78>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001866:	6802      	ldr	r2, [r0, #0]
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	210e      	movs	r1, #14
 800186c:	430b      	orrs	r3, r1
 800186e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	430b      	orrs	r3, r1
 8001878:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800187a:	2000      	movs	r0, #0
 800187c:	e7d8      	b.n	8001830 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 800187e:	6803      	ldr	r3, [r0, #0]
 8001880:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001882:	6803      	ldr	r3, [r0, #0]
 8001884:	60d9      	str	r1, [r3, #12]
 8001886:	e7eb      	b.n	8001860 <HAL_DMA_Start_IT+0x50>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001888:	6802      	ldr	r2, [r0, #0]
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	210a      	movs	r1, #10
 800188e:	430b      	orrs	r3, r1
 8001890:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001892:	6802      	ldr	r2, [r0, #0]
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	3906      	subs	r1, #6
 8001898:	438b      	bics	r3, r1
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e7e8      	b.n	8001870 <HAL_DMA_Start_IT+0x60>
  __HAL_LOCK(hdma);
 800189e:	2002      	movs	r0, #2
 80018a0:	e7c6      	b.n	8001830 <HAL_DMA_Start_IT+0x20>

080018a2 <HAL_DMA_Abort_IT>:
{  
 80018a2:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a4:	2321      	movs	r3, #33	; 0x21
 80018a6:	5cc3      	ldrb	r3, [r0, r3]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d003      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	2304      	movs	r3, #4
 80018ae:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
}
 80018b2:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018b4:	6802      	ldr	r2, [r0, #0]
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	210e      	movs	r1, #14
 80018ba:	438b      	bics	r3, r1
 80018bc:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	680a      	ldr	r2, [r1, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	439a      	bics	r2, r3
 80018c6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80018ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80018cc:	001c      	movs	r4, r3
 80018ce:	408c      	lsls	r4, r1
 80018d0:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018d2:	2221      	movs	r2, #33	; 0x21
 80018d4:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80018d6:	331f      	adds	r3, #31
 80018d8:	2200      	movs	r2, #0
 80018da:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80018dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80018e2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2000      	movs	r0, #0
 80018e6:	e7e4      	b.n	80018b2 <HAL_DMA_Abort_IT+0x10>
 80018e8:	2000      	movs	r0, #0
 80018ea:	e7e2      	b.n	80018b2 <HAL_DMA_Abort_IT+0x10>

080018ec <HAL_DMA_IRQHandler>:
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80018f0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018f2:	6804      	ldr	r4, [r0, #0]
 80018f4:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80018f8:	2304      	movs	r3, #4
 80018fa:	408b      	lsls	r3, r1
 80018fc:	421a      	tst	r2, r3
 80018fe:	d012      	beq.n	8001926 <HAL_DMA_IRQHandler+0x3a>
 8001900:	076b      	lsls	r3, r5, #29
 8001902:	d510      	bpl.n	8001926 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	d403      	bmi.n	8001912 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	2204      	movs	r2, #4
 800190e:	4393      	bics	r3, r2
 8001910:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001912:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001914:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001916:	2304      	movs	r3, #4
 8001918:	408b      	lsls	r3, r1
 800191a:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800191c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800191e:	2b00      	cmp	r3, #0
 8001920:	d000      	beq.n	8001924 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8001922:	4798      	blx	r3
}  
 8001924:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001926:	2302      	movs	r3, #2
 8001928:	408b      	lsls	r3, r1
 800192a:	421a      	tst	r2, r3
 800192c:	d018      	beq.n	8001960 <HAL_DMA_IRQHandler+0x74>
 800192e:	07ab      	lsls	r3, r5, #30
 8001930:	d516      	bpl.n	8001960 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	069b      	lsls	r3, r3, #26
 8001936:	d406      	bmi.n	8001946 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	220a      	movs	r2, #10
 800193c:	4393      	bics	r3, r2
 800193e:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001940:	2321      	movs	r3, #33	; 0x21
 8001942:	3a09      	subs	r2, #9
 8001944:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001946:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001948:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800194a:	2302      	movs	r3, #2
 800194c:	408b      	lsls	r3, r1
 800194e:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001950:	2320      	movs	r3, #32
 8001952:	2200      	movs	r2, #0
 8001954:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001956:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0e3      	beq.n	8001924 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 800195c:	4798      	blx	r3
 800195e:	e7e1      	b.n	8001924 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001960:	2308      	movs	r3, #8
 8001962:	408b      	lsls	r3, r1
 8001964:	421a      	tst	r2, r3
 8001966:	d0dd      	beq.n	8001924 <HAL_DMA_IRQHandler+0x38>
 8001968:	072d      	lsls	r5, r5, #28
 800196a:	d5db      	bpl.n	8001924 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	220e      	movs	r2, #14
 8001970:	4393      	bics	r3, r2
 8001972:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001974:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001976:	2301      	movs	r3, #1
 8001978:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800197a:	001c      	movs	r4, r3
 800197c:	408c      	lsls	r4, r1
 800197e:	6054      	str	r4, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001980:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001982:	2221      	movs	r2, #33	; 0x21
 8001984:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8001986:	331f      	adds	r3, #31
 8001988:	2200      	movs	r2, #0
 800198a:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 800198c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0c8      	beq.n	8001924 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8001992:	4798      	blx	r3
}  
 8001994:	e7c6      	b.n	8001924 <HAL_DMA_IRQHandler+0x38>
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199a:	46de      	mov	lr, fp
 800199c:	4657      	mov	r7, sl
 800199e:	464e      	mov	r6, r9
 80019a0:	4645      	mov	r5, r8
 80019a2:	b5e0      	push	{r5, r6, r7, lr}
 80019a4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	680a      	ldr	r2, [r1, #0]
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d100      	bne.n	80019ae <HAL_GPIO_Init+0x16>
 80019ac:	e0c7      	b.n	8001b3e <HAL_GPIO_Init+0x1a6>
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b0:	2601      	movs	r6, #1

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b2:	2410      	movs	r4, #16
 80019b4:	46a2      	mov	sl, r4
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b6:	3c0d      	subs	r4, #13
 80019b8:	46a1      	mov	r9, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ba:	2480      	movs	r4, #128	; 0x80
 80019bc:	0564      	lsls	r4, r4, #21
 80019be:	46a3      	mov	fp, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c0:	4c62      	ldr	r4, [pc, #392]	; (8001b4c <HAL_GPIO_Init+0x1b4>)
 80019c2:	1904      	adds	r4, r0, r4
 80019c4:	4265      	negs	r5, r4
 80019c6:	416c      	adcs	r4, r5
 80019c8:	4264      	negs	r4, r4
 80019ca:	9403      	str	r4, [sp, #12]
 80019cc:	e043      	b.n	8001a56 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3u];
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	1882      	adds	r2, r0, r2
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	6a15      	ldr	r5, [r2, #32]
 80019d8:	46ac      	mov	ip, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019da:	2507      	movs	r5, #7
 80019dc:	401d      	ands	r5, r3
 80019de:	00ad      	lsls	r5, r5, #2
 80019e0:	270f      	movs	r7, #15
 80019e2:	40af      	lsls	r7, r5
 80019e4:	46b8      	mov	r8, r7
 80019e6:	4667      	mov	r7, ip
 80019e8:	4642      	mov	r2, r8
 80019ea:	4397      	bics	r7, r2
 80019ec:	46bc      	mov	ip, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ee:	690a      	ldr	r2, [r1, #16]
 80019f0:	0017      	movs	r7, r2
 80019f2:	40af      	lsls	r7, r5
 80019f4:	003d      	movs	r5, r7
 80019f6:	4662      	mov	r2, ip
 80019f8:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3u] = temp;
 80019fa:	9a02      	ldr	r2, [sp, #8]
 80019fc:	6215      	str	r5, [r2, #32]
 80019fe:	e036      	b.n	8001a6e <HAL_GPIO_Init+0xd6>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a00:	2400      	movs	r4, #0
 8001a02:	40ac      	lsls	r4, r5
 8001a04:	4665      	mov	r5, ip
 8001a06:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a08:	6094      	str	r4, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <HAL_GPIO_Init+0x1b8>)
 8001a0c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8001a0e:	9c01      	ldr	r4, [sp, #4]
 8001a10:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a12:	684d      	ldr	r5, [r1, #4]
 8001a14:	03ed      	lsls	r5, r5, #15
 8001a16:	d500      	bpl.n	8001a1a <HAL_GPIO_Init+0x82>
 8001a18:	e085      	b.n	8001b26 <HAL_GPIO_Init+0x18e>
        temp &= ~(iocurrent);
 8001a1a:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001a1c:	4d4c      	ldr	r5, [pc, #304]	; (8001b50 <HAL_GPIO_Init+0x1b8>)
 8001a1e:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8001a20:	686a      	ldr	r2, [r5, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a22:	684d      	ldr	r5, [r1, #4]
 8001a24:	03ad      	lsls	r5, r5, #14
 8001a26:	d500      	bpl.n	8001a2a <HAL_GPIO_Init+0x92>
 8001a28:	e080      	b.n	8001b2c <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8001a2a:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001a2c:	4d48      	ldr	r5, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x1b8>)
 8001a2e:	606a      	str	r2, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a30:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a32:	684d      	ldr	r5, [r1, #4]
 8001a34:	02ed      	lsls	r5, r5, #11
 8001a36:	d47c      	bmi.n	8001b32 <HAL_GPIO_Init+0x19a>
        temp &= ~(iocurrent);
 8001a38:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001a3a:	4d45      	ldr	r5, [pc, #276]	; (8001b50 <HAL_GPIO_Init+0x1b8>)
 8001a3c:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR;
 8001a3e:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	684d      	ldr	r5, [r1, #4]
 8001a42:	02ad      	lsls	r5, r5, #10
 8001a44:	d478      	bmi.n	8001b38 <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 8001a46:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001a48:	4c41      	ldr	r4, [pc, #260]	; (8001b50 <HAL_GPIO_Init+0x1b8>)
 8001a4a:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 8001a4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	680a      	ldr	r2, [r1, #0]
 8001a50:	0014      	movs	r4, r2
 8001a52:	40dc      	lsrs	r4, r3
 8001a54:	d073      	beq.n	8001b3e <HAL_GPIO_Init+0x1a6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a56:	0034      	movs	r4, r6
 8001a58:	409c      	lsls	r4, r3
 8001a5a:	0017      	movs	r7, r2
 8001a5c:	4027      	ands	r7, r4
 8001a5e:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8001a60:	4222      	tst	r2, r4
 8001a62:	d0f3      	beq.n	8001a4c <HAL_GPIO_Init+0xb4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a64:	684a      	ldr	r2, [r1, #4]
 8001a66:	4655      	mov	r5, sl
 8001a68:	43aa      	bics	r2, r5
 8001a6a:	2a02      	cmp	r2, #2
 8001a6c:	d0af      	beq.n	80019ce <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001a6e:	6802      	ldr	r2, [r0, #0]
 8001a70:	4690      	mov	r8, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a72:	005d      	lsls	r5, r3, #1
 8001a74:	464a      	mov	r2, r9
 8001a76:	40aa      	lsls	r2, r5
 8001a78:	43d7      	mvns	r7, r2
 8001a7a:	46bc      	mov	ip, r7
 8001a7c:	4647      	mov	r7, r8
 8001a7e:	4397      	bics	r7, r2
 8001a80:	46b8      	mov	r8, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a82:	684a      	ldr	r2, [r1, #4]
 8001a84:	464f      	mov	r7, r9
 8001a86:	403a      	ands	r2, r7
 8001a88:	40aa      	lsls	r2, r5
 8001a8a:	4647      	mov	r7, r8
 8001a8c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8001a8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a90:	684a      	ldr	r2, [r1, #4]
 8001a92:	4657      	mov	r7, sl
 8001a94:	43ba      	bics	r2, r7
 8001a96:	3a01      	subs	r2, #1
 8001a98:	2a01      	cmp	r2, #1
 8001a9a:	d80f      	bhi.n	8001abc <HAL_GPIO_Init+0x124>
        temp = GPIOx->OSPEEDR;
 8001a9c:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a9e:	4667      	mov	r7, ip
 8001aa0:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa2:	68ca      	ldr	r2, [r1, #12]
 8001aa4:	40aa      	lsls	r2, r5
 8001aa6:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8001aa8:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001aaa:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	43a2      	bics	r2, r4
 8001aae:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ab0:	684a      	ldr	r2, [r1, #4]
 8001ab2:	0912      	lsrs	r2, r2, #4
 8001ab4:	4032      	ands	r2, r6
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001aba:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001abc:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001abe:	4662      	mov	r2, ip
 8001ac0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac2:	688a      	ldr	r2, [r1, #8]
 8001ac4:	40aa      	lsls	r2, r5
 8001ac6:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8001ac8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aca:	684a      	ldr	r2, [r1, #4]
 8001acc:	465c      	mov	r4, fp
 8001ace:	4222      	tst	r2, r4
 8001ad0:	d0bc      	beq.n	8001a4c <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_GPIO_Init+0x1bc>)
 8001ad4:	6994      	ldr	r4, [r2, #24]
 8001ad6:	4334      	orrs	r4, r6
 8001ad8:	6194      	str	r4, [r2, #24]
 8001ada:	6992      	ldr	r2, [r2, #24]
 8001adc:	4032      	ands	r2, r6
 8001ade:	9205      	str	r2, [sp, #20]
 8001ae0:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae2:	089a      	lsrs	r2, r3, #2
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4c1c      	ldr	r4, [pc, #112]	; (8001b58 <HAL_GPIO_Init+0x1c0>)
 8001ae8:	46a4      	mov	ip, r4
 8001aea:	4462      	add	r2, ip
 8001aec:	6894      	ldr	r4, [r2, #8]
 8001aee:	46a4      	mov	ip, r4
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af0:	464d      	mov	r5, r9
 8001af2:	401d      	ands	r5, r3
 8001af4:	00ad      	lsls	r5, r5, #2
 8001af6:	240f      	movs	r4, #15
 8001af8:	40ac      	lsls	r4, r5
 8001afa:	4667      	mov	r7, ip
 8001afc:	43a7      	bics	r7, r4
 8001afe:	46bc      	mov	ip, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b00:	2490      	movs	r4, #144	; 0x90
 8001b02:	05e4      	lsls	r4, r4, #23
 8001b04:	42a0      	cmp	r0, r4
 8001b06:	d100      	bne.n	8001b0a <HAL_GPIO_Init+0x172>
 8001b08:	e77a      	b.n	8001a00 <HAL_GPIO_Init+0x68>
 8001b0a:	4c14      	ldr	r4, [pc, #80]	; (8001b5c <HAL_GPIO_Init+0x1c4>)
 8001b0c:	42a0      	cmp	r0, r4
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x186>
 8001b10:	4c13      	ldr	r4, [pc, #76]	; (8001b60 <HAL_GPIO_Init+0x1c8>)
 8001b12:	42a0      	cmp	r0, r4
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_Init+0x18a>
 8001b16:	9c03      	ldr	r4, [sp, #12]
 8001b18:	43b4      	bics	r4, r6
 8001b1a:	3405      	adds	r4, #5
 8001b1c:	e771      	b.n	8001a02 <HAL_GPIO_Init+0x6a>
 8001b1e:	2401      	movs	r4, #1
 8001b20:	e76f      	b.n	8001a02 <HAL_GPIO_Init+0x6a>
 8001b22:	2402      	movs	r4, #2
 8001b24:	e76d      	b.n	8001a02 <HAL_GPIO_Init+0x6a>
          temp |= iocurrent;
 8001b26:	9d01      	ldr	r5, [sp, #4]
 8001b28:	432a      	orrs	r2, r5
 8001b2a:	e777      	b.n	8001a1c <HAL_GPIO_Init+0x84>
          temp |= iocurrent;
 8001b2c:	9d01      	ldr	r5, [sp, #4]
 8001b2e:	432a      	orrs	r2, r5
 8001b30:	e77c      	b.n	8001a2c <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 8001b32:	9d01      	ldr	r5, [sp, #4]
 8001b34:	432a      	orrs	r2, r5
 8001b36:	e780      	b.n	8001a3a <HAL_GPIO_Init+0xa2>
          temp |= iocurrent;
 8001b38:	9c01      	ldr	r4, [sp, #4]
 8001b3a:	4322      	orrs	r2, r4
 8001b3c:	e784      	b.n	8001a48 <HAL_GPIO_Init+0xb0>
  } 
}
 8001b3e:	b007      	add	sp, #28
 8001b40:	bcf0      	pop	{r4, r5, r6, r7}
 8001b42:	46bb      	mov	fp, r7
 8001b44:	46b2      	mov	sl, r6
 8001b46:	46a9      	mov	r9, r5
 8001b48:	46a0      	mov	r8, r4
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	b7fff400 	.word	0xb7fff400
 8001b50:	40010400 	.word	0x40010400
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800

08001b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b64:	2a00      	cmp	r2, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b68:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b6a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001b6e:	e7fc      	b.n	8001b6a <HAL_GPIO_WritePin+0x6>

08001b70 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001b70:	6943      	ldr	r3, [r0, #20]
 8001b72:	4219      	tst	r1, r3
 8001b74:	d002      	beq.n	8001b7c <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b76:	0409      	lsls	r1, r1, #16
 8001b78:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7c:	6181      	str	r1, [r0, #24]
}
 8001b7e:	e7fc      	b.n	8001b7a <HAL_GPIO_TogglePin+0xa>

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	46ce      	mov	lr, r9
 8001b84:	4647      	mov	r7, r8
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	d100      	bne.n	8001b90 <HAL_RCC_OscConfig+0x10>
 8001b8e:	e24c      	b.n	800202a <HAL_RCC_OscConfig+0x4aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b90:	6803      	ldr	r3, [r0, #0]
 8001b92:	07db      	lsls	r3, r3, #31
 8001b94:	d526      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b96:	4bb7      	ldr	r3, [pc, #732]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d018      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba2:	4bb4      	ldr	r3, [pc, #720]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d00e      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d03d      	beq.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d154      	bne.n	8001c62 <HAL_RCC_OscConfig+0xe2>
 8001bb8:	4bae      	ldr	r3, [pc, #696]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	49ae      	ldr	r1, [pc, #696]	; (8001e78 <HAL_RCC_OscConfig+0x2f8>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	49ad      	ldr	r1, [pc, #692]	; (8001e7c <HAL_RCC_OscConfig+0x2fc>)
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e037      	b.n	8001c3c <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4ba9      	ldr	r3, [pc, #676]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	03db      	lsls	r3, r3, #15
 8001bd2:	d5ec      	bpl.n	8001bae <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4ba7      	ldr	r3, [pc, #668]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	039b      	lsls	r3, r3, #14
 8001bda:	d503      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x64>
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_RCC_OscConfig+0x64>
 8001be2:	e228      	b.n	8002036 <HAL_RCC_OscConfig+0x4b6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	079b      	lsls	r3, r3, #30
 8001be8:	d578      	bpl.n	8001cdc <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bea:	4ba2      	ldr	r3, [pc, #648]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	220c      	movs	r2, #12
 8001bf0:	421a      	tst	r2, r3
 8001bf2:	d062      	beq.n	8001cba <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf4:	4b9f      	ldr	r3, [pc, #636]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d058      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x132>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	68e3      	ldr	r3, [r4, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d100      	bne.n	8001c08 <HAL_RCC_OscConfig+0x88>
 8001c06:	e08c      	b.n	8001d22 <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4a9a      	ldr	r2, [pc, #616]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fd49 	bl	80016a8 <HAL_GetTick>
 8001c16:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4f96      	ldr	r7, [pc, #600]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c1a:	2602      	movs	r6, #2
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	421e      	tst	r6, r3
 8001c20:	d176      	bne.n	8001d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fd41 	bl	80016a8 <HAL_GetTick>
 8001c26:	1b40      	subs	r0, r0, r5
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	d9f7      	bls.n	8001c1c <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e1fd      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	4a90      	ldr	r2, [pc, #576]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c32:	6811      	ldr	r1, [r2, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d027      	beq.n	8001c92 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001c42:	f7ff fd31 	bl	80016a8 <HAL_GetTick>
 8001c46:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c48:	4f8a      	ldr	r7, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c4a:	2680      	movs	r6, #128	; 0x80
 8001c4c:	02b6      	lsls	r6, r6, #10
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4233      	tst	r3, r6
 8001c52:	d1c7      	bne.n	8001be4 <HAL_RCC_OscConfig+0x64>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fd28 	bl	80016a8 <HAL_GetTick>
 8001c58:	1b40      	subs	r0, r0, r5
 8001c5a:	2864      	cmp	r0, #100	; 0x64
 8001c5c:	d9f7      	bls.n	8001c4e <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8001c5e:	2003      	movs	r0, #3
 8001c60:	e1e4      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_OscConfig+0xfa>
 8001c66:	4b83      	ldr	r3, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4983      	ldr	r1, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x2f8>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4982      	ldr	r1, [pc, #520]	; (8001e7c <HAL_RCC_OscConfig+0x2fc>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e7e0      	b.n	8001c3c <HAL_RCC_OscConfig+0xbc>
 8001c7a:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	02d2      	lsls	r2, r2, #11
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	0252      	lsls	r2, r2, #9
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e7d4      	b.n	8001c3c <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c92:	f7ff fd09 	bl	80016a8 <HAL_GetTick>
 8001c96:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c98:	4f76      	ldr	r7, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001c9a:	2680      	movs	r6, #128	; 0x80
 8001c9c:	02b6      	lsls	r6, r6, #10
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4233      	tst	r3, r6
 8001ca2:	d09f      	beq.n	8001be4 <HAL_RCC_OscConfig+0x64>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fd00 	bl	80016a8 <HAL_GetTick>
 8001ca8:	1b40      	subs	r0, r0, r5
 8001caa:	2864      	cmp	r0, #100	; 0x64
 8001cac:	d9f7      	bls.n	8001c9e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001cae:	2003      	movs	r0, #3
 8001cb0:	e1bc      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	03db      	lsls	r3, r3, #15
 8001cb8:	d4a2      	bmi.n	8001c00 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b6e      	ldr	r3, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	079b      	lsls	r3, r3, #30
 8001cc0:	d504      	bpl.n	8001ccc <HAL_RCC_OscConfig+0x14c>
 8001cc2:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d000      	beq.n	8001ccc <HAL_RCC_OscConfig+0x14c>
 8001cca:	e1af      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4969      	ldr	r1, [pc, #420]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001cce:	680a      	ldr	r2, [r1, #0]
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	20f8      	movs	r0, #248	; 0xf8
 8001cd6:	4382      	bics	r2, r0
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	071b      	lsls	r3, r3, #28
 8001ce0:	d547      	bpl.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	69e3      	ldr	r3, [r4, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d030      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001cea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001cec:	2101      	movs	r1, #1
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fcd9 	bl	80016a8 <HAL_GetTick>
 8001cf6:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	4f5e      	ldr	r7, [pc, #376]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001cfa:	2602      	movs	r6, #2
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	421e      	tst	r6, r3
 8001d00:	d137      	bne.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff fcd1 	bl	80016a8 <HAL_GetTick>
 8001d06:	1b40      	subs	r0, r0, r5
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d9f7      	bls.n	8001cfc <HAL_RCC_OscConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	e18d      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4958      	ldr	r1, [pc, #352]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d12:	680a      	ldr	r2, [r1, #0]
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	20f8      	movs	r0, #248	; 0xf8
 8001d1a:	4382      	bics	r2, r0
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e7dc      	b.n	8001cdc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	438b      	bics	r3, r1
 8001d2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fcbc 	bl	80016a8 <HAL_GetTick>
 8001d30:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4f50      	ldr	r7, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d34:	2602      	movs	r6, #2
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	421e      	tst	r6, r3
 8001d3a:	d0cf      	beq.n	8001cdc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fcb4 	bl	80016a8 <HAL_GetTick>
 8001d40:	1b40      	subs	r0, r0, r5
 8001d42:	2802      	cmp	r0, #2
 8001d44:	d9f7      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001d46:	2003      	movs	r0, #3
 8001d48:	e170      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d4e:	2101      	movs	r1, #1
 8001d50:	438b      	bics	r3, r1
 8001d52:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fca8 	bl	80016a8 <HAL_GetTick>
 8001d58:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	4f46      	ldr	r7, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d5c:	2602      	movs	r6, #2
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	421e      	tst	r6, r3
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fca0 	bl	80016a8 <HAL_GetTick>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f7      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1de>
        {
          return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
 8001d70:	e15c      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	075b      	lsls	r3, r3, #29
 8001d76:	d400      	bmi.n	8001d7a <HAL_RCC_OscConfig+0x1fa>
 8001d78:	e089      	b.n	8001e8e <HAL_RCC_OscConfig+0x30e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4691      	mov	r9, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	d40b      	bmi.n	8001d9e <HAL_RCC_OscConfig+0x21e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	0549      	lsls	r1, r1, #21
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	400b      	ands	r3, r1
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x300>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	05db      	lsls	r3, r3, #23
 8001da4:	d50e      	bpl.n	8001dc4 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	68a3      	ldr	r3, [r4, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d021      	beq.n	8001df0 <HAL_RCC_OscConfig+0x270>
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d139      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2a4>
 8001db0:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	2101      	movs	r1, #1
 8001db6:	438a      	bics	r2, r1
 8001db8:	621a      	str	r2, [r3, #32]
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	3103      	adds	r1, #3
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	621a      	str	r2, [r3, #32]
 8001dc2:	e01a      	b.n	8001dfa <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <HAL_RCC_OscConfig+0x300>)
 8001dc6:	6811      	ldr	r1, [r2, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc6a 	bl	80016a8 <HAL_GetTick>
 8001dd4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4d2a      	ldr	r5, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x300>)
 8001dd8:	2780      	movs	r7, #128	; 0x80
 8001dda:	007f      	lsls	r7, r7, #1
 8001ddc:	682b      	ldr	r3, [r5, #0]
 8001dde:	423b      	tst	r3, r7
 8001de0:	d1e1      	bne.n	8001da6 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fc61 	bl	80016a8 <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	2864      	cmp	r0, #100	; 0x64
 8001dea:	d9f7      	bls.n	8001ddc <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e11d      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001df2:	6a13      	ldr	r3, [r2, #32]
 8001df4:	2101      	movs	r1, #1
 8001df6:	430b      	orrs	r3, r1
 8001df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfa:	68a3      	ldr	r3, [r4, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d027      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc52 	bl	80016a8 <HAL_GetTick>
 8001e04:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001e08:	4698      	mov	r8, r3
 8001e0a:	2702      	movs	r7, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	4d1d      	ldr	r5, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4643      	mov	r3, r8
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	421f      	tst	r7, r3
 8001e14:	d138      	bne.n	8001e88 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fc47 	bl	80016a8 <HAL_GetTick>
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	42a8      	cmp	r0, r5
 8001e1e:	d9f6      	bls.n	8001e0e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e103      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d009      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2bc>
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	438a      	bics	r2, r1
 8001e30:	621a      	str	r2, [r3, #32]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	3103      	adds	r1, #3
 8001e36:	438a      	bics	r2, r1
 8001e38:	621a      	str	r2, [r3, #32]
 8001e3a:	e7de      	b.n	8001dfa <HAL_RCC_OscConfig+0x27a>
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	2104      	movs	r1, #4
 8001e42:	430a      	orrs	r2, r1
 8001e44:	621a      	str	r2, [r3, #32]
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	3903      	subs	r1, #3
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	621a      	str	r2, [r3, #32]
 8001e4e:	e7d4      	b.n	8001dfa <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fc2a 	bl	80016a8 <HAL_GetTick>
 8001e54:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_OscConfig+0x2f4>)
 8001e58:	4698      	mov	r8, r3
 8001e5a:	2702      	movs	r7, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	4d09      	ldr	r5, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	4643      	mov	r3, r8
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	421f      	tst	r7, r3
 8001e64:	d010      	beq.n	8001e88 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fc1f 	bl	80016a8 <HAL_GetTick>
 8001e6a:	1b80      	subs	r0, r0, r6
 8001e6c:	42a8      	cmp	r0, r5
 8001e6e:	d9f6      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2de>
        {
          return HAL_TIMEOUT;
 8001e70:	2003      	movs	r0, #3
 8001e72:	e0db      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	fffeffff 	.word	0xfffeffff
 8001e7c:	fffbffff 	.word	0xfffbffff
 8001e80:	40007000 	.word	0x40007000
 8001e84:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e88:	464b      	mov	r3, r9
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d037      	beq.n	8001efe <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	06db      	lsls	r3, r3, #27
 8001e92:	d510      	bpl.n	8001eb6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e94:	6963      	ldr	r3, [r4, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d037      	beq.n	8001f0a <HAL_RCC_OscConfig+0x38a>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	d156      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e9e:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001ea0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	438b      	bics	r3, r1
 8001ea6:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ea8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001eaa:	69a3      	ldr	r3, [r4, #24]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	20f8      	movs	r0, #248	; 0xf8
 8001eb0:	4381      	bics	r1, r0
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	6a23      	ldr	r3, [r4, #32]
        }
      }
    }
  }

  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d100      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x340>
 8001ebe:	e0b5      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001ec2:	6851      	ldr	r1, [r2, #4]
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	2a08      	cmp	r2, #8
 8001eca:	d100      	bne.n	8001ece <HAL_RCC_OscConfig+0x34e>
 8001ecc:	e093      	b.n	8001ff6 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d054      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001ed4:	6813      	ldr	r3, [r2, #0]
 8001ed6:	495b      	ldr	r1, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	400b      	ands	r3, r1
 8001eda:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001edc:	f7ff fbe4 	bl	80016a8 <HAL_GetTick>
 8001ee0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	4e57      	ldr	r6, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001ee4:	2580      	movs	r5, #128	; 0x80
 8001ee6:	04ad      	lsls	r5, r5, #18
 8001ee8:	6833      	ldr	r3, [r6, #0]
 8001eea:	422b      	tst	r3, r5
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x370>
 8001eee:	e080      	b.n	8001ff2 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff fbda 	bl	80016a8 <HAL_GetTick>
 8001ef4:	1b00      	subs	r0, r0, r4
 8001ef6:	2802      	cmp	r0, #2
 8001ef8:	d9f6      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8001efa:	2003      	movs	r0, #3
 8001efc:	e096      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f00:	69d3      	ldr	r3, [r2, #28]
 8001f02:	4951      	ldr	r1, [pc, #324]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	400b      	ands	r3, r1
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	e7c1      	b.n	8001e8e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	2104      	movs	r1, #4
 8001f10:	430a      	orrs	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	3903      	subs	r1, #3
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fbc4 	bl	80016a8 <HAL_GetTick>
 8001f20:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f22:	4f47      	ldr	r7, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f24:	2602      	movs	r6, #2
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	421e      	tst	r6, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f2c:	f7ff fbbc 	bl	80016a8 <HAL_GetTick>
 8001f30:	1b40      	subs	r0, r0, r5
 8001f32:	2802      	cmp	r0, #2
 8001f34:	d9f7      	bls.n	8001f26 <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
 8001f38:	e078      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f3a:	4941      	ldr	r1, [pc, #260]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f3c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001f3e:	69a3      	ldr	r3, [r4, #24]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	20f8      	movs	r0, #248	; 0xf8
 8001f44:	4382      	bics	r2, r0
 8001f46:	4313      	orrs	r3, r2
 8001f48:	634b      	str	r3, [r1, #52]	; 0x34
 8001f4a:	e7b4      	b.n	8001eb6 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f4c:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	2104      	movs	r1, #4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f58:	3903      	subs	r1, #3
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fba3 	bl	80016a8 <HAL_GetTick>
 8001f62:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f64:	4f36      	ldr	r7, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f66:	2602      	movs	r6, #2
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	421e      	tst	r6, r3
 8001f6c:	d0a3      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f6e:	f7ff fb9b 	bl	80016a8 <HAL_GetTick>
 8001f72:	1b40      	subs	r0, r0, r5
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d9f7      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3e8>
          return HAL_TIMEOUT;
 8001f78:	2003      	movs	r0, #3
 8001f7a:	e057      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4a30      	ldr	r2, [pc, #192]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	4930      	ldr	r1, [pc, #192]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	400b      	ands	r3, r1
 8001f84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb8f 	bl	80016a8 <HAL_GetTick>
 8001f8a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	4f2c      	ldr	r7, [pc, #176]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001f8e:	2680      	movs	r6, #128	; 0x80
 8001f90:	04b6      	lsls	r6, r6, #18
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	4233      	tst	r3, r6
 8001f96:	d006      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fb86 	bl	80016a8 <HAL_GetTick>
 8001f9c:	1b40      	subs	r0, r0, r5
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9f7      	bls.n	8001f92 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e042      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001faa:	210f      	movs	r1, #15
 8001fac:	438a      	bics	r2, r1
 8001fae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001fba:	4302      	orrs	r2, r0
 8001fbc:	4823      	ldr	r0, [pc, #140]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	4001      	ands	r1, r0
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	0452      	lsls	r2, r2, #17
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fce:	f7ff fb6b 	bl	80016a8 <HAL_GetTick>
 8001fd2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	4e1a      	ldr	r6, [pc, #104]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001fd6:	2580      	movs	r5, #128	; 0x80
 8001fd8:	04ad      	lsls	r5, r5, #18
 8001fda:	6833      	ldr	r3, [r6, #0]
 8001fdc:	422b      	tst	r3, r5
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff fb62 	bl	80016a8 <HAL_GetTick>
 8001fe4:	1b00      	subs	r0, r0, r4
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9f7      	bls.n	8001fda <HAL_RCC_OscConfig+0x45a>
            return HAL_TIMEOUT;
 8001fea:	2003      	movs	r0, #3
 8001fec:	e01e      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e01a      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d01f      	beq.n	800203a <HAL_RCC_OscConfig+0x4ba>
        pll_config  = RCC->CFGR;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x4c0>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001ffe:	6add      	ldr	r5, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	025b      	lsls	r3, r3, #9
 8002004:	4013      	ands	r3, r2
 8002006:	6a61      	ldr	r1, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	428b      	cmp	r3, r1
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800200e:	230f      	movs	r3, #15
 8002010:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002014:	428b      	cmp	r3, r1
 8002016:	d109      	bne.n	800202c <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	23f0      	movs	r3, #240	; 0xf0
 800201a:	039b      	lsls	r3, r3, #14
 800201c:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800201e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	1e53      	subs	r3, r2, #1
 8002024:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8002026:	b2d0      	uxtb	r0, r2
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
 800202a:	2001      	movs	r0, #1
}
 800202c:	b003      	add	sp, #12
 800202e:	bcc0      	pop	{r6, r7}
 8002030:	46b9      	mov	r9, r7
 8002032:	46b0      	mov	r8, r6
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
 8002038:	e7f8      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
        return HAL_ERROR;
 800203a:	2001      	movs	r0, #1
 800203c:	e7f6      	b.n	800202c <HAL_RCC_OscConfig+0x4ac>
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40021000 	.word	0x40021000
 8002044:	feffffff 	.word	0xfeffffff
 8002048:	efffffff 	.word	0xefffffff
 800204c:	ffc2ffff 	.word	0xffc2ffff

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b530      	push	{r4, r5, lr}
 8002052:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002054:	aa04      	add	r2, sp, #16
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002058:	cb31      	ldmia	r3!, {r0, r4, r5}
 800205a:	c231      	stmia	r2!, {r0, r4, r5}
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002060:	466a      	mov	r2, sp
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002064:	cb31      	ldmia	r3!, {r0, r4, r5}
 8002066:	c231      	stmia	r2!, {r0, r4, r5}
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x68>)
 800206e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	230c      	movs	r3, #12
 8002072:	4013      	ands	r3, r2
 8002074:	2b08      	cmp	r3, #8
 8002076:	d002      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x2e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800207a:	b009      	add	sp, #36	; 0x24
 800207c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800207e:	0293      	lsls	r3, r2, #10
 8002080:	0f1b      	lsrs	r3, r3, #28
 8002082:	a904      	add	r1, sp, #16
 8002084:	5ccc      	ldrb	r4, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x68>)
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800208a:	03d2      	lsls	r2, r2, #15
 800208c:	d508      	bpl.n	80020a0 <HAL_RCC_GetSysClockFreq+0x50>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800208e:	230f      	movs	r3, #15
 8002090:	400b      	ands	r3, r1
 8002092:	466a      	mov	r2, sp
 8002094:	5cd1      	ldrb	r1, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002096:	4809      	ldr	r0, [pc, #36]	; (80020bc <HAL_RCC_GetSysClockFreq+0x6c>)
 8002098:	f7fe f840 	bl	800011c <__udivsi3>
 800209c:	4360      	muls	r0, r4
 800209e:	e7ec      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x2a>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a0:	0162      	lsls	r2, r4, #5
 80020a2:	1b12      	subs	r2, r2, r4
 80020a4:	0193      	lsls	r3, r2, #6
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	191b      	adds	r3, r3, r4
 80020ac:	0218      	lsls	r0, r3, #8
 80020ae:	e7e4      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x2a>
 80020b0:	080038c4 	.word	0x080038c4
 80020b4:	080038d8 	.word	0x080038d8
 80020b8:	40021000 	.word	0x40021000
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_RCC_ClockConfig>:
{
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	46ce      	mov	lr, r9
 80020c4:	4647      	mov	r7, r8
 80020c6:	b580      	push	{r7, lr}
 80020c8:	0004      	movs	r4, r0
 80020ca:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x12>
 80020d0:	e082      	b.n	80021d8 <HAL_RCC_ClockConfig+0x118>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x120>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2301      	movs	r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	428b      	cmp	r3, r1
 80020dc:	d20a      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4940      	ldr	r1, [pc, #256]	; (80021e0 <HAL_RCC_ClockConfig+0x120>)
 80020e0:	680b      	ldr	r3, [r1, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4393      	bics	r3, r2
 80020e6:	432b      	orrs	r3, r5
 80020e8:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	680b      	ldr	r3, [r1, #0]
 80020ec:	401a      	ands	r2, r3
      return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f0:	42aa      	cmp	r2, r5
 80020f2:	d16d      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	079a      	lsls	r2, r3, #30
 80020f8:	d50e      	bpl.n	8002118 <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	075b      	lsls	r3, r3, #29
 80020fc:	d505      	bpl.n	800210a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020fe:	4a39      	ldr	r2, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 8002100:	6851      	ldr	r1, [r2, #4]
 8002102:	23e0      	movs	r3, #224	; 0xe0
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	430b      	orrs	r3, r1
 8002108:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210a:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 800210c:	6853      	ldr	r3, [r2, #4]
 800210e:	21f0      	movs	r1, #240	; 0xf0
 8002110:	438b      	bics	r3, r1
 8002112:	68a1      	ldr	r1, [r4, #8]
 8002114:	430b      	orrs	r3, r1
 8002116:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	07db      	lsls	r3, r3, #31
 800211c:	d530      	bpl.n	8002180 <HAL_RCC_ClockConfig+0xc0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	2a01      	cmp	r2, #1
 8002122:	d021      	beq.n	8002168 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002124:	2a02      	cmp	r2, #2
 8002126:	d025      	beq.n	8002174 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	079b      	lsls	r3, r3, #30
 800212e:	d555      	bpl.n	80021dc <HAL_RCC_ClockConfig+0x11c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002130:	492c      	ldr	r1, [pc, #176]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 8002132:	684b      	ldr	r3, [r1, #4]
 8002134:	2003      	movs	r0, #3
 8002136:	4383      	bics	r3, r0
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800213c:	f7ff fab4 	bl	80016a8 <HAL_GetTick>
 8002140:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 8002144:	4698      	mov	r8, r3
 8002146:	270c      	movs	r7, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_ClockConfig+0x128>)
 800214a:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	4643      	mov	r3, r8
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	403a      	ands	r2, r7
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	429a      	cmp	r2, r3
 8002158:	d012      	beq.n	8002180 <HAL_RCC_ClockConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7ff faa5 	bl	80016a8 <HAL_GetTick>
 800215e:	1b80      	subs	r0, r0, r6
 8002160:	4548      	cmp	r0, r9
 8002162:	d9f3      	bls.n	800214c <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8002164:	2003      	movs	r0, #3
 8002166:	e033      	b.n	80021d0 <HAL_RCC_ClockConfig+0x110>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	039b      	lsls	r3, r3, #14
 800216e:	d4df      	bmi.n	8002130 <HAL_RCC_ClockConfig+0x70>
        return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e02d      	b.n	80021d0 <HAL_RCC_ClockConfig+0x110>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	d4d9      	bmi.n	8002130 <HAL_RCC_ClockConfig+0x70>
        return HAL_ERROR;
 800217c:	2001      	movs	r0, #1
 800217e:	e027      	b.n	80021d0 <HAL_RCC_ClockConfig+0x110>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x120>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	4013      	ands	r3, r2
 8002188:	42ab      	cmp	r3, r5
 800218a:	d908      	bls.n	800219e <HAL_RCC_ClockConfig+0xde>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_RCC_ClockConfig+0x120>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	438a      	bics	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	681b      	ldr	r3, [r3, #0]
      return HAL_ERROR;
 8002198:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4219      	tst	r1, r3
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	075b      	lsls	r3, r3, #29
 80021a2:	d506      	bpl.n	80021b2 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 80021a6:	6853      	ldr	r3, [r2, #4]
 80021a8:	4910      	ldr	r1, [pc, #64]	; (80021ec <HAL_RCC_ClockConfig+0x12c>)
 80021aa:	400b      	ands	r3, r1
 80021ac:	68e1      	ldr	r1, [r4, #12]
 80021ae:	430b      	orrs	r3, r1
 80021b0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b2:	f7ff ff4d 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <HAL_RCC_ClockConfig+0x130>)
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_RCC_ClockConfig+0x134>)
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	0f1b      	lsrs	r3, r3, #28
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	40d8      	lsrs	r0, r3
 80021c6:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f7ff fa2b 	bl	8001624 <HAL_InitTick>
  return HAL_OK;
 80021ce:	2000      	movs	r0, #0
}
 80021d0:	bcc0      	pop	{r6, r7}
 80021d2:	46b9      	mov	r9, r7
 80021d4:	46b0      	mov	r8, r6
 80021d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
 80021da:	e7f9      	b.n	80021d0 <HAL_RCC_ClockConfig+0x110>
        return HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
 80021de:	e7f7      	b.n	80021d0 <HAL_RCC_ClockConfig+0x110>
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	00001388 	.word	0x00001388
 80021ec:	fffff8ff 	.word	0xfffff8ff
 80021f0:	20000004 	.word	0x20000004
 80021f4:	080038ac 	.word	0x080038ac

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_GetPCLK1Freq+0x14>)
 80021fa:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021fe:	4905      	ldr	r1, [pc, #20]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002200:	055b      	lsls	r3, r3, #21
 8002202:	0f5b      	lsrs	r3, r3, #29
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	6810      	ldr	r0, [r2, #0]
 8002208:	40d8      	lsrs	r0, r3
}    
 800220a:	4770      	bx	lr
 800220c:	40021000 	.word	0x40021000
 8002210:	20000004 	.word	0x20000004
 8002214:	080038bc 	.word	0x080038bc

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	46ce      	mov	lr, r9
 800221c:	4647      	mov	r7, r8
 800221e:	b580      	push	{r7, lr}
 8002220:	b083      	sub	sp, #12
 8002222:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002224:	6803      	ldr	r3, [r0, #0]
 8002226:	03db      	lsls	r3, r3, #15
 8002228:	d53a      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800222c:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	d40a      	bmi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0549      	lsls	r1, r1, #21
 800223c:	430a      	orrs	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	400b      	ands	r3, r1
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002248:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	05db      	lsls	r3, r3, #23
 8002250:	d540      	bpl.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	0011      	movs	r1, r2
 800225c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800225e:	421a      	tst	r2, r3
 8002260:	d015      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	22c0      	movs	r2, #192	; 0xc0
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	428b      	cmp	r3, r1
 800226c:	d00f      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4932      	ldr	r1, [pc, #200]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002274:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002276:	6a1e      	ldr	r6, [r3, #32]
 8002278:	2080      	movs	r0, #128	; 0x80
 800227a:	0240      	lsls	r0, r0, #9
 800227c:	4330      	orrs	r0, r6
 800227e:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002280:	6a18      	ldr	r0, [r3, #32]
 8002282:	4e2f      	ldr	r6, [pc, #188]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002284:	4030      	ands	r0, r6
 8002286:	6218      	str	r0, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002288:	6219      	str	r1, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800228a:	07d2      	lsls	r2, r2, #31
 800228c:	d43a      	bmi.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002290:	6a13      	ldr	r3, [r2, #32]
 8002292:	492a      	ldr	r1, [pc, #168]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002294:	400b      	ands	r3, r1
 8002296:	6861      	ldr	r1, [r4, #4]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229c:	2d01      	cmp	r5, #1
 800229e:	d044      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	07db      	lsls	r3, r3, #31
 80022a4:	d506      	bpl.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a6:	4a23      	ldr	r2, [pc, #140]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80022a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022aa:	2103      	movs	r1, #3
 80022ac:	438b      	bics	r3, r1
 80022ae:	68a1      	ldr	r1, [r4, #8]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b4:	6823      	ldr	r3, [r4, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b8:	069b      	lsls	r3, r3, #26
 80022ba:	d506      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80022be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022c0:	2110      	movs	r1, #16
 80022c2:	438b      	bics	r3, r1
 80022c4:	68e1      	ldr	r1, [r4, #12]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80022ca:	b003      	add	sp, #12
 80022cc:	bcc0      	pop	{r6, r7}
 80022ce:	46b9      	mov	r9, r7
 80022d0:	46b0      	mov	r8, r6
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d4:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80022d6:	6811      	ldr	r1, [r2, #0]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	430b      	orrs	r3, r1
 80022de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022e0:	f7ff f9e2 	bl	80016a8 <HAL_GetTick>
 80022e4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80022e8:	4698      	mov	r8, r3
 80022ea:	2780      	movs	r7, #128	; 0x80
 80022ec:	007f      	lsls	r7, r7, #1
 80022ee:	4643      	mov	r3, r8
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	423b      	tst	r3, r7
 80022f4:	d1ad      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f6:	f7ff f9d7 	bl	80016a8 <HAL_GetTick>
 80022fa:	1b80      	subs	r0, r0, r6
 80022fc:	2864      	cmp	r0, #100	; 0x64
 80022fe:	d9f6      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
          return HAL_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	e7e2      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
        tickstart = HAL_GetTick();
 8002304:	f7ff f9d0 	bl	80016a8 <HAL_GetTick>
 8002308:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800230c:	4698      	mov	r8, r3
 800230e:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002312:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	4643      	mov	r3, r8
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	421f      	tst	r7, r3
 800231a:	d1b8      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff f9c4 	bl	80016a8 <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	4548      	cmp	r0, r9
 8002324:	d9f6      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xfc>
            return HAL_TIMEOUT;
 8002326:	2003      	movs	r0, #3
 8002328:	e7cf      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	69d3      	ldr	r3, [r2, #28]
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232e:	400b      	ands	r3, r1
 8002330:	61d3      	str	r3, [r2, #28]
 8002332:	e7b5      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	fffffcff 	.word	0xfffffcff
 8002340:	fffeffff 	.word	0xfffeffff
 8002344:	00001388 	.word	0x00001388
 8002348:	efffffff 	.word	0xefffffff

0800234c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800234c:	6802      	ldr	r2, [r0, #0]
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <UART_EndRxTransfer+0x20>)
 8002352:	400b      	ands	r3, r1
 8002354:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002356:	6802      	ldr	r2, [r0, #0]
 8002358:	6893      	ldr	r3, [r2, #8]
 800235a:	3123      	adds	r1, #35	; 0x23
 800235c:	31ff      	adds	r1, #255	; 0xff
 800235e:	438b      	bics	r3, r1
 8002360:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002362:	2320      	movs	r3, #32
 8002364:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	6603      	str	r3, [r0, #96]	; 0x60
}
 800236a:	4770      	bx	lr
 800236c:	fffffedf 	.word	0xfffffedf

08002370 <HAL_UART_Transmit_DMA>:
{
 8002370:	b510      	push	{r4, lr}
 8002372:	0004      	movs	r4, r0
 8002374:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002376:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8002378:	2a20      	cmp	r2, #32
 800237a:	d14b      	bne.n	8002414 <HAL_UART_Transmit_DMA+0xa4>
    if ((pData == NULL) || (Size == 0U))
 800237c:	2900      	cmp	r1, #0
 800237e:	d04b      	beq.n	8002418 <HAL_UART_Transmit_DMA+0xa8>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d04b      	beq.n	800241c <HAL_UART_Transmit_DMA+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	0152      	lsls	r2, r2, #5
 8002388:	6880      	ldr	r0, [r0, #8]
 800238a:	4290      	cmp	r0, r2
 800238c:	d02e      	beq.n	80023ec <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 800238e:	2270      	movs	r2, #112	; 0x70
 8002390:	5ca2      	ldrb	r2, [r4, r2]
 8002392:	2a01      	cmp	r2, #1
 8002394:	d044      	beq.n	8002420 <HAL_UART_Transmit_DMA+0xb0>
 8002396:	2270      	movs	r2, #112	; 0x70
 8002398:	2001      	movs	r0, #1
 800239a:	54a0      	strb	r0, [r4, r2]
    huart->pTxBuffPtr  = pData;
 800239c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800239e:	3a20      	subs	r2, #32
 80023a0:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80023a2:	3202      	adds	r2, #2
 80023a4:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	2200      	movs	r2, #0
 80023a8:	67e2      	str	r2, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	3221      	adds	r2, #33	; 0x21
 80023ac:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 80023ae:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d022      	beq.n	80023fa <HAL_UART_Transmit_DMA+0x8a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023b4:	491b      	ldr	r1, [pc, #108]	; (8002424 <HAL_UART_Transmit_DMA+0xb4>)
 80023b6:	6291      	str	r1, [r2, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80023b8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_UART_Transmit_DMA+0xb8>)
 80023bc:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80023be:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80023c0:	491a      	ldr	r1, [pc, #104]	; (800242c <HAL_UART_Transmit_DMA+0xbc>)
 80023c2:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferAbortCallback = NULL;
 80023c4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80023c6:	2100      	movs	r1, #0
 80023c8:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	3228      	adds	r2, #40	; 0x28
 80023ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023d0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80023d2:	f7ff fa1d 	bl	8001810 <HAL_DMA_Start_IT>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d00f      	beq.n	80023fa <HAL_UART_Transmit_DMA+0x8a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80023da:	2310      	movs	r3, #16
 80023dc:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	2200      	movs	r2, #0
 80023e2:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 80023e4:	3b50      	subs	r3, #80	; 0x50
 80023e6:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	e014      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ec:	6922      	ldr	r2, [r4, #16]
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d1cd      	bne.n	800238e <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80023f2:	07ca      	lsls	r2, r1, #31
 80023f4:	d5cb      	bpl.n	800238e <HAL_UART_Transmit_DMA+0x1e>
        return  HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
 80023f8:	e00d      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8002400:	2370      	movs	r3, #112	; 0x70
 8002402:	2200      	movs	r2, #0
 8002404:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	6893      	ldr	r3, [r2, #8]
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	430b      	orrs	r3, r1
 800240e:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8002410:	2000      	movs	r0, #0
 8002412:	e000      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
    return HAL_BUSY;
 8002414:	2002      	movs	r0, #2
}
 8002416:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e7fc      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
 800241c:	2001      	movs	r0, #1
 800241e:	e7fa      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
    __HAL_LOCK(huart);
 8002420:	2002      	movs	r0, #2
 8002422:	e7f8      	b.n	8002416 <HAL_UART_Transmit_DMA+0xa6>
 8002424:	080024fd 	.word	0x080024fd
 8002428:	0800252b 	.word	0x0800252b
 800242c:	08002587 	.word	0x08002587

08002430 <HAL_UART_Receive_DMA>:
{
 8002430:	b510      	push	{r4, lr}
 8002432:	0004      	movs	r4, r0
 8002434:	0013      	movs	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002436:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002438:	2a20      	cmp	r2, #32
 800243a:	d150      	bne.n	80024de <HAL_UART_Receive_DMA+0xae>
    if ((pData == NULL) || (Size == 0U))
 800243c:	2900      	cmp	r1, #0
 800243e:	d050      	beq.n	80024e2 <HAL_UART_Receive_DMA+0xb2>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d050      	beq.n	80024e6 <HAL_UART_Receive_DMA+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	0152      	lsls	r2, r2, #5
 8002448:	6880      	ldr	r0, [r0, #8]
 800244a:	4290      	cmp	r0, r2
 800244c:	d02c      	beq.n	80024a8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 800244e:	2270      	movs	r2, #112	; 0x70
 8002450:	5ca2      	ldrb	r2, [r4, r2]
 8002452:	2a01      	cmp	r2, #1
 8002454:	d049      	beq.n	80024ea <HAL_UART_Receive_DMA+0xba>
 8002456:	2270      	movs	r2, #112	; 0x70
 8002458:	2001      	movs	r0, #1
 800245a:	54a0      	strb	r0, [r4, r2]
    huart->pRxBuffPtr = pData;
 800245c:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 800245e:	3a18      	subs	r2, #24
 8002460:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	2200      	movs	r2, #0
 8002464:	67e2      	str	r2, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002466:	3222      	adds	r2, #34	; 0x22
 8002468:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800246a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800246c:	2a00      	cmp	r2, #0
 800246e:	d022      	beq.n	80024b6 <HAL_UART_Receive_DMA+0x86>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002470:	491f      	ldr	r1, [pc, #124]	; (80024f0 <HAL_UART_Receive_DMA+0xc0>)
 8002472:	6291      	str	r1, [r2, #40]	; 0x28
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002474:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002476:	491f      	ldr	r1, [pc, #124]	; (80024f4 <HAL_UART_Receive_DMA+0xc4>)
 8002478:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800247a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800247c:	491e      	ldr	r1, [pc, #120]	; (80024f8 <HAL_UART_Receive_DMA+0xc8>)
 800247e:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmarx->XferAbortCallback = NULL;
 8002480:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002482:	2100      	movs	r1, #0
 8002484:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002486:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002488:	6821      	ldr	r1, [r4, #0]
 800248a:	3124      	adds	r1, #36	; 0x24
 800248c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800248e:	f7ff f9bf 	bl	8001810 <HAL_DMA_Start_IT>
 8002492:	2800      	cmp	r0, #0
 8002494:	d00f      	beq.n	80024b6 <HAL_UART_Receive_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002496:	2310      	movs	r3, #16
 8002498:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800249a:	3360      	adds	r3, #96	; 0x60
 800249c:	2200      	movs	r2, #0
 800249e:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 80024a0:	3b50      	subs	r3, #80	; 0x50
 80024a2:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
 80024a6:	e01b      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a8:	6922      	ldr	r2, [r4, #16]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d1cf      	bne.n	800244e <HAL_UART_Receive_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80024ae:	07ca      	lsls	r2, r1, #31
 80024b0:	d5cd      	bpl.n	800244e <HAL_UART_Receive_DMA+0x1e>
        return  HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e014      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
    __HAL_UNLOCK(huart);
 80024b6:	2370      	movs	r3, #112	; 0x70
 80024b8:	2200      	movs	r2, #0
 80024ba:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024bc:	6822      	ldr	r2, [r4, #0]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	3390      	adds	r3, #144	; 0x90
 80024c2:	430b      	orrs	r3, r1
 80024c4:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	2101      	movs	r1, #1
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	6893      	ldr	r3, [r2, #8]
 80024d4:	313f      	adds	r1, #63	; 0x3f
 80024d6:	430b      	orrs	r3, r1
 80024d8:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80024da:	2000      	movs	r0, #0
 80024dc:	e000      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
    return HAL_BUSY;
 80024de:	2002      	movs	r0, #2
}
 80024e0:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
 80024e4:	e7fc      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
 80024e6:	2001      	movs	r0, #1
 80024e8:	e7fa      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
    __HAL_LOCK(huart);
 80024ea:	2002      	movs	r0, #2
 80024ec:	e7f8      	b.n	80024e0 <HAL_UART_Receive_DMA+0xb0>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	08002539 	.word	0x08002539
 80024f4:	0800257b 	.word	0x0800257b
 80024f8:	08002587 	.word	0x08002587

080024fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80024fc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024fe:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002500:	6982      	ldr	r2, [r0, #24]
 8002502:	2a20      	cmp	r2, #32
 8002504:	d00d      	beq.n	8002522 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8002506:	2252      	movs	r2, #82	; 0x52
 8002508:	2100      	movs	r1, #0
 800250a:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	688a      	ldr	r2, [r1, #8]
 8002510:	2080      	movs	r0, #128	; 0x80
 8002512:	4382      	bics	r2, r0
 8002514:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	6813      	ldr	r3, [r2, #0]
 800251a:	2140      	movs	r1, #64	; 0x40
 800251c:	430b      	orrs	r3, r1
 800251e:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002520:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002522:	0018      	movs	r0, r3
 8002524:	f7fd fe87 	bl	8000236 <HAL_UART_TxCpltCallback>
}
 8002528:	e7fa      	b.n	8002520 <UART_DMATransmitCplt+0x24>

0800252a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800252a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800252c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800252e:	f7fd fe81 	bl	8000234 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002532:	bd10      	pop	{r4, pc}

08002534 <HAL_UART_RxCpltCallback>:
}
 8002534:	4770      	bx	lr
	...

08002538 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002538:	b510      	push	{r4, lr}
 800253a:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800253c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b20      	cmp	r3, #32
 8002542:	d014      	beq.n	800256e <UART_DMAReceiveCplt+0x36>
  {
    huart->RxXferCount = 0U;
 8002544:	235a      	movs	r3, #90	; 0x5a
 8002546:	2200      	movs	r2, #0
 8002548:	52c2      	strh	r2, [r0, r3]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800254a:	6802      	ldr	r2, [r0, #0]
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	4909      	ldr	r1, [pc, #36]	; (8002574 <UART_DMAReceiveCplt+0x3c>)
 8002550:	400b      	ands	r3, r1
 8002552:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002554:	6802      	ldr	r2, [r0, #0]
 8002556:	6893      	ldr	r3, [r2, #8]
 8002558:	3103      	adds	r1, #3
 800255a:	31ff      	adds	r1, #255	; 0xff
 800255c:	438b      	bics	r3, r1
 800255e:	6093      	str	r3, [r2, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002560:	6802      	ldr	r2, [r0, #0]
 8002562:	6893      	ldr	r3, [r2, #8]
 8002564:	313f      	adds	r1, #63	; 0x3f
 8002566:	438b      	bics	r3, r1
 8002568:	6093      	str	r3, [r2, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800256a:	2320      	movs	r3, #32
 800256c:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800256e:	f7ff ffe1 	bl	8002534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002572:	bd10      	pop	{r4, pc}
 8002574:	fffffeff 	.word	0xfffffeff

08002578 <HAL_UART_RxHalfCpltCallback>:
}
 8002578:	4770      	bx	lr

0800257a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800257a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800257c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800257e:	f7ff fffb 	bl	8002578 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002582:	bd10      	pop	{r4, pc}

08002584 <HAL_UART_ErrorCallback>:
}
 8002584:	4770      	bx	lr

08002586 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002586:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002588:	6a44      	ldr	r4, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800258a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800258c:	6fa1      	ldr	r1, [r4, #120]	; 0x78

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6893      	ldr	r3, [r2, #8]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	d501      	bpl.n	800259a <UART_DMAError+0x14>
 8002596:	2821      	cmp	r0, #33	; 0x21
 8002598:	d00d      	beq.n	80025b6 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	065b      	lsls	r3, r3, #25
 80025a0:	d501      	bpl.n	80025a6 <UART_DMAError+0x20>
 80025a2:	2922      	cmp	r1, #34	; 0x22
 80025a4:	d011      	beq.n	80025ca <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80025a8:	2210      	movs	r2, #16
 80025aa:	4313      	orrs	r3, r2
 80025ac:	67e3      	str	r3, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025ae:	0020      	movs	r0, r4
 80025b0:	f7ff ffe8 	bl	8002584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025b4:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80025b6:	2352      	movs	r3, #82	; 0x52
 80025b8:	2000      	movs	r0, #0
 80025ba:	52e0      	strh	r0, [r4, r3]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	30c0      	adds	r0, #192	; 0xc0
 80025c0:	4383      	bics	r3, r0
 80025c2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80025c4:	2320      	movs	r3, #32
 80025c6:	6763      	str	r3, [r4, #116]	; 0x74
}
 80025c8:	e7e7      	b.n	800259a <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80025ca:	235a      	movs	r3, #90	; 0x5a
 80025cc:	2200      	movs	r2, #0
 80025ce:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80025d0:	0020      	movs	r0, r4
 80025d2:	f7ff febb 	bl	800234c <UART_EndRxTransfer>
 80025d6:	e7e6      	b.n	80025a6 <UART_DMAError+0x20>

080025d8 <HAL_UART_IRQHandler>:
{
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025dc:	6802      	ldr	r2, [r0, #0]
 80025de:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025e0:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025e2:	6896      	ldr	r6, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025e4:	4855      	ldr	r0, [pc, #340]	; (800273c <HAL_UART_IRQHandler+0x164>)
  if (errorflags == 0U)
 80025e6:	4203      	tst	r3, r0
 80025e8:	d109      	bne.n	80025fe <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80025ea:	0698      	lsls	r0, r3, #26
 80025ec:	d50e      	bpl.n	800260c <HAL_UART_IRQHandler+0x34>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025ee:	0688      	lsls	r0, r1, #26
 80025f0:	d50c      	bpl.n	800260c <HAL_UART_IRQHandler+0x34>
      if (huart->RxISR != NULL)
 80025f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_UART_IRQHandler+0x48>
        huart->RxISR(huart);
 80025f8:	0020      	movs	r0, r4
 80025fa:	4798      	blx	r3
 80025fc:	e010      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80025fe:	2501      	movs	r5, #1
 8002600:	4035      	ands	r5, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002602:	2090      	movs	r0, #144	; 0x90
 8002604:	0040      	lsls	r0, r0, #1
 8002606:	4008      	ands	r0, r1
 8002608:	4328      	orrs	r0, r5
 800260a:	d10a      	bne.n	8002622 <HAL_UART_IRQHandler+0x4a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800260c:	0618      	lsls	r0, r3, #24
 800260e:	d502      	bpl.n	8002616 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002610:	0608      	lsls	r0, r1, #24
 8002612:	d500      	bpl.n	8002616 <HAL_UART_IRQHandler+0x3e>
 8002614:	e07b      	b.n	800270e <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002616:	065b      	lsls	r3, r3, #25
 8002618:	d502      	bpl.n	8002620 <HAL_UART_IRQHandler+0x48>
 800261a:	0649      	lsls	r1, r1, #25
 800261c:	d500      	bpl.n	8002620 <HAL_UART_IRQHandler+0x48>
 800261e:	e07d      	b.n	800271c <HAL_UART_IRQHandler+0x144>
}
 8002620:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002622:	07d8      	lsls	r0, r3, #31
 8002624:	d506      	bpl.n	8002634 <HAL_UART_IRQHandler+0x5c>
 8002626:	05c8      	lsls	r0, r1, #23
 8002628:	d504      	bpl.n	8002634 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800262a:	2001      	movs	r0, #1
 800262c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800262e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002630:	4302      	orrs	r2, r0
 8002632:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002634:	079a      	lsls	r2, r3, #30
 8002636:	d557      	bpl.n	80026e8 <HAL_UART_IRQHandler+0x110>
 8002638:	2d00      	cmp	r5, #0
 800263a:	d00f      	beq.n	800265c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	2002      	movs	r0, #2
 8002640:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002642:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002644:	3002      	adds	r0, #2
 8002646:	4302      	orrs	r2, r0
 8002648:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800264a:	4218      	tst	r0, r3
 800264c:	d072      	beq.n	8002734 <HAL_UART_IRQHandler+0x15c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	2004      	movs	r0, #4
 8002652:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002654:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002656:	3802      	subs	r0, #2
 8002658:	4302      	orrs	r2, r0
 800265a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800265c:	071a      	lsls	r2, r3, #28
 800265e:	d509      	bpl.n	8002674 <HAL_UART_IRQHandler+0x9c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002660:	2220      	movs	r2, #32
 8002662:	400a      	ands	r2, r1
 8002664:	432a      	orrs	r2, r5
 8002666:	d005      	beq.n	8002674 <HAL_UART_IRQHandler+0x9c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	2008      	movs	r0, #8
 800266c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002670:	4302      	orrs	r2, r0
 8002672:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002674:	051a      	lsls	r2, r3, #20
 8002676:	d509      	bpl.n	800268c <HAL_UART_IRQHandler+0xb4>
 8002678:	014a      	lsls	r2, r1, #5
 800267a:	d507      	bpl.n	800268c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	2080      	movs	r0, #128	; 0x80
 8002680:	0100      	lsls	r0, r0, #4
 8002682:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002684:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002686:	2020      	movs	r0, #32
 8002688:	4302      	orrs	r2, r0
 800268a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800268e:	2a00      	cmp	r2, #0
 8002690:	d0c6      	beq.n	8002620 <HAL_UART_IRQHandler+0x48>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	d506      	bpl.n	80026a4 <HAL_UART_IRQHandler+0xcc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002696:	0689      	lsls	r1, r1, #26
 8002698:	d504      	bpl.n	80026a4 <HAL_UART_IRQHandler+0xcc>
        if (huart->RxISR != NULL)
 800269a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_IRQHandler+0xcc>
          huart->RxISR(huart);
 80026a0:	0020      	movs	r0, r4
 80026a2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80026a4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026ae:	2228      	movs	r2, #40	; 0x28
 80026b0:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026b2:	4313      	orrs	r3, r2
 80026b4:	d025      	beq.n	8002702 <HAL_UART_IRQHandler+0x12a>
        UART_EndRxTransfer(huart);
 80026b6:	0020      	movs	r0, r4
 80026b8:	f7ff fe48 	bl	800234c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	0652      	lsls	r2, r2, #25
 80026c2:	d51a      	bpl.n	80026fa <HAL_UART_IRQHandler+0x122>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	2140      	movs	r1, #64	; 0x40
 80026c8:	438a      	bics	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80026cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00f      	beq.n	80026f2 <HAL_UART_IRQHandler+0x11a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_UART_IRQHandler+0x168>)
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80026d8:	f7ff f8e3 	bl	80018a2 <HAL_DMA_Abort_IT>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d09f      	beq.n	8002620 <HAL_UART_IRQHandler+0x48>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026e0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80026e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026e4:	4798      	blx	r3
 80026e6:	e79b      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026e8:	075a      	lsls	r2, r3, #29
 80026ea:	d5b7      	bpl.n	800265c <HAL_UART_IRQHandler+0x84>
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	d0b5      	beq.n	800265c <HAL_UART_IRQHandler+0x84>
 80026f0:	e7ad      	b.n	800264e <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 80026f2:	0020      	movs	r0, r4
 80026f4:	f7ff ff46 	bl	8002584 <HAL_UART_ErrorCallback>
 80026f8:	e792      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
          HAL_UART_ErrorCallback(huart);
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7ff ff42 	bl	8002584 <HAL_UART_ErrorCallback>
 8002700:	e78e      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
        HAL_UART_ErrorCallback(huart);
 8002702:	0020      	movs	r0, r4
 8002704:	f7ff ff3e 	bl	8002584 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	2300      	movs	r3, #0
 800270a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800270c:	e788      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
    if (huart->TxISR != NULL)
 800270e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002710:	2b00      	cmp	r3, #0
 8002712:	d100      	bne.n	8002716 <HAL_UART_IRQHandler+0x13e>
 8002714:	e784      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
      huart->TxISR(huart);
 8002716:	0020      	movs	r0, r4
 8002718:	4798      	blx	r3
 800271a:	e781      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	438b      	bics	r3, r1
 8002722:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
 8002726:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800272c:	0020      	movs	r0, r4
 800272e:	f7fd fd82 	bl	8000236 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002732:	e775      	b.n	8002620 <HAL_UART_IRQHandler+0x48>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002734:	071a      	lsls	r2, r3, #28
 8002736:	d497      	bmi.n	8002668 <HAL_UART_IRQHandler+0x90>
 8002738:	e79c      	b.n	8002674 <HAL_UART_IRQHandler+0x9c>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	0000080f 	.word	0x0000080f
 8002740:	08002745 	.word	0x08002745

08002744 <UART_DMAAbortOnError>:
{
 8002744:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002746:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	225a      	movs	r2, #90	; 0x5a
 800274c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800274e:	3a08      	subs	r2, #8
 8002750:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8002752:	f7ff ff17 	bl	8002584 <HAL_UART_ErrorCallback>
}
 8002756:	bd10      	pop	{r4, pc}

08002758 <UART_SetConfig>:
{
 8002758:	b510      	push	{r4, lr}
 800275a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800275c:	6801      	ldr	r1, [r0, #0]
 800275e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002760:	6883      	ldr	r3, [r0, #8]
 8002762:	6900      	ldr	r0, [r0, #16]
 8002764:	4303      	orrs	r3, r0
 8002766:	6960      	ldr	r0, [r4, #20]
 8002768:	4303      	orrs	r3, r0
 800276a:	69e0      	ldr	r0, [r4, #28]
 800276c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800276e:	4862      	ldr	r0, [pc, #392]	; (80028f8 <UART_SetConfig+0x1a0>)
 8002770:	4002      	ands	r2, r0
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6853      	ldr	r3, [r2, #4]
 800277a:	4960      	ldr	r1, [pc, #384]	; (80028fc <UART_SetConfig+0x1a4>)
 800277c:	400b      	ands	r3, r1
 800277e:	68e1      	ldr	r1, [r4, #12]
 8002780:	430b      	orrs	r3, r1
 8002782:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002784:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002786:	6821      	ldr	r1, [r4, #0]
 8002788:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800278a:	6a20      	ldr	r0, [r4, #32]
 800278c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278e:	485c      	ldr	r0, [pc, #368]	; (8002900 <UART_SetConfig+0x1a8>)
 8002790:	4002      	ands	r2, r0
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <UART_SetConfig+0x1ac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d025      	beq.n	80027ea <UART_SetConfig+0x92>
 800279e:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <UART_SetConfig+0x1b0>)
 80027a0:	4694      	mov	ip, r2
 80027a2:	4463      	add	r3, ip
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	4193      	sbcs	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	0212      	lsls	r2, r2, #8
 80027ae:	69e1      	ldr	r1, [r4, #28]
 80027b0:	4291      	cmp	r1, r2
 80027b2:	d100      	bne.n	80027b6 <UART_SetConfig+0x5e>
 80027b4:	e082      	b.n	80028bc <UART_SetConfig+0x164>
      ret = HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
    switch (clocksource)
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d812      	bhi.n	80027e2 <UART_SetConfig+0x8a>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d147      	bne.n	8002850 <UART_SetConfig+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c0:	f7ff fd1a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027c4:	6861      	ldr	r1, [r4, #4]
 80027c6:	084b      	lsrs	r3, r1, #1
 80027c8:	1818      	adds	r0, r3, r0
 80027ca:	f7fd fca7 	bl	800011c <__udivsi3>
 80027ce:	0400      	lsls	r0, r0, #16
 80027d0:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d2:	4a4e      	ldr	r2, [pc, #312]	; (800290c <UART_SetConfig+0x1b4>)
 80027d4:	0003      	movs	r3, r0
 80027d6:	3b10      	subs	r3, #16
 80027d8:	4293      	cmp	r3, r2
 80027da:	d83b      	bhi.n	8002854 <UART_SetConfig+0xfc>
      huart->Instance->BRR = usartdiv;
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	60d8      	str	r0, [r3, #12]
 80027e0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80027e6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80027e8:	bd10      	pop	{r4, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <UART_SetConfig+0x1b8>)
 80027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ee:	2303      	movs	r3, #3
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d030      	beq.n	8002858 <UART_SetConfig+0x100>
 80027f6:	d846      	bhi.n	8002886 <UART_SetConfig+0x12e>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <UART_SetConfig+0xc6>
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13b      	bne.n	8002878 <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	69e2      	ldr	r2, [r4, #28]
 8002806:	429a      	cmp	r2, r3
 8002808:	d04c      	beq.n	80028a4 <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetSysClockFreq();
 800280a:	f7ff fc21 	bl	8002050 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800280e:	6861      	ldr	r1, [r4, #4]
 8002810:	084b      	lsrs	r3, r1, #1
 8002812:	1818      	adds	r0, r3, r0
 8002814:	f7fd fc82 	bl	800011c <__udivsi3>
 8002818:	0400      	lsls	r0, r0, #16
 800281a:	0c00      	lsrs	r0, r0, #16
        break;
 800281c:	e7d9      	b.n	80027d2 <UART_SetConfig+0x7a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281e:	2300      	movs	r3, #0
 8002820:	e7c3      	b.n	80027aa <UART_SetConfig+0x52>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002822:	6861      	ldr	r1, [r4, #4]
 8002824:	0848      	lsrs	r0, r1, #1
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <UART_SetConfig+0x1bc>)
 8002828:	469c      	mov	ip, r3
 800282a:	4460      	add	r0, ip
 800282c:	f7fd fc76 	bl	800011c <__udivsi3>
 8002830:	0400      	lsls	r0, r0, #16
 8002832:	0c00      	lsrs	r0, r0, #16
        break;
 8002834:	e050      	b.n	80028d8 <UART_SetConfig+0x180>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002836:	6861      	ldr	r1, [r4, #4]
 8002838:	0848      	lsrs	r0, r1, #1
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	469c      	mov	ip, r3
 8002840:	4460      	add	r0, ip
 8002842:	f7fd fc6b 	bl	800011c <__udivsi3>
 8002846:	0400      	lsls	r0, r0, #16
 8002848:	0c00      	lsrs	r0, r0, #16
        break;
 800284a:	e045      	b.n	80028d8 <UART_SetConfig+0x180>
      ret = HAL_ERROR;
 800284c:	2001      	movs	r0, #1
 800284e:	e7c8      	b.n	80027e2 <UART_SetConfig+0x8a>
      ret = HAL_ERROR;
 8002850:	2001      	movs	r0, #1
 8002852:	e7c6      	b.n	80027e2 <UART_SetConfig+0x8a>
 8002854:	2001      	movs	r0, #1
 8002856:	e7c4      	b.n	80027e2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	69e2      	ldr	r2, [r4, #28]
 800285e:	429a      	cmp	r2, r3
 8002860:	d0e9      	beq.n	8002836 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002862:	6861      	ldr	r1, [r4, #4]
 8002864:	0848      	lsrs	r0, r1, #1
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	469c      	mov	ip, r3
 800286c:	4460      	add	r0, ip
 800286e:	f7fd fc55 	bl	800011c <__udivsi3>
 8002872:	0400      	lsls	r0, r0, #16
 8002874:	0c00      	lsrs	r0, r0, #16
        break;
 8002876:	e7ac      	b.n	80027d2 <UART_SetConfig+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	69e2      	ldr	r2, [r4, #28]
 800287e:	429a      	cmp	r2, r3
 8002880:	d01b      	beq.n	80028ba <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8002882:	2001      	movs	r0, #1
 8002884:	e7ad      	b.n	80027e2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	69e2      	ldr	r2, [r4, #28]
 800288c:	429a      	cmp	r2, r3
 800288e:	d0c8      	beq.n	8002822 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002890:	6861      	ldr	r1, [r4, #4]
 8002892:	0848      	lsrs	r0, r1, #1
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <UART_SetConfig+0x1c0>)
 8002896:	469c      	mov	ip, r3
 8002898:	4460      	add	r0, ip
 800289a:	f7fd fc3f 	bl	800011c <__udivsi3>
 800289e:	0400      	lsls	r0, r0, #16
 80028a0:	0c00      	lsrs	r0, r0, #16
        break;
 80028a2:	e796      	b.n	80027d2 <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 80028a4:	f7ff fbd4 	bl	8002050 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028a8:	6861      	ldr	r1, [r4, #4]
 80028aa:	0040      	lsls	r0, r0, #1
 80028ac:	084b      	lsrs	r3, r1, #1
 80028ae:	18c0      	adds	r0, r0, r3
 80028b0:	f7fd fc34 	bl	800011c <__udivsi3>
 80028b4:	0400      	lsls	r0, r0, #16
 80028b6:	0c00      	lsrs	r0, r0, #16
        break;
 80028b8:	e00e      	b.n	80028d8 <UART_SetConfig+0x180>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ba:	2310      	movs	r3, #16
      ret = HAL_ERROR;
 80028bc:	2001      	movs	r0, #1
    switch (clocksource)
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d000      	beq.n	80028c4 <UART_SetConfig+0x16c>
 80028c2:	e78e      	b.n	80027e2 <UART_SetConfig+0x8a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c4:	f7ff fc98 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028c8:	6861      	ldr	r1, [r4, #4]
 80028ca:	0040      	lsls	r0, r0, #1
 80028cc:	084b      	lsrs	r3, r1, #1
 80028ce:	18c0      	adds	r0, r0, r3
 80028d0:	f7fd fc24 	bl	800011c <__udivsi3>
 80028d4:	0400      	lsls	r0, r0, #16
 80028d6:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <UART_SetConfig+0x1b4>)
 80028da:	0003      	movs	r3, r0
 80028dc:	3b10      	subs	r3, #16
 80028de:	4293      	cmp	r3, r2
 80028e0:	d8b4      	bhi.n	800284c <UART_SetConfig+0xf4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028e2:	230f      	movs	r3, #15
 80028e4:	0002      	movs	r2, r0
 80028e6:	439a      	bics	r2, r3
 80028e8:	0013      	movs	r3, r2
      huart->Instance->BRR = brrtemp;
 80028ea:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ec:	0700      	lsls	r0, r0, #28
 80028ee:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80028f0:	4303      	orrs	r3, r0
 80028f2:	60d3      	str	r3, [r2, #12]
 80028f4:	2000      	movs	r0, #0
 80028f6:	e774      	b.n	80027e2 <UART_SetConfig+0x8a>
 80028f8:	ffff69f3 	.word	0xffff69f3
 80028fc:	ffffcfff 	.word	0xffffcfff
 8002900:	fffff4ff 	.word	0xfffff4ff
 8002904:	40013800 	.word	0x40013800
 8002908:	bfffbc00 	.word	0xbfffbc00
 800290c:	0000ffef 	.word	0x0000ffef
 8002910:	40021000 	.word	0x40021000
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800291c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800291e:	07db      	lsls	r3, r3, #31
 8002920:	d506      	bpl.n	8002930 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002922:	6802      	ldr	r2, [r0, #0]
 8002924:	6853      	ldr	r3, [r2, #4]
 8002926:	492c      	ldr	r1, [pc, #176]	; (80029d8 <UART_AdvFeatureConfig+0xbc>)
 8002928:	400b      	ands	r3, r1
 800292a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800292c:	430b      	orrs	r3, r1
 800292e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002932:	079b      	lsls	r3, r3, #30
 8002934:	d506      	bpl.n	8002944 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002936:	6802      	ldr	r2, [r0, #0]
 8002938:	6853      	ldr	r3, [r2, #4]
 800293a:	4928      	ldr	r1, [pc, #160]	; (80029dc <UART_AdvFeatureConfig+0xc0>)
 800293c:	400b      	ands	r3, r1
 800293e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002940:	430b      	orrs	r3, r1
 8002942:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002944:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002946:	075b      	lsls	r3, r3, #29
 8002948:	d506      	bpl.n	8002958 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800294a:	6802      	ldr	r2, [r0, #0]
 800294c:	6853      	ldr	r3, [r2, #4]
 800294e:	4924      	ldr	r1, [pc, #144]	; (80029e0 <UART_AdvFeatureConfig+0xc4>)
 8002950:	400b      	ands	r3, r1
 8002952:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002954:	430b      	orrs	r3, r1
 8002956:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002958:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800295a:	071b      	lsls	r3, r3, #28
 800295c:	d506      	bpl.n	800296c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	6853      	ldr	r3, [r2, #4]
 8002962:	4920      	ldr	r1, [pc, #128]	; (80029e4 <UART_AdvFeatureConfig+0xc8>)
 8002964:	400b      	ands	r3, r1
 8002966:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002968:	430b      	orrs	r3, r1
 800296a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800296c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800296e:	06db      	lsls	r3, r3, #27
 8002970:	d506      	bpl.n	8002980 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	6893      	ldr	r3, [r2, #8]
 8002976:	491c      	ldr	r1, [pc, #112]	; (80029e8 <UART_AdvFeatureConfig+0xcc>)
 8002978:	400b      	ands	r3, r1
 800297a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800297c:	430b      	orrs	r3, r1
 800297e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002980:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002982:	069b      	lsls	r3, r3, #26
 8002984:	d506      	bpl.n	8002994 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002986:	6802      	ldr	r2, [r0, #0]
 8002988:	6893      	ldr	r3, [r2, #8]
 800298a:	4918      	ldr	r1, [pc, #96]	; (80029ec <UART_AdvFeatureConfig+0xd0>)
 800298c:	400b      	ands	r3, r1
 800298e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002994:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002996:	065b      	lsls	r3, r3, #25
 8002998:	d50b      	bpl.n	80029b2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800299a:	6802      	ldr	r2, [r0, #0]
 800299c:	6853      	ldr	r3, [r2, #4]
 800299e:	4914      	ldr	r1, [pc, #80]	; (80029f0 <UART_AdvFeatureConfig+0xd4>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	035b      	lsls	r3, r3, #13
 80029ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d00a      	beq.n	80029c8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	d506      	bpl.n	80029c6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	6853      	ldr	r3, [r2, #4]
 80029bc:	490d      	ldr	r1, [pc, #52]	; (80029f4 <UART_AdvFeatureConfig+0xd8>)
 80029be:	400b      	ands	r3, r1
 80029c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6053      	str	r3, [r2, #4]
}
 80029c6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029c8:	6802      	ldr	r2, [r0, #0]
 80029ca:	6853      	ldr	r3, [r2, #4]
 80029cc:	490a      	ldr	r1, [pc, #40]	; (80029f8 <UART_AdvFeatureConfig+0xdc>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80029d2:	430b      	orrs	r3, r1
 80029d4:	6053      	str	r3, [r2, #4]
 80029d6:	e7ec      	b.n	80029b2 <UART_AdvFeatureConfig+0x96>
 80029d8:	fffdffff 	.word	0xfffdffff
 80029dc:	fffeffff 	.word	0xfffeffff
 80029e0:	fffbffff 	.word	0xfffbffff
 80029e4:	ffff7fff 	.word	0xffff7fff
 80029e8:	ffffefff 	.word	0xffffefff
 80029ec:	ffffdfff 	.word	0xffffdfff
 80029f0:	ffefffff 	.word	0xffefffff
 80029f4:	fff7ffff 	.word	0xfff7ffff
 80029f8:	ff9fffff 	.word	0xff9fffff

080029fc <UART_WaitOnFlagUntilTimeout>:
{
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	46de      	mov	lr, fp
 8002a00:	4657      	mov	r7, sl
 8002a02:	464e      	mov	r6, r9
 8002a04:	4645      	mov	r5, r8
 8002a06:	b5e0      	push	{r5, r6, r7, lr}
 8002a08:	4680      	mov	r8, r0
 8002a0a:	000d      	movs	r5, r1
 8002a0c:	0016      	movs	r6, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a12:	2304      	movs	r3, #4
 8002a14:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69dc      	ldr	r4, [r3, #28]
 8002a22:	402c      	ands	r4, r5
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	4262      	negs	r2, r4
 8002a28:	4154      	adcs	r4, r2
 8002a2a:	42b4      	cmp	r4, r6
 8002a2c:	d145      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0xbe>
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	1c7a      	adds	r2, r7, #1
 8002a30:	d0f6      	beq.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe fe39 	bl	80016a8 <HAL_GetTick>
 8002a36:	464b      	mov	r3, r9
 8002a38:	1ac0      	subs	r0, r0, r3
 8002a3a:	42b8      	cmp	r0, r7
 8002a3c:	d826      	bhi.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x90>
 8002a3e:	2f00      	cmp	r7, #0
 8002a40:	d024      	beq.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a42:	4643      	mov	r3, r8
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4651      	mov	r1, sl
 8002a4a:	4211      	tst	r1, r2
 8002a4c:	d0e6      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	4659      	mov	r1, fp
 8002a52:	420a      	tst	r2, r1
 8002a54:	d0e2      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	4919      	ldr	r1, [pc, #100]	; (8002ac8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	4643      	mov	r3, r8
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	6893      	ldr	r3, [r2, #8]
 8002a6e:	31a3      	adds	r1, #163	; 0xa3
 8002a70:	31ff      	adds	r1, #255	; 0xff
 8002a72:	438b      	bics	r3, r1
 8002a74:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002a76:	2320      	movs	r3, #32
 8002a78:	4642      	mov	r2, r8
 8002a7a:	6753      	str	r3, [r2, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	6793      	str	r3, [r2, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a7e:	67d3      	str	r3, [r2, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002a80:	3350      	adds	r3, #80	; 0x50
 8002a82:	2200      	movs	r2, #0
 8002a84:	4641      	mov	r1, r8
 8002a86:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8002a88:	2003      	movs	r0, #3
 8002a8a:	e017      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0xc0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	490d      	ldr	r1, [pc, #52]	; (8002ac8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8002a94:	400b      	ands	r3, r1
 8002a96:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	4643      	mov	r3, r8
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	6893      	ldr	r3, [r2, #8]
 8002a9e:	31a3      	adds	r1, #163	; 0xa3
 8002aa0:	31ff      	adds	r1, #255	; 0xff
 8002aa2:	438b      	bics	r3, r1
 8002aa4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	6753      	str	r3, [r2, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002aac:	6793      	str	r3, [r2, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	e000      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0xc0>
  return HAL_OK;
 8002aba:	2000      	movs	r0, #0
}
 8002abc:	bcf0      	pop	{r4, r5, r6, r7}
 8002abe:	46bb      	mov	fp, r7
 8002ac0:	46b2      	mov	sl, r6
 8002ac2:	46a9      	mov	r9, r5
 8002ac4:	46a0      	mov	r8, r4
 8002ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac8:	fffffe5f 	.word	0xfffffe5f

08002acc <HAL_UART_Transmit>:
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	46ce      	mov	lr, r9
 8002ad0:	4647      	mov	r7, r8
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	0004      	movs	r4, r0
 8002ad8:	000d      	movs	r5, r1
 8002ada:	0016      	movs	r6, r2
 8002adc:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002ade:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d165      	bne.n	8002bb0 <HAL_UART_Transmit+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d069      	beq.n	8002bbc <HAL_UART_Transmit+0xf0>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d069      	beq.n	8002bc0 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	015b      	lsls	r3, r3, #5
 8002af0:	6882      	ldr	r2, [r0, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d01f      	beq.n	8002b36 <HAL_UART_Transmit+0x6a>
    __HAL_LOCK(huart);
 8002af6:	2370      	movs	r3, #112	; 0x70
 8002af8:	5ce3      	ldrb	r3, [r4, r3]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d062      	beq.n	8002bc4 <HAL_UART_Transmit+0xf8>
 8002afe:	2370      	movs	r3, #112	; 0x70
 8002b00:	2201      	movs	r2, #1
 8002b02:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b08:	3321      	adds	r3, #33	; 0x21
 8002b0a:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fdcc 	bl	80016a8 <HAL_GetTick>
 8002b10:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8002b12:	2350      	movs	r3, #80	; 0x50
 8002b14:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8002b16:	3302      	adds	r3, #2
 8002b18:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	015b      	lsls	r3, r3, #5
 8002b1e:	68a2      	ldr	r2, [r4, #8]
      pdata16bits = NULL;
 8002b20:	2100      	movs	r1, #0
 8002b22:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d00d      	beq.n	8002b44 <HAL_UART_Transmit+0x78>
    while (huart->TxXferCount > 0U)
 8002b28:	2352      	movs	r3, #82	; 0x52
 8002b2a:	5ae3      	ldrh	r3, [r4, r3]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d02f      	beq.n	8002b92 <HAL_UART_Transmit+0xc6>
      huart->TxXferCount--;
 8002b32:	2652      	movs	r6, #82	; 0x52
 8002b34:	e01d      	b.n	8002b72 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b36:	6903      	ldr	r3, [r0, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1dc      	bne.n	8002af6 <HAL_UART_Transmit+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b3c:	07cb      	lsls	r3, r1, #31
 8002b3e:	d5da      	bpl.n	8002af6 <HAL_UART_Transmit+0x2a>
        return  HAL_ERROR;
 8002b40:	2001      	movs	r0, #1
 8002b42:	e036      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b44:	6923      	ldr	r3, [r4, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ee      	bne.n	8002b28 <HAL_UART_Transmit+0x5c>
      pdata16bits = (uint16_t *) pData;
 8002b4a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	e7eb      	b.n	8002b28 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	464b      	mov	r3, r9
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	05db      	lsls	r3, r3, #23
 8002b58:	0ddb      	lsrs	r3, r3, #23
 8002b5a:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	469c      	mov	ip, r3
 8002b60:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8002b62:	5ba2      	ldrh	r2, [r4, r6]
 8002b64:	3a01      	subs	r2, #1
 8002b66:	b292      	uxth	r2, r2
 8002b68:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 8002b6a:	5ba3      	ldrh	r3, [r4, r6]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00f      	beq.n	8002b92 <HAL_UART_Transmit+0xc6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b72:	9700      	str	r7, [sp, #0]
 8002b74:	4643      	mov	r3, r8
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0020      	movs	r0, r4
 8002b7c:	f7ff ff3e 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d121      	bne.n	8002bc8 <HAL_UART_Transmit+0xfc>
      if (pdata8bits == NULL)
 8002b84:	2d00      	cmp	r5, #0
 8002b86:	d0e3      	beq.n	8002b50 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	782a      	ldrb	r2, [r5, #0]
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b8e:	3501      	adds	r5, #1
 8002b90:	e7e7      	b.n	8002b62 <HAL_UART_Transmit+0x96>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b92:	9700      	str	r7, [sp, #0]
 8002b94:	4643      	mov	r3, r8
 8002b96:	2200      	movs	r2, #0
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	f7ff ff2e 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d113      	bne.n	8002bcc <HAL_UART_Transmit+0x100>
    huart->gState = HAL_UART_STATE_READY;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8002ba8:	3350      	adds	r3, #80	; 0x50
 8002baa:	2200      	movs	r2, #0
 8002bac:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
    return HAL_BUSY;
 8002bb0:	2002      	movs	r0, #2
}
 8002bb2:	b003      	add	sp, #12
 8002bb4:	bcc0      	pop	{r6, r7}
 8002bb6:	46b9      	mov	r9, r7
 8002bb8:	46b0      	mov	r8, r6
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	e7f8      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e7f6      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
    __HAL_LOCK(huart);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	e7f4      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
        return HAL_TIMEOUT;
 8002bc8:	2003      	movs	r0, #3
 8002bca:	e7f2      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>
      return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e7f0      	b.n	8002bb2 <HAL_UART_Transmit+0xe6>

08002bd0 <UART_CheckIdleState>:
{
 8002bd0:	b530      	push	{r4, r5, lr}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002bda:	f7fe fd65 	bl	80016a8 <HAL_GetTick>
 8002bde:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	d40c      	bmi.n	8002c02 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	075b      	lsls	r3, r3, #29
 8002bee:	d415      	bmi.n	8002c1c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002bf6:	3350      	adds	r3, #80	; 0x50
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
}
 8002bfe:	b003      	add	sp, #12
 8002c00:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <UART_CheckIdleState+0x68>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	0003      	movs	r3, r0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	0389      	lsls	r1, r1, #14
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f7ff fef4 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d0e7      	beq.n	8002be8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002c18:	2003      	movs	r0, #3
 8002c1a:	e7f0      	b.n	8002bfe <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <UART_CheckIdleState+0x68>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	002b      	movs	r3, r5
 8002c24:	2200      	movs	r2, #0
 8002c26:	03c9      	lsls	r1, r1, #15
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7ff fee7 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d0de      	beq.n	8002bf0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8002c32:	2003      	movs	r0, #3
 8002c34:	e7e3      	b.n	8002bfe <UART_CheckIdleState+0x2e>
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	01ffffff 	.word	0x01ffffff

08002c3c <HAL_UART_Init>:
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002c40:	d02e      	beq.n	8002ca0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d021      	beq.n	8002c8c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	2324      	movs	r3, #36	; 0x24
 8002c4a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	438b      	bics	r3, r1
 8002c54:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c56:	0020      	movs	r0, r4
 8002c58:	f7ff fd7e 	bl	8002758 <UART_SetConfig>
 8002c5c:	2801      	cmp	r0, #1
 8002c5e:	d014      	beq.n	8002c8a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	6853      	ldr	r3, [r2, #4]
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_UART_Init+0x68>)
 8002c6c:	400b      	ands	r3, r1
 8002c6e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	6893      	ldr	r3, [r2, #8]
 8002c74:	2108      	movs	r1, #8
 8002c76:	438b      	bics	r3, r1
 8002c78:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	3907      	subs	r1, #7
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002c84:	0020      	movs	r0, r4
 8002c86:	f7ff ffa3 	bl	8002bd0 <UART_CheckIdleState>
}
 8002c8a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c8c:	3370      	adds	r3, #112	; 0x70
 8002c8e:	2200      	movs	r2, #0
 8002c90:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002c92:	f7fe fb6f 	bl	8001374 <HAL_UART_MspInit>
 8002c96:	e7d7      	b.n	8002c48 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002c98:	0020      	movs	r0, r4
 8002c9a:	f7ff fe3f 	bl	800291c <UART_AdvFeatureConfig>
 8002c9e:	e7e2      	b.n	8002c66 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e7f2      	b.n	8002c8a <HAL_UART_Init+0x4e>
 8002ca4:	fffff7ff 	.word	0xfffff7ff

08002ca8 <_ZdlPvj>:
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	f000 f801 	bl	8002cb0 <_ZdlPv>
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <_ZdlPv>:
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	f000 f801 	bl	8002cb8 <free>
 8002cb6:	bd10      	pop	{r4, pc}

08002cb8 <free>:
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <free+0x10>)
 8002cbc:	0001      	movs	r1, r0
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f000 f93e 	bl	8002f40 <_free_r>
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	2000005c 	.word	0x2000005c

08002ccc <sbrk_aligned>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4e0f      	ldr	r6, [pc, #60]	; (8002d0c <sbrk_aligned+0x40>)
 8002cd0:	000d      	movs	r5, r1
 8002cd2:	6831      	ldr	r1, [r6, #0]
 8002cd4:	0004      	movs	r4, r0
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	d102      	bne.n	8002ce0 <sbrk_aligned+0x14>
 8002cda:	f000 f8e9 	bl	8002eb0 <_sbrk_r>
 8002cde:	6030      	str	r0, [r6, #0]
 8002ce0:	0029      	movs	r1, r5
 8002ce2:	0020      	movs	r0, r4
 8002ce4:	f000 f8e4 	bl	8002eb0 <_sbrk_r>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d00a      	beq.n	8002d02 <sbrk_aligned+0x36>
 8002cec:	2303      	movs	r3, #3
 8002cee:	1cc5      	adds	r5, r0, #3
 8002cf0:	439d      	bics	r5, r3
 8002cf2:	42a8      	cmp	r0, r5
 8002cf4:	d007      	beq.n	8002d06 <sbrk_aligned+0x3a>
 8002cf6:	1a29      	subs	r1, r5, r0
 8002cf8:	0020      	movs	r0, r4
 8002cfa:	f000 f8d9 	bl	8002eb0 <_sbrk_r>
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d101      	bne.n	8002d06 <sbrk_aligned+0x3a>
 8002d02:	2501      	movs	r5, #1
 8002d04:	426d      	negs	r5, r5
 8002d06:	0028      	movs	r0, r5
 8002d08:	bd70      	pop	{r4, r5, r6, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	20000b48 	.word	0x20000b48

08002d10 <_malloc_r>:
 8002d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d12:	2203      	movs	r2, #3
 8002d14:	1ccb      	adds	r3, r1, #3
 8002d16:	4393      	bics	r3, r2
 8002d18:	3308      	adds	r3, #8
 8002d1a:	0006      	movs	r6, r0
 8002d1c:	001f      	movs	r7, r3
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d238      	bcs.n	8002d94 <_malloc_r+0x84>
 8002d22:	270c      	movs	r7, #12
 8002d24:	42b9      	cmp	r1, r7
 8002d26:	d837      	bhi.n	8002d98 <_malloc_r+0x88>
 8002d28:	0030      	movs	r0, r6
 8002d2a:	f000 f873 	bl	8002e14 <__malloc_lock>
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <_malloc_r+0x100>)
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	001c      	movs	r4, r3
 8002d36:	2c00      	cmp	r4, #0
 8002d38:	d133      	bne.n	8002da2 <_malloc_r+0x92>
 8002d3a:	0039      	movs	r1, r7
 8002d3c:	0030      	movs	r0, r6
 8002d3e:	f7ff ffc5 	bl	8002ccc <sbrk_aligned>
 8002d42:	0004      	movs	r4, r0
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d15e      	bne.n	8002e06 <_malloc_r+0xf6>
 8002d48:	9b00      	ldr	r3, [sp, #0]
 8002d4a:	681c      	ldr	r4, [r3, #0]
 8002d4c:	0025      	movs	r5, r4
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d14e      	bne.n	8002df0 <_malloc_r+0xe0>
 8002d52:	2c00      	cmp	r4, #0
 8002d54:	d051      	beq.n	8002dfa <_malloc_r+0xea>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	0029      	movs	r1, r5
 8002d5a:	18e3      	adds	r3, r4, r3
 8002d5c:	0030      	movs	r0, r6
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	f000 f8a6 	bl	8002eb0 <_sbrk_r>
 8002d64:	9b01      	ldr	r3, [sp, #4]
 8002d66:	4283      	cmp	r3, r0
 8002d68:	d147      	bne.n	8002dfa <_malloc_r+0xea>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	0030      	movs	r0, r6
 8002d6e:	1aff      	subs	r7, r7, r3
 8002d70:	0039      	movs	r1, r7
 8002d72:	f7ff ffab 	bl	8002ccc <sbrk_aligned>
 8002d76:	3001      	adds	r0, #1
 8002d78:	d03f      	beq.n	8002dfa <_malloc_r+0xea>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	19db      	adds	r3, r3, r7
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	9b00      	ldr	r3, [sp, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d040      	beq.n	8002e0a <_malloc_r+0xfa>
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	42a2      	cmp	r2, r4
 8002d8c:	d133      	bne.n	8002df6 <_malloc_r+0xe6>
 8002d8e:	2200      	movs	r2, #0
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e014      	b.n	8002dbe <_malloc_r+0xae>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dac5      	bge.n	8002d24 <_malloc_r+0x14>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	6033      	str	r3, [r6, #0]
 8002d9e:	0028      	movs	r0, r5
 8002da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002da2:	6821      	ldr	r1, [r4, #0]
 8002da4:	1bc9      	subs	r1, r1, r7
 8002da6:	d420      	bmi.n	8002dea <_malloc_r+0xda>
 8002da8:	290b      	cmp	r1, #11
 8002daa:	d918      	bls.n	8002dde <_malloc_r+0xce>
 8002dac:	19e2      	adds	r2, r4, r7
 8002dae:	6027      	str	r7, [r4, #0]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	d112      	bne.n	8002dda <_malloc_r+0xca>
 8002db4:	9b00      	ldr	r3, [sp, #0]
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	6863      	ldr	r3, [r4, #4]
 8002dba:	6011      	str	r1, [r2, #0]
 8002dbc:	6053      	str	r3, [r2, #4]
 8002dbe:	0030      	movs	r0, r6
 8002dc0:	0025      	movs	r5, r4
 8002dc2:	f000 f82f 	bl	8002e24 <__malloc_unlock>
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	350b      	adds	r5, #11
 8002dca:	1d23      	adds	r3, r4, #4
 8002dcc:	4395      	bics	r5, r2
 8002dce:	1aea      	subs	r2, r5, r3
 8002dd0:	429d      	cmp	r5, r3
 8002dd2:	d0e4      	beq.n	8002d9e <_malloc_r+0x8e>
 8002dd4:	1b5b      	subs	r3, r3, r5
 8002dd6:	50a3      	str	r3, [r4, r2]
 8002dd8:	e7e1      	b.n	8002d9e <_malloc_r+0x8e>
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	e7ec      	b.n	8002db8 <_malloc_r+0xa8>
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	d1d5      	bne.n	8002d90 <_malloc_r+0x80>
 8002de4:	9b00      	ldr	r3, [sp, #0]
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e7e9      	b.n	8002dbe <_malloc_r+0xae>
 8002dea:	0023      	movs	r3, r4
 8002dec:	6864      	ldr	r4, [r4, #4]
 8002dee:	e7a2      	b.n	8002d36 <_malloc_r+0x26>
 8002df0:	002c      	movs	r4, r5
 8002df2:	686d      	ldr	r5, [r5, #4]
 8002df4:	e7ab      	b.n	8002d4e <_malloc_r+0x3e>
 8002df6:	0013      	movs	r3, r2
 8002df8:	e7c4      	b.n	8002d84 <_malloc_r+0x74>
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	0030      	movs	r0, r6
 8002dfe:	6033      	str	r3, [r6, #0]
 8002e00:	f000 f810 	bl	8002e24 <__malloc_unlock>
 8002e04:	e7cb      	b.n	8002d9e <_malloc_r+0x8e>
 8002e06:	6027      	str	r7, [r4, #0]
 8002e08:	e7d9      	b.n	8002dbe <_malloc_r+0xae>
 8002e0a:	605b      	str	r3, [r3, #4]
 8002e0c:	deff      	udf	#255	; 0xff
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000b44 	.word	0x20000b44

08002e14 <__malloc_lock>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4802      	ldr	r0, [pc, #8]	; (8002e20 <__malloc_lock+0xc>)
 8002e18:	f000 f886 	bl	8002f28 <__retarget_lock_acquire_recursive>
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20000c88 	.word	0x20000c88

08002e24 <__malloc_unlock>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	4802      	ldr	r0, [pc, #8]	; (8002e30 <__malloc_unlock+0xc>)
 8002e28:	f000 f87f 	bl	8002f2a <__retarget_lock_release_recursive>
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20000c88 	.word	0x20000c88

08002e34 <siprintf>:
 8002e34:	b40e      	push	{r1, r2, r3}
 8002e36:	b500      	push	{lr}
 8002e38:	490b      	ldr	r1, [pc, #44]	; (8002e68 <siprintf+0x34>)
 8002e3a:	b09c      	sub	sp, #112	; 0x70
 8002e3c:	ab1d      	add	r3, sp, #116	; 0x74
 8002e3e:	9002      	str	r0, [sp, #8]
 8002e40:	9006      	str	r0, [sp, #24]
 8002e42:	9107      	str	r1, [sp, #28]
 8002e44:	9104      	str	r1, [sp, #16]
 8002e46:	4809      	ldr	r0, [pc, #36]	; (8002e6c <siprintf+0x38>)
 8002e48:	4909      	ldr	r1, [pc, #36]	; (8002e70 <siprintf+0x3c>)
 8002e4a:	cb04      	ldmia	r3!, {r2}
 8002e4c:	9105      	str	r1, [sp, #20]
 8002e4e:	6800      	ldr	r0, [r0, #0]
 8002e50:	a902      	add	r1, sp, #8
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	f000 f920 	bl	8003098 <_svfiprintf_r>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	b01c      	add	sp, #112	; 0x70
 8002e60:	bc08      	pop	{r3}
 8002e62:	b003      	add	sp, #12
 8002e64:	4718      	bx	r3
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	7fffffff 	.word	0x7fffffff
 8002e6c:	2000005c 	.word	0x2000005c
 8002e70:	ffff0208 	.word	0xffff0208

08002e74 <memset>:
 8002e74:	0003      	movs	r3, r0
 8002e76:	1882      	adds	r2, r0, r2
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <memset+0xa>
 8002e7c:	4770      	bx	lr
 8002e7e:	7019      	strb	r1, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	e7f9      	b.n	8002e78 <memset+0x4>

08002e84 <strstr>:
 8002e84:	780a      	ldrb	r2, [r1, #0]
 8002e86:	b530      	push	{r4, r5, lr}
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d10c      	bne.n	8002ea6 <strstr+0x22>
 8002e8c:	bd30      	pop	{r4, r5, pc}
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d108      	bne.n	8002ea4 <strstr+0x20>
 8002e92:	2301      	movs	r3, #1
 8002e94:	5ccc      	ldrb	r4, [r1, r3]
 8002e96:	2c00      	cmp	r4, #0
 8002e98:	d0f8      	beq.n	8002e8c <strstr+0x8>
 8002e9a:	5cc5      	ldrb	r5, [r0, r3]
 8002e9c:	42a5      	cmp	r5, r4
 8002e9e:	d101      	bne.n	8002ea4 <strstr+0x20>
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e7f7      	b.n	8002e94 <strstr+0x10>
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	7803      	ldrb	r3, [r0, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <strstr+0xa>
 8002eac:	0018      	movs	r0, r3
 8002eae:	e7ed      	b.n	8002e8c <strstr+0x8>

08002eb0 <_sbrk_r>:
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	b570      	push	{r4, r5, r6, lr}
 8002eb4:	4d06      	ldr	r5, [pc, #24]	; (8002ed0 <_sbrk_r+0x20>)
 8002eb6:	0004      	movs	r4, r0
 8002eb8:	0008      	movs	r0, r1
 8002eba:	602b      	str	r3, [r5, #0]
 8002ebc:	f7fe fb62 	bl	8001584 <_sbrk>
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	d103      	bne.n	8002ecc <_sbrk_r+0x1c>
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d000      	beq.n	8002ecc <_sbrk_r+0x1c>
 8002eca:	6023      	str	r3, [r4, #0]
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000c84 	.word	0x20000c84

08002ed4 <__errno>:
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <__errno+0x8>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	2000005c 	.word	0x2000005c

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	4c0c      	ldr	r4, [pc, #48]	; (8002f18 <__libc_init_array+0x38>)
 8002ee6:	4d0d      	ldr	r5, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	f000 fba7 	bl	8003644 <_init>
 8002ef6:	4c0a      	ldr	r4, [pc, #40]	; (8002f20 <__libc_init_array+0x40>)
 8002ef8:	4d0a      	ldr	r5, [pc, #40]	; (8002f24 <__libc_init_array+0x44>)
 8002efa:	1b64      	subs	r4, r4, r5
 8002efc:	10a4      	asrs	r4, r4, #2
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	00b3      	lsls	r3, r6, #2
 8002f06:	58eb      	ldr	r3, [r5, r3]
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	00b3      	lsls	r3, r6, #2
 8002f10:	58eb      	ldr	r3, [r5, r3]
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	0800391c 	.word	0x0800391c
 8002f1c:	0800391c 	.word	0x0800391c
 8002f20:	08003920 	.word	0x08003920
 8002f24:	0800391c 	.word	0x0800391c

08002f28 <__retarget_lock_acquire_recursive>:
 8002f28:	4770      	bx	lr

08002f2a <__retarget_lock_release_recursive>:
 8002f2a:	4770      	bx	lr

08002f2c <memcpy>:
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d100      	bne.n	8002f36 <memcpy+0xa>
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	5ccc      	ldrb	r4, [r1, r3]
 8002f38:	54c4      	strb	r4, [r0, r3]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	e7f8      	b.n	8002f30 <memcpy+0x4>
	...

08002f40 <_free_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	0005      	movs	r5, r0
 8002f44:	2900      	cmp	r1, #0
 8002f46:	d010      	beq.n	8002f6a <_free_r+0x2a>
 8002f48:	1f0c      	subs	r4, r1, #4
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da00      	bge.n	8002f52 <_free_r+0x12>
 8002f50:	18e4      	adds	r4, r4, r3
 8002f52:	0028      	movs	r0, r5
 8002f54:	f7ff ff5e 	bl	8002e14 <__malloc_lock>
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <_free_r+0x90>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <_free_r+0x2c>
 8002f60:	6063      	str	r3, [r4, #4]
 8002f62:	6014      	str	r4, [r2, #0]
 8002f64:	0028      	movs	r0, r5
 8002f66:	f7ff ff5d 	bl	8002e24 <__malloc_unlock>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	42a3      	cmp	r3, r4
 8002f6e:	d908      	bls.n	8002f82 <_free_r+0x42>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	d1f3      	bne.n	8002f60 <_free_r+0x20>
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	1809      	adds	r1, r1, r0
 8002f7e:	6021      	str	r1, [r4, #0]
 8002f80:	e7ee      	b.n	8002f60 <_free_r+0x20>
 8002f82:	001a      	movs	r2, r3
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <_free_r+0x4e>
 8002f8a:	42a3      	cmp	r3, r4
 8002f8c:	d9f9      	bls.n	8002f82 <_free_r+0x42>
 8002f8e:	6811      	ldr	r1, [r2, #0]
 8002f90:	1850      	adds	r0, r2, r1
 8002f92:	42a0      	cmp	r0, r4
 8002f94:	d10b      	bne.n	8002fae <_free_r+0x6e>
 8002f96:	6820      	ldr	r0, [r4, #0]
 8002f98:	1809      	adds	r1, r1, r0
 8002f9a:	1850      	adds	r0, r2, r1
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	4283      	cmp	r3, r0
 8002fa0:	d1e0      	bne.n	8002f64 <_free_r+0x24>
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	1841      	adds	r1, r0, r1
 8002fa8:	6011      	str	r1, [r2, #0]
 8002faa:	6053      	str	r3, [r2, #4]
 8002fac:	e7da      	b.n	8002f64 <_free_r+0x24>
 8002fae:	42a0      	cmp	r0, r4
 8002fb0:	d902      	bls.n	8002fb8 <_free_r+0x78>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	e7d5      	b.n	8002f64 <_free_r+0x24>
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	1821      	adds	r1, r4, r0
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d103      	bne.n	8002fc8 <_free_r+0x88>
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	1809      	adds	r1, r1, r0
 8002fc6:	6021      	str	r1, [r4, #0]
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	6054      	str	r4, [r2, #4]
 8002fcc:	e7ca      	b.n	8002f64 <_free_r+0x24>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000b44 	.word	0x20000b44

08002fd4 <__ssputs_r>:
 8002fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	9203      	str	r2, [sp, #12]
 8002fdc:	688e      	ldr	r6, [r1, #8]
 8002fde:	9a01      	ldr	r2, [sp, #4]
 8002fe0:	0007      	movs	r7, r0
 8002fe2:	000c      	movs	r4, r1
 8002fe4:	680b      	ldr	r3, [r1, #0]
 8002fe6:	4296      	cmp	r6, r2
 8002fe8:	d831      	bhi.n	800304e <__ssputs_r+0x7a>
 8002fea:	898a      	ldrh	r2, [r1, #12]
 8002fec:	2190      	movs	r1, #144	; 0x90
 8002fee:	00c9      	lsls	r1, r1, #3
 8002ff0:	420a      	tst	r2, r1
 8002ff2:	d029      	beq.n	8003048 <__ssputs_r+0x74>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	6921      	ldr	r1, [r4, #16]
 8002ff8:	1a5b      	subs	r3, r3, r1
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	6963      	ldr	r3, [r4, #20]
 8002ffe:	4343      	muls	r3, r0
 8003000:	0fdd      	lsrs	r5, r3, #31
 8003002:	18ed      	adds	r5, r5, r3
 8003004:	9b01      	ldr	r3, [sp, #4]
 8003006:	9802      	ldr	r0, [sp, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	181b      	adds	r3, r3, r0
 800300c:	106d      	asrs	r5, r5, #1
 800300e:	42ab      	cmp	r3, r5
 8003010:	d900      	bls.n	8003014 <__ssputs_r+0x40>
 8003012:	001d      	movs	r5, r3
 8003014:	0552      	lsls	r2, r2, #21
 8003016:	d529      	bpl.n	800306c <__ssputs_r+0x98>
 8003018:	0029      	movs	r1, r5
 800301a:	0038      	movs	r0, r7
 800301c:	f7ff fe78 	bl	8002d10 <_malloc_r>
 8003020:	1e06      	subs	r6, r0, #0
 8003022:	d02d      	beq.n	8003080 <__ssputs_r+0xac>
 8003024:	9a02      	ldr	r2, [sp, #8]
 8003026:	6921      	ldr	r1, [r4, #16]
 8003028:	f7ff ff80 	bl	8002f2c <memcpy>
 800302c:	89a2      	ldrh	r2, [r4, #12]
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <__ssputs_r+0xc0>)
 8003030:	401a      	ands	r2, r3
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	4313      	orrs	r3, r2
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	9b02      	ldr	r3, [sp, #8]
 800303a:	6126      	str	r6, [r4, #16]
 800303c:	18f6      	adds	r6, r6, r3
 800303e:	6026      	str	r6, [r4, #0]
 8003040:	6165      	str	r5, [r4, #20]
 8003042:	9e01      	ldr	r6, [sp, #4]
 8003044:	1aed      	subs	r5, r5, r3
 8003046:	60a5      	str	r5, [r4, #8]
 8003048:	9b01      	ldr	r3, [sp, #4]
 800304a:	429e      	cmp	r6, r3
 800304c:	d900      	bls.n	8003050 <__ssputs_r+0x7c>
 800304e:	9e01      	ldr	r6, [sp, #4]
 8003050:	0032      	movs	r2, r6
 8003052:	9903      	ldr	r1, [sp, #12]
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	f000 fa9f 	bl	8003598 <memmove>
 800305a:	2000      	movs	r0, #0
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	1b9b      	subs	r3, r3, r6
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	199b      	adds	r3, r3, r6
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	b005      	add	sp, #20
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306c:	002a      	movs	r2, r5
 800306e:	0038      	movs	r0, r7
 8003070:	f000 fab0 	bl	80035d4 <_realloc_r>
 8003074:	1e06      	subs	r6, r0, #0
 8003076:	d1df      	bne.n	8003038 <__ssputs_r+0x64>
 8003078:	0038      	movs	r0, r7
 800307a:	6921      	ldr	r1, [r4, #16]
 800307c:	f7ff ff60 	bl	8002f40 <_free_r>
 8003080:	230c      	movs	r3, #12
 8003082:	2001      	movs	r0, #1
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	89a2      	ldrh	r2, [r4, #12]
 8003088:	3334      	adds	r3, #52	; 0x34
 800308a:	4313      	orrs	r3, r2
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	4240      	negs	r0, r0
 8003090:	e7ea      	b.n	8003068 <__ssputs_r+0x94>
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	fffffb7f 	.word	0xfffffb7f

08003098 <_svfiprintf_r>:
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b0a1      	sub	sp, #132	; 0x84
 800309c:	9003      	str	r0, [sp, #12]
 800309e:	001d      	movs	r5, r3
 80030a0:	898b      	ldrh	r3, [r1, #12]
 80030a2:	000f      	movs	r7, r1
 80030a4:	0016      	movs	r6, r2
 80030a6:	061b      	lsls	r3, r3, #24
 80030a8:	d511      	bpl.n	80030ce <_svfiprintf_r+0x36>
 80030aa:	690b      	ldr	r3, [r1, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10e      	bne.n	80030ce <_svfiprintf_r+0x36>
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	f7ff fe2d 	bl	8002d10 <_malloc_r>
 80030b6:	6038      	str	r0, [r7, #0]
 80030b8:	6138      	str	r0, [r7, #16]
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d105      	bne.n	80030ca <_svfiprintf_r+0x32>
 80030be:	230c      	movs	r3, #12
 80030c0:	9a03      	ldr	r2, [sp, #12]
 80030c2:	3801      	subs	r0, #1
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	b021      	add	sp, #132	; 0x84
 80030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	2300      	movs	r3, #0
 80030d0:	ac08      	add	r4, sp, #32
 80030d2:	6163      	str	r3, [r4, #20]
 80030d4:	3320      	adds	r3, #32
 80030d6:	7663      	strb	r3, [r4, #25]
 80030d8:	3310      	adds	r3, #16
 80030da:	76a3      	strb	r3, [r4, #26]
 80030dc:	9507      	str	r5, [sp, #28]
 80030de:	0035      	movs	r5, r6
 80030e0:	782b      	ldrb	r3, [r5, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <_svfiprintf_r+0x52>
 80030e6:	2b25      	cmp	r3, #37	; 0x25
 80030e8:	d148      	bne.n	800317c <_svfiprintf_r+0xe4>
 80030ea:	1bab      	subs	r3, r5, r6
 80030ec:	9305      	str	r3, [sp, #20]
 80030ee:	42b5      	cmp	r5, r6
 80030f0:	d00b      	beq.n	800310a <_svfiprintf_r+0x72>
 80030f2:	0032      	movs	r2, r6
 80030f4:	0039      	movs	r1, r7
 80030f6:	9803      	ldr	r0, [sp, #12]
 80030f8:	f7ff ff6c 	bl	8002fd4 <__ssputs_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d100      	bne.n	8003102 <_svfiprintf_r+0x6a>
 8003100:	e0af      	b.n	8003262 <_svfiprintf_r+0x1ca>
 8003102:	6963      	ldr	r3, [r4, #20]
 8003104:	9a05      	ldr	r2, [sp, #20]
 8003106:	189b      	adds	r3, r3, r2
 8003108:	6163      	str	r3, [r4, #20]
 800310a:	782b      	ldrb	r3, [r5, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d100      	bne.n	8003112 <_svfiprintf_r+0x7a>
 8003110:	e0a7      	b.n	8003262 <_svfiprintf_r+0x1ca>
 8003112:	2201      	movs	r2, #1
 8003114:	2300      	movs	r3, #0
 8003116:	4252      	negs	r2, r2
 8003118:	6062      	str	r2, [r4, #4]
 800311a:	a904      	add	r1, sp, #16
 800311c:	3254      	adds	r2, #84	; 0x54
 800311e:	1852      	adds	r2, r2, r1
 8003120:	1c6e      	adds	r6, r5, #1
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	60e3      	str	r3, [r4, #12]
 8003126:	60a3      	str	r3, [r4, #8]
 8003128:	7013      	strb	r3, [r2, #0]
 800312a:	65a3      	str	r3, [r4, #88]	; 0x58
 800312c:	4b55      	ldr	r3, [pc, #340]	; (8003284 <_svfiprintf_r+0x1ec>)
 800312e:	2205      	movs	r2, #5
 8003130:	0018      	movs	r0, r3
 8003132:	7831      	ldrb	r1, [r6, #0]
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	f000 fa42 	bl	80035be <memchr>
 800313a:	1c75      	adds	r5, r6, #1
 800313c:	2800      	cmp	r0, #0
 800313e:	d11f      	bne.n	8003180 <_svfiprintf_r+0xe8>
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	06d3      	lsls	r3, r2, #27
 8003144:	d504      	bpl.n	8003150 <_svfiprintf_r+0xb8>
 8003146:	2353      	movs	r3, #83	; 0x53
 8003148:	a904      	add	r1, sp, #16
 800314a:	185b      	adds	r3, r3, r1
 800314c:	2120      	movs	r1, #32
 800314e:	7019      	strb	r1, [r3, #0]
 8003150:	0713      	lsls	r3, r2, #28
 8003152:	d504      	bpl.n	800315e <_svfiprintf_r+0xc6>
 8003154:	2353      	movs	r3, #83	; 0x53
 8003156:	a904      	add	r1, sp, #16
 8003158:	185b      	adds	r3, r3, r1
 800315a:	212b      	movs	r1, #43	; 0x2b
 800315c:	7019      	strb	r1, [r3, #0]
 800315e:	7833      	ldrb	r3, [r6, #0]
 8003160:	2b2a      	cmp	r3, #42	; 0x2a
 8003162:	d016      	beq.n	8003192 <_svfiprintf_r+0xfa>
 8003164:	0035      	movs	r5, r6
 8003166:	2100      	movs	r1, #0
 8003168:	200a      	movs	r0, #10
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	782a      	ldrb	r2, [r5, #0]
 800316e:	1c6e      	adds	r6, r5, #1
 8003170:	3a30      	subs	r2, #48	; 0x30
 8003172:	2a09      	cmp	r2, #9
 8003174:	d94e      	bls.n	8003214 <_svfiprintf_r+0x17c>
 8003176:	2900      	cmp	r1, #0
 8003178:	d111      	bne.n	800319e <_svfiprintf_r+0x106>
 800317a:	e017      	b.n	80031ac <_svfiprintf_r+0x114>
 800317c:	3501      	adds	r5, #1
 800317e:	e7af      	b.n	80030e0 <_svfiprintf_r+0x48>
 8003180:	9b05      	ldr	r3, [sp, #20]
 8003182:	6822      	ldr	r2, [r4, #0]
 8003184:	1ac0      	subs	r0, r0, r3
 8003186:	2301      	movs	r3, #1
 8003188:	4083      	lsls	r3, r0
 800318a:	4313      	orrs	r3, r2
 800318c:	002e      	movs	r6, r5
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	e7cc      	b.n	800312c <_svfiprintf_r+0x94>
 8003192:	9b07      	ldr	r3, [sp, #28]
 8003194:	1d19      	adds	r1, r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	9107      	str	r1, [sp, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db01      	blt.n	80031a2 <_svfiprintf_r+0x10a>
 800319e:	930b      	str	r3, [sp, #44]	; 0x2c
 80031a0:	e004      	b.n	80031ac <_svfiprintf_r+0x114>
 80031a2:	425b      	negs	r3, r3
 80031a4:	60e3      	str	r3, [r4, #12]
 80031a6:	2302      	movs	r3, #2
 80031a8:	4313      	orrs	r3, r2
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	782b      	ldrb	r3, [r5, #0]
 80031ae:	2b2e      	cmp	r3, #46	; 0x2e
 80031b0:	d10a      	bne.n	80031c8 <_svfiprintf_r+0x130>
 80031b2:	786b      	ldrb	r3, [r5, #1]
 80031b4:	2b2a      	cmp	r3, #42	; 0x2a
 80031b6:	d135      	bne.n	8003224 <_svfiprintf_r+0x18c>
 80031b8:	9b07      	ldr	r3, [sp, #28]
 80031ba:	3502      	adds	r5, #2
 80031bc:	1d1a      	adds	r2, r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	9207      	str	r2, [sp, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db2b      	blt.n	800321e <_svfiprintf_r+0x186>
 80031c6:	9309      	str	r3, [sp, #36]	; 0x24
 80031c8:	4e2f      	ldr	r6, [pc, #188]	; (8003288 <_svfiprintf_r+0x1f0>)
 80031ca:	2203      	movs	r2, #3
 80031cc:	0030      	movs	r0, r6
 80031ce:	7829      	ldrb	r1, [r5, #0]
 80031d0:	f000 f9f5 	bl	80035be <memchr>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d006      	beq.n	80031e6 <_svfiprintf_r+0x14e>
 80031d8:	2340      	movs	r3, #64	; 0x40
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	4083      	lsls	r3, r0
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	3501      	adds	r5, #1
 80031e2:	4313      	orrs	r3, r2
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	7829      	ldrb	r1, [r5, #0]
 80031e8:	2206      	movs	r2, #6
 80031ea:	4828      	ldr	r0, [pc, #160]	; (800328c <_svfiprintf_r+0x1f4>)
 80031ec:	1c6e      	adds	r6, r5, #1
 80031ee:	7621      	strb	r1, [r4, #24]
 80031f0:	f000 f9e5 	bl	80035be <memchr>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d03c      	beq.n	8003272 <_svfiprintf_r+0x1da>
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <_svfiprintf_r+0x1f8>)
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d125      	bne.n	800324a <_svfiprintf_r+0x1b2>
 80031fe:	2207      	movs	r2, #7
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	3307      	adds	r3, #7
 8003204:	4393      	bics	r3, r2
 8003206:	3308      	adds	r3, #8
 8003208:	9307      	str	r3, [sp, #28]
 800320a:	6963      	ldr	r3, [r4, #20]
 800320c:	9a04      	ldr	r2, [sp, #16]
 800320e:	189b      	adds	r3, r3, r2
 8003210:	6163      	str	r3, [r4, #20]
 8003212:	e764      	b.n	80030de <_svfiprintf_r+0x46>
 8003214:	4343      	muls	r3, r0
 8003216:	0035      	movs	r5, r6
 8003218:	2101      	movs	r1, #1
 800321a:	189b      	adds	r3, r3, r2
 800321c:	e7a6      	b.n	800316c <_svfiprintf_r+0xd4>
 800321e:	2301      	movs	r3, #1
 8003220:	425b      	negs	r3, r3
 8003222:	e7d0      	b.n	80031c6 <_svfiprintf_r+0x12e>
 8003224:	2300      	movs	r3, #0
 8003226:	200a      	movs	r0, #10
 8003228:	001a      	movs	r2, r3
 800322a:	3501      	adds	r5, #1
 800322c:	6063      	str	r3, [r4, #4]
 800322e:	7829      	ldrb	r1, [r5, #0]
 8003230:	1c6e      	adds	r6, r5, #1
 8003232:	3930      	subs	r1, #48	; 0x30
 8003234:	2909      	cmp	r1, #9
 8003236:	d903      	bls.n	8003240 <_svfiprintf_r+0x1a8>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0c5      	beq.n	80031c8 <_svfiprintf_r+0x130>
 800323c:	9209      	str	r2, [sp, #36]	; 0x24
 800323e:	e7c3      	b.n	80031c8 <_svfiprintf_r+0x130>
 8003240:	4342      	muls	r2, r0
 8003242:	0035      	movs	r5, r6
 8003244:	2301      	movs	r3, #1
 8003246:	1852      	adds	r2, r2, r1
 8003248:	e7f1      	b.n	800322e <_svfiprintf_r+0x196>
 800324a:	aa07      	add	r2, sp, #28
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	0021      	movs	r1, r4
 8003250:	003a      	movs	r2, r7
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <_svfiprintf_r+0x1fc>)
 8003254:	9803      	ldr	r0, [sp, #12]
 8003256:	e000      	b.n	800325a <_svfiprintf_r+0x1c2>
 8003258:	bf00      	nop
 800325a:	9004      	str	r0, [sp, #16]
 800325c:	9b04      	ldr	r3, [sp, #16]
 800325e:	3301      	adds	r3, #1
 8003260:	d1d3      	bne.n	800320a <_svfiprintf_r+0x172>
 8003262:	89bb      	ldrh	r3, [r7, #12]
 8003264:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003266:	065b      	lsls	r3, r3, #25
 8003268:	d400      	bmi.n	800326c <_svfiprintf_r+0x1d4>
 800326a:	e72c      	b.n	80030c6 <_svfiprintf_r+0x2e>
 800326c:	2001      	movs	r0, #1
 800326e:	4240      	negs	r0, r0
 8003270:	e729      	b.n	80030c6 <_svfiprintf_r+0x2e>
 8003272:	aa07      	add	r2, sp, #28
 8003274:	9200      	str	r2, [sp, #0]
 8003276:	0021      	movs	r1, r4
 8003278:	003a      	movs	r2, r7
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <_svfiprintf_r+0x1fc>)
 800327c:	9803      	ldr	r0, [sp, #12]
 800327e:	f000 f87b 	bl	8003378 <_printf_i>
 8003282:	e7ea      	b.n	800325a <_svfiprintf_r+0x1c2>
 8003284:	080038e9 	.word	0x080038e9
 8003288:	080038ef 	.word	0x080038ef
 800328c:	080038f3 	.word	0x080038f3
 8003290:	00000000 	.word	0x00000000
 8003294:	08002fd5 	.word	0x08002fd5

08003298 <_printf_common>:
 8003298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800329a:	0016      	movs	r6, r2
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	688a      	ldr	r2, [r1, #8]
 80032a0:	690b      	ldr	r3, [r1, #16]
 80032a2:	000c      	movs	r4, r1
 80032a4:	9000      	str	r0, [sp, #0]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	da00      	bge.n	80032ac <_printf_common+0x14>
 80032aa:	0013      	movs	r3, r2
 80032ac:	0022      	movs	r2, r4
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	3243      	adds	r2, #67	; 0x43
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	d001      	beq.n	80032bc <_printf_common+0x24>
 80032b8:	3301      	adds	r3, #1
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	069b      	lsls	r3, r3, #26
 80032c0:	d502      	bpl.n	80032c8 <_printf_common+0x30>
 80032c2:	6833      	ldr	r3, [r6, #0]
 80032c4:	3302      	adds	r3, #2
 80032c6:	6033      	str	r3, [r6, #0]
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	2306      	movs	r3, #6
 80032cc:	0015      	movs	r5, r2
 80032ce:	401d      	ands	r5, r3
 80032d0:	421a      	tst	r2, r3
 80032d2:	d027      	beq.n	8003324 <_printf_common+0x8c>
 80032d4:	0023      	movs	r3, r4
 80032d6:	3343      	adds	r3, #67	; 0x43
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	4193      	sbcs	r3, r2
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	0692      	lsls	r2, r2, #26
 80032e2:	d430      	bmi.n	8003346 <_printf_common+0xae>
 80032e4:	0022      	movs	r2, r4
 80032e6:	9901      	ldr	r1, [sp, #4]
 80032e8:	9800      	ldr	r0, [sp, #0]
 80032ea:	9d08      	ldr	r5, [sp, #32]
 80032ec:	3243      	adds	r2, #67	; 0x43
 80032ee:	47a8      	blx	r5
 80032f0:	3001      	adds	r0, #1
 80032f2:	d025      	beq.n	8003340 <_printf_common+0xa8>
 80032f4:	2206      	movs	r2, #6
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	2500      	movs	r5, #0
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d105      	bne.n	800330c <_printf_common+0x74>
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	68e5      	ldr	r5, [r4, #12]
 8003304:	1aed      	subs	r5, r5, r3
 8003306:	43eb      	mvns	r3, r5
 8003308:	17db      	asrs	r3, r3, #31
 800330a:	401d      	ands	r5, r3
 800330c:	68a3      	ldr	r3, [r4, #8]
 800330e:	6922      	ldr	r2, [r4, #16]
 8003310:	4293      	cmp	r3, r2
 8003312:	dd01      	ble.n	8003318 <_printf_common+0x80>
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	18ed      	adds	r5, r5, r3
 8003318:	2600      	movs	r6, #0
 800331a:	42b5      	cmp	r5, r6
 800331c:	d120      	bne.n	8003360 <_printf_common+0xc8>
 800331e:	2000      	movs	r0, #0
 8003320:	e010      	b.n	8003344 <_printf_common+0xac>
 8003322:	3501      	adds	r5, #1
 8003324:	68e3      	ldr	r3, [r4, #12]
 8003326:	6832      	ldr	r2, [r6, #0]
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	42ab      	cmp	r3, r5
 800332c:	ddd2      	ble.n	80032d4 <_printf_common+0x3c>
 800332e:	0022      	movs	r2, r4
 8003330:	2301      	movs	r3, #1
 8003332:	9901      	ldr	r1, [sp, #4]
 8003334:	9800      	ldr	r0, [sp, #0]
 8003336:	9f08      	ldr	r7, [sp, #32]
 8003338:	3219      	adds	r2, #25
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	d1f0      	bne.n	8003322 <_printf_common+0x8a>
 8003340:	2001      	movs	r0, #1
 8003342:	4240      	negs	r0, r0
 8003344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003346:	2030      	movs	r0, #48	; 0x30
 8003348:	18e1      	adds	r1, r4, r3
 800334a:	3143      	adds	r1, #67	; 0x43
 800334c:	7008      	strb	r0, [r1, #0]
 800334e:	0021      	movs	r1, r4
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	3145      	adds	r1, #69	; 0x45
 8003354:	7809      	ldrb	r1, [r1, #0]
 8003356:	18a2      	adds	r2, r4, r2
 8003358:	3243      	adds	r2, #67	; 0x43
 800335a:	3302      	adds	r3, #2
 800335c:	7011      	strb	r1, [r2, #0]
 800335e:	e7c1      	b.n	80032e4 <_printf_common+0x4c>
 8003360:	0022      	movs	r2, r4
 8003362:	2301      	movs	r3, #1
 8003364:	9901      	ldr	r1, [sp, #4]
 8003366:	9800      	ldr	r0, [sp, #0]
 8003368:	9f08      	ldr	r7, [sp, #32]
 800336a:	321a      	adds	r2, #26
 800336c:	47b8      	blx	r7
 800336e:	3001      	adds	r0, #1
 8003370:	d0e6      	beq.n	8003340 <_printf_common+0xa8>
 8003372:	3601      	adds	r6, #1
 8003374:	e7d1      	b.n	800331a <_printf_common+0x82>
	...

08003378 <_printf_i>:
 8003378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337a:	b08b      	sub	sp, #44	; 0x2c
 800337c:	9206      	str	r2, [sp, #24]
 800337e:	000a      	movs	r2, r1
 8003380:	3243      	adds	r2, #67	; 0x43
 8003382:	9307      	str	r3, [sp, #28]
 8003384:	9005      	str	r0, [sp, #20]
 8003386:	9204      	str	r2, [sp, #16]
 8003388:	7e0a      	ldrb	r2, [r1, #24]
 800338a:	000c      	movs	r4, r1
 800338c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800338e:	2a78      	cmp	r2, #120	; 0x78
 8003390:	d809      	bhi.n	80033a6 <_printf_i+0x2e>
 8003392:	2a62      	cmp	r2, #98	; 0x62
 8003394:	d80b      	bhi.n	80033ae <_printf_i+0x36>
 8003396:	2a00      	cmp	r2, #0
 8003398:	d100      	bne.n	800339c <_printf_i+0x24>
 800339a:	e0be      	b.n	800351a <_printf_i+0x1a2>
 800339c:	497c      	ldr	r1, [pc, #496]	; (8003590 <_printf_i+0x218>)
 800339e:	9103      	str	r1, [sp, #12]
 80033a0:	2a58      	cmp	r2, #88	; 0x58
 80033a2:	d100      	bne.n	80033a6 <_printf_i+0x2e>
 80033a4:	e093      	b.n	80034ce <_printf_i+0x156>
 80033a6:	0026      	movs	r6, r4
 80033a8:	3642      	adds	r6, #66	; 0x42
 80033aa:	7032      	strb	r2, [r6, #0]
 80033ac:	e022      	b.n	80033f4 <_printf_i+0x7c>
 80033ae:	0010      	movs	r0, r2
 80033b0:	3863      	subs	r0, #99	; 0x63
 80033b2:	2815      	cmp	r0, #21
 80033b4:	d8f7      	bhi.n	80033a6 <_printf_i+0x2e>
 80033b6:	f7fc fea7 	bl	8000108 <__gnu_thumb1_case_shi>
 80033ba:	0016      	.short	0x0016
 80033bc:	fff6001f 	.word	0xfff6001f
 80033c0:	fff6fff6 	.word	0xfff6fff6
 80033c4:	001ffff6 	.word	0x001ffff6
 80033c8:	fff6fff6 	.word	0xfff6fff6
 80033cc:	fff6fff6 	.word	0xfff6fff6
 80033d0:	003600a3 	.word	0x003600a3
 80033d4:	fff60083 	.word	0xfff60083
 80033d8:	00b4fff6 	.word	0x00b4fff6
 80033dc:	0036fff6 	.word	0x0036fff6
 80033e0:	fff6fff6 	.word	0xfff6fff6
 80033e4:	0087      	.short	0x0087
 80033e6:	0026      	movs	r6, r4
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	3642      	adds	r6, #66	; 0x42
 80033ec:	1d11      	adds	r1, r2, #4
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	7033      	strb	r3, [r6, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0a2      	b.n	800353e <_printf_i+0x1c6>
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	6809      	ldr	r1, [r1, #0]
 80033fc:	1d02      	adds	r2, r0, #4
 80033fe:	060d      	lsls	r5, r1, #24
 8003400:	d50b      	bpl.n	800341a <_printf_i+0xa2>
 8003402:	6805      	ldr	r5, [r0, #0]
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	2d00      	cmp	r5, #0
 8003408:	da03      	bge.n	8003412 <_printf_i+0x9a>
 800340a:	232d      	movs	r3, #45	; 0x2d
 800340c:	9a04      	ldr	r2, [sp, #16]
 800340e:	426d      	negs	r5, r5
 8003410:	7013      	strb	r3, [r2, #0]
 8003412:	4b5f      	ldr	r3, [pc, #380]	; (8003590 <_printf_i+0x218>)
 8003414:	270a      	movs	r7, #10
 8003416:	9303      	str	r3, [sp, #12]
 8003418:	e01b      	b.n	8003452 <_printf_i+0xda>
 800341a:	6805      	ldr	r5, [r0, #0]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	0649      	lsls	r1, r1, #25
 8003420:	d5f1      	bpl.n	8003406 <_printf_i+0x8e>
 8003422:	b22d      	sxth	r5, r5
 8003424:	e7ef      	b.n	8003406 <_printf_i+0x8e>
 8003426:	680d      	ldr	r5, [r1, #0]
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	1d08      	adds	r0, r1, #4
 800342c:	6018      	str	r0, [r3, #0]
 800342e:	062e      	lsls	r6, r5, #24
 8003430:	d501      	bpl.n	8003436 <_printf_i+0xbe>
 8003432:	680d      	ldr	r5, [r1, #0]
 8003434:	e003      	b.n	800343e <_printf_i+0xc6>
 8003436:	066d      	lsls	r5, r5, #25
 8003438:	d5fb      	bpl.n	8003432 <_printf_i+0xba>
 800343a:	680d      	ldr	r5, [r1, #0]
 800343c:	b2ad      	uxth	r5, r5
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <_printf_i+0x218>)
 8003440:	2708      	movs	r7, #8
 8003442:	9303      	str	r3, [sp, #12]
 8003444:	2a6f      	cmp	r2, #111	; 0x6f
 8003446:	d000      	beq.n	800344a <_printf_i+0xd2>
 8003448:	3702      	adds	r7, #2
 800344a:	0023      	movs	r3, r4
 800344c:	2200      	movs	r2, #0
 800344e:	3343      	adds	r3, #67	; 0x43
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	6863      	ldr	r3, [r4, #4]
 8003454:	60a3      	str	r3, [r4, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db03      	blt.n	8003462 <_printf_i+0xea>
 800345a:	2104      	movs	r1, #4
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	438a      	bics	r2, r1
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	2d00      	cmp	r5, #0
 8003464:	d102      	bne.n	800346c <_printf_i+0xf4>
 8003466:	9e04      	ldr	r6, [sp, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00c      	beq.n	8003486 <_printf_i+0x10e>
 800346c:	9e04      	ldr	r6, [sp, #16]
 800346e:	0028      	movs	r0, r5
 8003470:	0039      	movs	r1, r7
 8003472:	f7fc fed9 	bl	8000228 <__aeabi_uidivmod>
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	3e01      	subs	r6, #1
 800347a:	5c5b      	ldrb	r3, [r3, r1]
 800347c:	7033      	strb	r3, [r6, #0]
 800347e:	002b      	movs	r3, r5
 8003480:	0005      	movs	r5, r0
 8003482:	429f      	cmp	r7, r3
 8003484:	d9f3      	bls.n	800346e <_printf_i+0xf6>
 8003486:	2f08      	cmp	r7, #8
 8003488:	d109      	bne.n	800349e <_printf_i+0x126>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	07db      	lsls	r3, r3, #31
 800348e:	d506      	bpl.n	800349e <_printf_i+0x126>
 8003490:	6862      	ldr	r2, [r4, #4]
 8003492:	6923      	ldr	r3, [r4, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	dc02      	bgt.n	800349e <_printf_i+0x126>
 8003498:	2330      	movs	r3, #48	; 0x30
 800349a:	3e01      	subs	r6, #1
 800349c:	7033      	strb	r3, [r6, #0]
 800349e:	9b04      	ldr	r3, [sp, #16]
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	9b07      	ldr	r3, [sp, #28]
 80034a6:	0021      	movs	r1, r4
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	9805      	ldr	r0, [sp, #20]
 80034ac:	9b06      	ldr	r3, [sp, #24]
 80034ae:	aa09      	add	r2, sp, #36	; 0x24
 80034b0:	f7ff fef2 	bl	8003298 <_printf_common>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d147      	bne.n	8003548 <_printf_i+0x1d0>
 80034b8:	2001      	movs	r0, #1
 80034ba:	4240      	negs	r0, r0
 80034bc:	b00b      	add	sp, #44	; 0x2c
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c0:	2220      	movs	r2, #32
 80034c2:	6809      	ldr	r1, [r1, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	6022      	str	r2, [r4, #0]
 80034c8:	2278      	movs	r2, #120	; 0x78
 80034ca:	4932      	ldr	r1, [pc, #200]	; (8003594 <_printf_i+0x21c>)
 80034cc:	9103      	str	r1, [sp, #12]
 80034ce:	0021      	movs	r1, r4
 80034d0:	3145      	adds	r1, #69	; 0x45
 80034d2:	700a      	strb	r2, [r1, #0]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	c920      	ldmia	r1!, {r5}
 80034da:	0610      	lsls	r0, r2, #24
 80034dc:	d402      	bmi.n	80034e4 <_printf_i+0x16c>
 80034de:	0650      	lsls	r0, r2, #25
 80034e0:	d500      	bpl.n	80034e4 <_printf_i+0x16c>
 80034e2:	b2ad      	uxth	r5, r5
 80034e4:	6019      	str	r1, [r3, #0]
 80034e6:	07d3      	lsls	r3, r2, #31
 80034e8:	d502      	bpl.n	80034f0 <_printf_i+0x178>
 80034ea:	2320      	movs	r3, #32
 80034ec:	4313      	orrs	r3, r2
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	2710      	movs	r7, #16
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	d1a9      	bne.n	800344a <_printf_i+0xd2>
 80034f6:	2220      	movs	r2, #32
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	4393      	bics	r3, r2
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	e7a4      	b.n	800344a <_printf_i+0xd2>
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	680d      	ldr	r5, [r1, #0]
 8003504:	1d10      	adds	r0, r2, #4
 8003506:	6949      	ldr	r1, [r1, #20]
 8003508:	6018      	str	r0, [r3, #0]
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	062e      	lsls	r6, r5, #24
 800350e:	d501      	bpl.n	8003514 <_printf_i+0x19c>
 8003510:	6019      	str	r1, [r3, #0]
 8003512:	e002      	b.n	800351a <_printf_i+0x1a2>
 8003514:	066d      	lsls	r5, r5, #25
 8003516:	d5fb      	bpl.n	8003510 <_printf_i+0x198>
 8003518:	8019      	strh	r1, [r3, #0]
 800351a:	2300      	movs	r3, #0
 800351c:	9e04      	ldr	r6, [sp, #16]
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	e7c0      	b.n	80034a4 <_printf_i+0x12c>
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	1d11      	adds	r1, r2, #4
 8003526:	6019      	str	r1, [r3, #0]
 8003528:	6816      	ldr	r6, [r2, #0]
 800352a:	2100      	movs	r1, #0
 800352c:	0030      	movs	r0, r6
 800352e:	6862      	ldr	r2, [r4, #4]
 8003530:	f000 f845 	bl	80035be <memchr>
 8003534:	2800      	cmp	r0, #0
 8003536:	d001      	beq.n	800353c <_printf_i+0x1c4>
 8003538:	1b80      	subs	r0, r0, r6
 800353a:	6060      	str	r0, [r4, #4]
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	6123      	str	r3, [r4, #16]
 8003540:	2300      	movs	r3, #0
 8003542:	9a04      	ldr	r2, [sp, #16]
 8003544:	7013      	strb	r3, [r2, #0]
 8003546:	e7ad      	b.n	80034a4 <_printf_i+0x12c>
 8003548:	0032      	movs	r2, r6
 800354a:	6923      	ldr	r3, [r4, #16]
 800354c:	9906      	ldr	r1, [sp, #24]
 800354e:	9805      	ldr	r0, [sp, #20]
 8003550:	9d07      	ldr	r5, [sp, #28]
 8003552:	47a8      	blx	r5
 8003554:	3001      	adds	r0, #1
 8003556:	d0af      	beq.n	80034b8 <_printf_i+0x140>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	079b      	lsls	r3, r3, #30
 800355c:	d415      	bmi.n	800358a <_printf_i+0x212>
 800355e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003560:	68e0      	ldr	r0, [r4, #12]
 8003562:	4298      	cmp	r0, r3
 8003564:	daaa      	bge.n	80034bc <_printf_i+0x144>
 8003566:	0018      	movs	r0, r3
 8003568:	e7a8      	b.n	80034bc <_printf_i+0x144>
 800356a:	0022      	movs	r2, r4
 800356c:	2301      	movs	r3, #1
 800356e:	9906      	ldr	r1, [sp, #24]
 8003570:	9805      	ldr	r0, [sp, #20]
 8003572:	9e07      	ldr	r6, [sp, #28]
 8003574:	3219      	adds	r2, #25
 8003576:	47b0      	blx	r6
 8003578:	3001      	adds	r0, #1
 800357a:	d09d      	beq.n	80034b8 <_printf_i+0x140>
 800357c:	3501      	adds	r5, #1
 800357e:	68e3      	ldr	r3, [r4, #12]
 8003580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	42ab      	cmp	r3, r5
 8003586:	dcf0      	bgt.n	800356a <_printf_i+0x1f2>
 8003588:	e7e9      	b.n	800355e <_printf_i+0x1e6>
 800358a:	2500      	movs	r5, #0
 800358c:	e7f7      	b.n	800357e <_printf_i+0x206>
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	080038fa 	.word	0x080038fa
 8003594:	0800390b 	.word	0x0800390b

08003598 <memmove>:
 8003598:	b510      	push	{r4, lr}
 800359a:	4288      	cmp	r0, r1
 800359c:	d902      	bls.n	80035a4 <memmove+0xc>
 800359e:	188b      	adds	r3, r1, r2
 80035a0:	4298      	cmp	r0, r3
 80035a2:	d303      	bcc.n	80035ac <memmove+0x14>
 80035a4:	2300      	movs	r3, #0
 80035a6:	e007      	b.n	80035b8 <memmove+0x20>
 80035a8:	5c8b      	ldrb	r3, [r1, r2]
 80035aa:	5483      	strb	r3, [r0, r2]
 80035ac:	3a01      	subs	r2, #1
 80035ae:	d2fb      	bcs.n	80035a8 <memmove+0x10>
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	5ccc      	ldrb	r4, [r1, r3]
 80035b4:	54c4      	strb	r4, [r0, r3]
 80035b6:	3301      	adds	r3, #1
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1fa      	bne.n	80035b2 <memmove+0x1a>
 80035bc:	e7f8      	b.n	80035b0 <memmove+0x18>

080035be <memchr>:
 80035be:	b2c9      	uxtb	r1, r1
 80035c0:	1882      	adds	r2, r0, r2
 80035c2:	4290      	cmp	r0, r2
 80035c4:	d101      	bne.n	80035ca <memchr+0xc>
 80035c6:	2000      	movs	r0, #0
 80035c8:	4770      	bx	lr
 80035ca:	7803      	ldrb	r3, [r0, #0]
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d0fb      	beq.n	80035c8 <memchr+0xa>
 80035d0:	3001      	adds	r0, #1
 80035d2:	e7f6      	b.n	80035c2 <memchr+0x4>

080035d4 <_realloc_r>:
 80035d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d6:	0007      	movs	r7, r0
 80035d8:	000e      	movs	r6, r1
 80035da:	0014      	movs	r4, r2
 80035dc:	2900      	cmp	r1, #0
 80035de:	d105      	bne.n	80035ec <_realloc_r+0x18>
 80035e0:	0011      	movs	r1, r2
 80035e2:	f7ff fb95 	bl	8002d10 <_malloc_r>
 80035e6:	0005      	movs	r5, r0
 80035e8:	0028      	movs	r0, r5
 80035ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	d103      	bne.n	80035f8 <_realloc_r+0x24>
 80035f0:	f7ff fca6 	bl	8002f40 <_free_r>
 80035f4:	0025      	movs	r5, r4
 80035f6:	e7f7      	b.n	80035e8 <_realloc_r+0x14>
 80035f8:	f000 f81b 	bl	8003632 <_malloc_usable_size_r>
 80035fc:	9001      	str	r0, [sp, #4]
 80035fe:	4284      	cmp	r4, r0
 8003600:	d803      	bhi.n	800360a <_realloc_r+0x36>
 8003602:	0035      	movs	r5, r6
 8003604:	0843      	lsrs	r3, r0, #1
 8003606:	42a3      	cmp	r3, r4
 8003608:	d3ee      	bcc.n	80035e8 <_realloc_r+0x14>
 800360a:	0021      	movs	r1, r4
 800360c:	0038      	movs	r0, r7
 800360e:	f7ff fb7f 	bl	8002d10 <_malloc_r>
 8003612:	1e05      	subs	r5, r0, #0
 8003614:	d0e8      	beq.n	80035e8 <_realloc_r+0x14>
 8003616:	9b01      	ldr	r3, [sp, #4]
 8003618:	0022      	movs	r2, r4
 800361a:	429c      	cmp	r4, r3
 800361c:	d900      	bls.n	8003620 <_realloc_r+0x4c>
 800361e:	001a      	movs	r2, r3
 8003620:	0031      	movs	r1, r6
 8003622:	0028      	movs	r0, r5
 8003624:	f7ff fc82 	bl	8002f2c <memcpy>
 8003628:	0031      	movs	r1, r6
 800362a:	0038      	movs	r0, r7
 800362c:	f7ff fc88 	bl	8002f40 <_free_r>
 8003630:	e7da      	b.n	80035e8 <_realloc_r+0x14>

08003632 <_malloc_usable_size_r>:
 8003632:	1f0b      	subs	r3, r1, #4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1f18      	subs	r0, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	da01      	bge.n	8003640 <_malloc_usable_size_r+0xe>
 800363c:	580b      	ldr	r3, [r1, r0]
 800363e:	18c0      	adds	r0, r0, r3
 8003640:	4770      	bx	lr
	...

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
